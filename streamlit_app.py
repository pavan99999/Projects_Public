
"outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'yfinance'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01myfinance\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01myf\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpd\u001b[39;00m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mta\u001b[39;00m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'yfinance'"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import ta\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error, r2_score, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Step 1: Load IBM data\n",
    "ticker = \"IBM\"\n",
    "df = yf.download(ticker, start=\"2018-01-01\", end=\"2024-12-31\")\n",
    "\n",
    "# Step 2: Technical indicators\n",
    "df['rsi'] = ta.momentum.RSIIndicator(df['Close']).rsi()\n",
    "df['stoch'] = ta.momentum.StochasticOscillator(df['High'], df['Low'], df['Close']).stoch()\n",
    "df['macd'] = ta.trend.MACD(df['Close']).macd_diff()\n",
    "df['obv'] = ta.volume.OnBalanceVolumeIndicator(df['Close'], df['Volume']).on_balance_volume()\n",
    "df['sma_10'] = ta.trend.SMAIndicator(df['Close'], window=10).sma_indicator()\n",
    "df['ema_20'] = ta.trend.EMAIndicator(df['Close'], window=20).ema_indicator()\n",
    "bb = ta.volatility.BollingerBands(df['Close'], window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 3: Targets\n",
    "df['next_1d_close'] = df['Close'].shift(-1)\n",
    "df['next_3d_close'] = df['Close'].shift(-3)\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "\n",
    "df['dir_1d'] = (df['next_1d_close'] > df['Close']).astype(int)\n",
    "df['dir_3d'] = (df['next_3d_close'] > df['Close']).astype(int)\n",
    "df['dir_5d'] = (df['next_5d_close'] > df['Close']).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 4: Feature set\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Targets\n",
    "y_price_1d = df['next_1d_close']\n",
    "y_dir_1d = df['dir_1d']\n",
    "y_price_3d = df['next_3d_close']\n",
    "y_dir_3d = df['dir_3d']\n",
    "y_price_5d = df['next_5d_close']\n",
    "y_dir_5d = df['dir_5d']\n",
    "\n",
    "# Step 5: Split sets\n",
    "X_train, X_test = train_test_split(X, test_size=0.2, shuffle=False)\n",
    "y_train_price_1d, y_test_price_1d = train_test_split(y_price_1d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_1d, y_test_dir_1d = train_test_split(y_dir_1d, test_size=0.2, shuffle=False)\n",
    "y_train_price_3d, y_test_price_3d = train_test_split(y_price_3d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_3d, y_test_dir_3d = train_test_split(y_dir_3d, test_size=0.2, shuffle=False)\n",
    "y_train_price_5d, y_test_price_5d = train_test_split(y_price_5d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_5d, y_test_dir_5d = train_test_split(y_dir_5d, test_size=0.2, shuffle=False)\n",
    "\n",
    "# Step 6: Train models\n",
    "models = {}\n",
    "for name, target_train, target_test in [\n",
    "    ('price_1d', y_train_price_1d, y_test_price_1d),\n",
    "    ('price_3d', y_train_price_3d, y_test_price_3d),\n",
    "    ('price_5d', y_train_price_5d, y_test_price_5d),\n",
    "]:\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    reg.fit(X_train, target_train)\n",
    "    models[name] = (reg, target_test)\n",
    "\n",
    "for name, target_train, target_test in [\n",
    "    ('dir_1d', y_train_dir_1d, y_test_dir_1d),\n",
    "    ('dir_3d', y_train_dir_3d, y_test_dir_3d),\n",
    "    ('dir_5d', y_train_dir_5d, y_test_dir_5d),\n",
    "]:\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    clf.fit(X_train, target_train)\n",
    "    models[name] = (clf, target_test)\n",
    "\n",
    "# Step 7: Make predictions and evaluate\n",
    "results = X_test.copy()\n",
    "for name, (model, target) in models.items():\n",
    "    pred = model.predict(X_test)\n",
    "    results[f'pred_{name}'] = pred\n",
    "    if 'price' in name:\n",
    "        mae = mean_absolute_error(target, pred)\n",
    "        r2 = r2_score(target, pred)\n",
    "        print(f\"\\n{name.upper()} - MAE: {mae:.2f}, R²: {r2:.2f}\")\n",
    "    else:\n",
    "        print(f\"\\n{name.upper()} Classification Report:\")\n",
    "        print(classification_report(target, pred > 0.5, target_names=[\"Down\", \"Up\"]))\n",
    "\n",
    "# Step 8: Add actual values for comparison\n",
    "results['actual_price_1d'] = y_test_price_1d.values\n",
    "results['actual_dir_1d'] = y_test_dir_1d.values\n",
    "\n",
    "# Step 9: Save to CSV\n",
    "results.to_csv(\"ibm_predictions.csv\")\n",
    "print(\"\\n✅ Saved results to ibm_predictions.csv\")\n",
    "\n",
    "# Step 10: Optional preview\n",
    "print(\"\\n📄 Sample Output:\")\n",
    "print(results[['pred_price_1d', 'actual_price_1d', 'pred_dir_1d', 'actual_dir_1d']].tail(10))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9dd14dba-4cf1-407b-879f-51a17db718aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting yfinance\n",
      "  Downloading yfinance-0.2.61-py2.py3-none-any.whl.metadata (5.8 kB)\n",
      "Collecting ta\n",
      "  Downloading ta-0.11.0.tar.gz (25 kB)\n",
      "  Preparing metadata (setup.py): started\n",
      "  Preparing metadata (setup.py): finished with status 'done'\n",
      "Requirement already satisfied: scikit-learn in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (1.6.1)\n",
      "Requirement already satisfied: pandas in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (2.2.3)\n",
      "Requirement already satisfied: matplotlib in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (3.10.0)\n",
      "Requirement already satisfied: numpy>=1.16.5 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from yfinance) (2.2.2)\n",
      "Requirement already satisfied: requests>=2.31 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from yfinance) (2.32.3)\n",
      "Collecting multitasking>=0.0.7 (from yfinance)\n",
      "  Downloading multitasking-0.0.11-py3-none-any.whl.metadata (5.5 kB)\n",
      "Requirement already satisfied: platformdirs>=2.0.0 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from yfinance) (3.10.0)\n",
      "Requirement already satisfied: pytz>=2022.5 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from yfinance) (2024.1)\n",
      "Collecting frozendict>=2.3.4 (from yfinance)\n",
      "  Downloading frozendict-2.4.6-py313-none-any.whl.metadata (23 kB)\n",
      "Collecting peewee>=3.16.2 (from yfinance)\n",
      "  Downloading peewee-3.18.1.tar.gz (3.0 MB)\n",
      "     ---------------------------------------- 0.0/3.0 MB ? eta -:--:--\n",
      "     ------------- -------------------------- 1.0/3.0 MB 5.5 MB/s eta 0:00:01\n",
      "     ---------------------------------------- 3.0/3.0 MB 11.7 MB/s eta 0:00:00\n",
      "  Installing build dependencies: started\n",
      "  Installing build dependencies: finished with status 'done'\n",
      "  Getting requirements to build wheel: started\n",
      "  Getting requirements to build wheel: finished with status 'done'\n",
      "  Preparing metadata (pyproject.toml): started\n",
      "  Preparing metadata (pyproject.toml): finished with status 'done'\n",
      "Requirement already satisfied: beautifulsoup4>=4.11.1 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from yfinance) (4.12.3)\n",
      "Collecting curl_cffi>=0.7 (from yfinance)\n",
      "  Downloading curl_cffi-0.11.1-cp39-abi3-win_amd64.whl.metadata (15 kB)\n",
      "Collecting protobuf>=3.19.0 (from yfinance)\n",
      "  Downloading protobuf-6.31.0-cp310-abi3-win_amd64.whl.metadata (593 bytes)\n",
      "Collecting websockets>=13.0 (from yfinance)\n",
      "  Downloading websockets-15.0.1-cp313-cp313-win_amd64.whl.metadata (7.0 kB)\n",
      "Requirement already satisfied: scipy>=1.6.0 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from scikit-learn) (1.15.1)\n",
      "Requirement already satisfied: joblib>=1.2.0 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from scikit-learn) (1.4.2)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from scikit-learn) (3.5.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from pandas) (2.9.0.post0)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from pandas) (2023.3)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from matplotlib) (1.3.1)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from matplotlib) (0.11.0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from matplotlib) (4.55.3)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from matplotlib) (1.4.8)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from matplotlib) (24.2)\n",
      "Requirement already satisfied: pillow>=8 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from matplotlib) (11.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from matplotlib) (3.2.0)\n",
      "Requirement already satisfied: soupsieve>1.2 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)\n",
      "Requirement already satisfied: cffi>=1.12.0 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from curl_cffi>=0.7->yfinance) (1.17.1)\n",
      "Requirement already satisfied: certifi>=2024.2.2 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from curl_cffi>=0.7->yfinance) (2025.1.31)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from requests>=2.31->yfinance) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from requests>=2.31->yfinance) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from requests>=2.31->yfinance) (2.3.0)\n",
      "Requirement already satisfied: pycparser in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from cffi>=1.12.0->curl_cffi>=0.7->yfinance) (2.21)\n",
      "Downloading yfinance-0.2.61-py2.py3-none-any.whl (117 kB)\n",
      "Downloading curl_cffi-0.11.1-cp39-abi3-win_amd64.whl (1.4 MB)\n",
      "   ---------------------------------------- 0.0/1.4 MB ? eta -:--:--\n",
      "   ---------------------------------------- 1.4/1.4 MB 22.2 MB/s eta 0:00:00\n",
      "Downloading frozendict-2.4.6-py313-none-any.whl (16 kB)\n",
      "Downloading multitasking-0.0.11-py3-none-any.whl (8.5 kB)\n",
      "Downloading protobuf-6.31.0-cp310-abi3-win_amd64.whl (435 kB)\n",
      "Downloading websockets-15.0.1-cp313-cp313-win_amd64.whl (176 kB)\n",
      "Building wheels for collected packages: ta, peewee\n",
      "  Building wheel for ta (setup.py): started\n",
      "  Building wheel for ta (setup.py): finished with status 'done'\n",
      "  Created wheel for ta: filename=ta-0.11.0-py3-none-any.whl size=29423 sha256=6e3c0ef987c64436a88726d23b1a5f9a1da8dfe1af95bedc28a975434faf8421\n",
      "  Stored in directory: c:\\users\\pavan\\appdata\\local\\pip\\cache\\wheels\\e3\\3a\\ee\\4955a26c90a4b7deb6d725dc8ec7b8604a7aef44e43a2e8af7\n",
      "  Building wheel for peewee (pyproject.toml): started\n",
      "  Building wheel for peewee (pyproject.toml): finished with status 'done'\n",
      "  Created wheel for peewee: filename=peewee-3.18.1-py3-none-any.whl size=139097 sha256=a833c26248e1b6f1a0a4097f2b93a1091f7a93aa35938c9be05804032bdc9f4c\n",
      "  Stored in directory: c:\\users\\pavan\\appdata\\local\\pip\\cache\\wheels\\91\\08\\75\\7ec051c4c2b139cc4aa3a4ae6059d80900c301473b215aad59\n",
      "Successfully built ta peewee\n",
      "Installing collected packages: peewee, multitasking, websockets, protobuf, frozendict, curl_cffi, yfinance, ta\n",
      "Successfully installed curl_cffi-0.11.1 frozendict-2.4.6 multitasking-0.0.11 peewee-3.18.1 protobuf-6.31.0 ta-0.11.0 websockets-15.0.1 yfinance-0.2.61\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install yfinance ta scikit-learn pandas matplotlib\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "960065c1-30ef-47d0-b26a-edf09eac4c85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "YF.download() has changed argument auto_adjust default to True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1760, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 14\u001b[0m\n\u001b[0;32m     11\u001b[0m df \u001b[38;5;241m=\u001b[39m yf\u001b[38;5;241m.\u001b[39mdownload(ticker, start\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2018-01-01\u001b[39m\u001b[38;5;124m\"\u001b[39m, end\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2024-12-31\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     13\u001b[0m \u001b[38;5;66;03m# Step 2: Technical indicators\u001b[39;00m\n\u001b[1;32m---> 14\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mmomentum\u001b[38;5;241m.\u001b[39mRSIIndicator(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     15\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mmomentum\u001b[38;5;241m.\u001b[39mStochasticOscillator(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m], df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m], df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     16\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mtrend\u001b[38;5;241m.\u001b[39mMACD(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1760, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import ta\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error, r2_score, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Step 1: Load IBM data\n",
    "ticker = \"IBM\"\n",
    "df = yf.download(ticker, start=\"2018-01-01\", end=\"2024-12-31\")\n",
    "\n",
    "# Step 2: Technical indicators\n",
    "df['rsi'] = ta.momentum.RSIIndicator(df['Close']).rsi()\n",
    "df['stoch'] = ta.momentum.StochasticOscillator(df['High'], df['Low'], df['Close']).stoch()\n",
    "df['macd'] = ta.trend.MACD(df['Close']).macd_diff()\n",
    "df['obv'] = ta.volume.OnBalanceVolumeIndicator(df['Close'], df['Volume']).on_balance_volume()\n",
    "df['sma_10'] = ta.trend.SMAIndicator(df['Close'], window=10).sma_indicator()\n",
    "df['ema_20'] = ta.trend.EMAIndicator(df['Close'], window=20).ema_indicator()\n",
    "bb = ta.volatility.BollingerBands(df['Close'], window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 3: Targets\n",
    "df['next_1d_close'] = df['Close'].shift(-1)\n",
    "df['next_3d_close'] = df['Close'].shift(-3)\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "\n",
    "df['dir_1d'] = (df['next_1d_close'] > df['Close']).astype(int)\n",
    "df['dir_3d'] = (df['next_3d_close'] > df['Close']).astype(int)\n",
    "df['dir_5d'] = (df['next_5d_close'] > df['Close']).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 4: Feature set\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Targets\n",
    "y_price_1d = df['next_1d_close']\n",
    "y_dir_1d = df['dir_1d']\n",
    "y_price_3d = df['next_3d_close']\n",
    "y_dir_3d = df['dir_3d']\n",
    "y_price_5d = df['next_5d_close']\n",
    "y_dir_5d = df['dir_5d']\n",
    "\n",
    "# Step 5: Split sets\n",
    "X_train, X_test = train_test_split(X, test_size=0.2, shuffle=False)\n",
    "y_train_price_1d, y_test_price_1d = train_test_split(y_price_1d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_1d, y_test_dir_1d = train_test_split(y_dir_1d, test_size=0.2, shuffle=False)\n",
    "y_train_price_3d, y_test_price_3d = train_test_split(y_price_3d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_3d, y_test_dir_3d = train_test_split(y_dir_3d, test_size=0.2, shuffle=False)\n",
    "y_train_price_5d, y_test_price_5d = train_test_split(y_price_5d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_5d, y_test_dir_5d = train_test_split(y_dir_5d, test_size=0.2, shuffle=False)\n",
    "\n",
    "# Step 6: Train models\n",
    "models = {}\n",
    "for name, target_train, target_test in [\n",
    "    ('price_1d', y_train_price_1d, y_test_price_1d),\n",
    "    ('price_3d', y_train_price_3d, y_test_price_3d),\n",
    "    ('price_5d', y_train_price_5d, y_test_price_5d),\n",
    "]:\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    reg.fit(X_train, target_train)\n",
    "    models[name] = (reg, target_test)\n",
    "\n",
    "for name, target_train, target_test in [\n",
    "    ('dir_1d', y_train_dir_1d, y_test_dir_1d),\n",
    "    ('dir_3d', y_train_dir_3d, y_test_dir_3d),\n",
    "    ('dir_5d', y_train_dir_5d, y_test_dir_5d),\n",
    "]:\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    clf.fit(X_train, target_train)\n",
    "    models[name] = (clf, target_test)\n",
    "\n",
    "# Step 7: Make predictions and evaluate\n",
    "results = X_test.copy()\n",
    "for name, (model, target) in models.items():\n",
    "    pred = model.predict(X_test)\n",
    "    results[f'pred_{name}'] = pred\n",
    "    if 'price' in name:\n",
    "        mae = mean_absolute_error(target, pred)\n",
    "        r2 = r2_score(target, pred)\n",
    "        print(f\"\\n{name.upper()} - MAE: {mae:.2f}, R²: {r2:.2f}\")\n",
    "    else:\n",
    "        print(f\"\\n{name.upper()} Classification Report:\")\n",
    "        print(classification_report(target, pred > 0.5, target_names=[\"Down\", \"Up\"]))\n",
    "\n",
    "# Step 8: Add actual values for comparison\n",
    "results['actual_price_1d'] = y_test_price_1d.values\n",
    "results['actual_dir_1d'] = y_test_dir_1d.values\n",
    "\n",
    "# Step 9: Save to CSV\n",
    "results.to_csv(\"ibm_predictions.csv\")\n",
    "print(\"\\n✅ Saved results to ibm_predictions.csv\")\n",
    "\n",
    "# Step 10: Optional preview\n",
    "print(\"\\n📄 Sample Output:\")\n",
    "print(results[['pred_price_1d', 'actual_price_1d', 'pred_dir_1d', 'actual_dir_1d']].tail(10))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7f17f273-5af0-4390-a1e7-deffbf3da116",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'numpy.ndarray' object has no attribute 'diff'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[5], line 14\u001b[0m\n\u001b[0;32m     11\u001b[0m df \u001b[38;5;241m=\u001b[39m yf\u001b[38;5;241m.\u001b[39mdownload(ticker, start\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2018-01-01\u001b[39m\u001b[38;5;124m\"\u001b[39m, end\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2024-12-31\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     13\u001b[0m \u001b[38;5;66;03m# Step 2: Technical indicators\u001b[39;00m\n\u001b[1;32m---> 14\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mmomentum\u001b[38;5;241m.\u001b[39mRSIIndicator(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mvalues\u001b[38;5;241m.\u001b[39mflatten())\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     15\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mmomentum\u001b[38;5;241m.\u001b[39mStochasticOscillator(high\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m], low\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m], close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     16\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mtrend\u001b[38;5;241m.\u001b[39mMACD(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:37\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     36\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_run\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m---> 37\u001b[0m     diff \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mdiff(\u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m     38\u001b[0m     up_direction \u001b[38;5;241m=\u001b[39m diff\u001b[38;5;241m.\u001b[39mwhere(diff \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0.0\u001b[39m)\n\u001b[0;32m     39\u001b[0m     down_direction \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m-\u001b[39mdiff\u001b[38;5;241m.\u001b[39mwhere(diff \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0.0\u001b[39m)\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'diff'"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import ta\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error, r2_score, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Step 1: Load IBM data\n",
    "ticker = \"IBM\"\n",
    "df = yf.download(ticker, start=\"2018-01-01\", end=\"2024-12-31\")\n",
    "\n",
    "# Step 2: Technical indicators\n",
    "df['rsi'] = ta.momentum.RSIIndicator(close=df['Close'].values.flatten()).rsi()\n",
    "df['stoch'] = ta.momentum.StochasticOscillator(high=df['High'], low=df['Low'], close=df['Close']).stoch()\n",
    "df['macd'] = ta.trend.MACD(close=df['Close']).macd_diff()\n",
    "df['obv'] = ta.volume.OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume']).on_balance_volume()\n",
    "df['sma_10'] = ta.trend.SMAIndicator(close=df['Close'], window=10).sma_indicator()\n",
    "df['ema_20'] = ta.trend.EMAIndicator(close=df['Close'], window=20).ema_indicator()\n",
    "bb = ta.volatility.BollingerBands(close=df['Close'], window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 3: Targets\n",
    "df['next_1d_close'] = df['Close'].shift(-1)\n",
    "df['next_3d_close'] = df['Close'].shift(-3)\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "\n",
    "df['dir_1d'] = (df['next_1d_close'] > df['Close']).astype(int)\n",
    "df['dir_3d'] = (df['next_3d_close'] > df['Close']).astype(int)\n",
    "df['dir_5d'] = (df['next_5d_close'] > df['Close']).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 4: Feature set\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "y_price_1d = df['next_1d_close']\n",
    "y_dir_1d = df['dir_1d']\n",
    "y_price_3d = df['next_3d_close']\n",
    "y_dir_3d = df['dir_3d']\n",
    "y_price_5d = df['next_5d_close']\n",
    "y_dir_5d = df['dir_5d']\n",
    "\n",
    "# Step 5: Split sets\n",
    "X_train, X_test = train_test_split(X, test_size=0.2, shuffle=False)\n",
    "y_train_price_1d, y_test_price_1d = train_test_split(y_price_1d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_1d, y_test_dir_1d = train_test_split(y_dir_1d, test_size=0.2, shuffle=False)\n",
    "y_train_price_3d, y_test_price_3d = train_test_split(y_price_3d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_3d, y_test_dir_3d = train_test_split(y_dir_3d, test_size=0.2, shuffle=False)\n",
    "y_train_price_5d, y_test_price_5d = train_test_split(y_price_5d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_5d, y_test_dir_5d = train_test_split(y_dir_5d, test_size=0.2, shuffle=False)\n",
    "\n",
    "# Step 6: Train models\n",
    "models = {}\n",
    "for name, target_train, target_test in [\n",
    "    ('price_1d', y_train_price_1d, y_test_price_1d),\n",
    "    ('price_3d', y_train_price_3d, y_test_price_3d),\n",
    "    ('price_5d', y_train_price_5d, y_test_price_5d),\n",
    "]:\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    reg.fit(X_train, target_train)\n",
    "    models[name] = (reg, target_test)\n",
    "\n",
    "for name, target_train, target_test in [\n",
    "    ('dir_1d', y_train_dir_1d, y_test_dir_1d),\n",
    "    ('dir_3d', y_train_dir_3d, y_test_dir_3d),\n",
    "    ('dir_5d', y_train_dir_5d, y_test_dir_5d),\n",
    "]:\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    clf.fit(X_train, target_train)\n",
    "    models[name] = (clf, target_test)\n",
    "\n",
    "# Step 7: Make predictions and evaluate\n",
    "results = X_test.copy()\n",
    "for name, (model, target) in models.items():\n",
    "    pred = model.predict(X_test)\n",
    "    results[f'pred_{name}'] = pred\n",
    "    if 'price' in name:\n",
    "        mae = mean_absolute_error(target, pred)\n",
    "        r2 = r2_score(target, pred)\n",
    "        print(f\"\\n{name.upper()} - MAE: {mae:.2f}, R²: {r2:.2f}\")\n",
    "    else:\n",
    "        print(f\"\\n{name.upper()} Classification Report:\")\n",
    "        print(classification_report(target, pred > 0.5, target_names=[\"Down\", \"Up\"]))\n",
    "\n",
    "results['actual_price_1d'] = y_test_price_1d.values\n",
    "results['actual_dir_1d'] = y_test_dir_1d.values\n",
    "\n",
    "results.to_csv(\"ibm_predictions.csv\")\n",
    "print(\"\\n✅ Saved results to ibm_predictions.csv\")\n",
    "\n",
    "# Step 8: Visualization\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(results.index, results['pred_price_3d'], label='Predicted 3-Day Price', linestyle='--')\n",
    "plt.plot(results.index, y_test_price_3d.values, label='Actual 3-Day Price')\n",
    "plt.title(\"IBM - 3-Day Ahead Price Prediction\")\n",
    "plt.xlabel(\"Index\")\n",
    "plt.ylabel(\"Price\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(results.index, results['pred_price_5d'], label='Predicted 5-Day Price', linestyle='--')\n",
    "plt.plot(results.index, y_test_price_5d.values, label='Actual 5-Day Price')\n",
    "plt.title(\"IBM - 5-Day Ahead Price Prediction\")\n",
    "plt.xlabel(\"Index\")\n",
    "plt.ylabel(\"Price\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Step 9: Real-time prediction\n",
    "today_df = yf.download(ticker, period=\"90d\")\n",
    "today_df['rsi'] = ta.momentum.RSIIndicator(close=today_df['Close']).rsi()\n",
    "today_df['stoch'] = ta.momentum.StochasticOscillator(high=today_df['High'], low=today_df['Low'], close=today_df['Close']).stoch()\n",
    "today_df['macd'] = ta.trend.MACD(close=today_df['Close']).macd_diff()\n",
    "today_df['obv'] = ta.volume.OnBalanceVolumeIndicator(close=today_df['Close'], volume=today_df['Volume']).on_balance_volume()\n",
    "today_df['sma_10'] = ta.trend.SMAIndicator(close=today_df['Close'], window=10).sma_indicator()\n",
    "today_df['ema_20'] = ta.trend.EMAIndicator(close=today_df['Close'], window=20).ema_indicator()\n",
    "bb = ta.volatility.BollingerBands(close=today_df['Close'], window=20, window_dev=2)\n",
    "today_df['bb_bbm'] = bb.bollinger_mavg()\n",
    "today_df['bb_bbh'] = bb.bollinger_hband()\n",
    "today_df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "today_df.dropna(inplace=True)\n",
    "latest_features = today_df[features].iloc[-1:]\n",
    "\n",
    "predictions = {}\n",
    "for name, (model, _) in models.items():\n",
    "    pred = model.predict(latest_features)[0]\n",
    "    predictions[name] = pred\n",
    "\n",
    "print(f\"\\n🔮 IBM Real-Time Predictions (as of {today_df.index[-1].date()}):\")\n",
    "print(f\"📌 Current Close: ${today_df['Close'].iloc[-1]:.2f}\")\n",
    "print(f\"📈 1-Day Price: ${predictions['price_1d']:.2f} | Direction: {'Up' if predictions['dir_1d'] > 0.5 else 'Down'}\")\n",
    "print(f\"📈 3-Day Price: ${predictions['price_3d']:.2f} | Direction: {'Up' if predictions['dir_3d'] > 0.5 else 'Down'}\")\n",
    "print(f\"📈 5-Day Price: ${predictions['price_5d']:.2f} | Direction: {'Up' if predictions['dir_5d'] > 0.5 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4631b6fe-5dda-425c-93e3-24d742a03e3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1760, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[4], line 14\u001b[0m\n\u001b[0;32m     11\u001b[0m df \u001b[38;5;241m=\u001b[39m yf\u001b[38;5;241m.\u001b[39mdownload(ticker, start\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2018-01-01\u001b[39m\u001b[38;5;124m\"\u001b[39m, end\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2024-12-31\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     13\u001b[0m \u001b[38;5;66;03m# Step 2: Technical indicators\u001b[39;00m\n\u001b[1;32m---> 14\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mmomentum\u001b[38;5;241m.\u001b[39mRSIIndicator(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     15\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mmomentum\u001b[38;5;241m.\u001b[39mStochasticOscillator(high\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m], low\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m], close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     16\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mtrend\u001b[38;5;241m.\u001b[39mMACD(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1760, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import ta\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error, r2_score, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Step 1: Load IBM data\n",
    "ticker = \"IBM\"\n",
    "df = yf.download(ticker, start=\"2018-01-01\", end=\"2024-12-31\")\n",
    "\n",
    "# Step 2: Technical indicators\n",
    "df['rsi'] = ta.momentum.RSIIndicator(close=df['Close']).rsi()\n",
    "df['stoch'] = ta.momentum.StochasticOscillator(high=df['High'], low=df['Low'], close=df['Close']).stoch()\n",
    "df['macd'] = ta.trend.MACD(close=df['Close']).macd_diff()\n",
    "df['obv'] = ta.volume.OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume']).on_balance_volume()\n",
    "df['sma_10'] = ta.trend.SMAIndicator(close=df['Close'], window=10).sma_indicator()\n",
    "df['ema_20'] = ta.trend.EMAIndicator(close=df['Close'], window=20).ema_indicator()\n",
    "bb = ta.volatility.BollingerBands(close=df['Close'], window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 3: Targets\n",
    "df['next_1d_close'] = df['Close'].shift(-1)\n",
    "df['next_3d_close'] = df['Close'].shift(-3)\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "\n",
    "df['dir_1d'] = (df['next_1d_close'] > df['Close']).astype(int)\n",
    "df['dir_3d'] = (df['next_3d_close'] > df['Close']).astype(int)\n",
    "df['dir_5d'] = (df['next_5d_close'] > df['Close']).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 4: Feature set\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "y_price_1d = df['next_1d_close']\n",
    "y_dir_1d = df['dir_1d']\n",
    "y_price_3d = df['next_3d_close']\n",
    "y_dir_3d = df['dir_3d']\n",
    "y_price_5d = df['next_5d_close']\n",
    "y_dir_5d = df['dir_5d']\n",
    "\n",
    "# Step 5: Split sets\n",
    "X_train, X_test = train_test_split(X, test_size=0.2, shuffle=False)\n",
    "y_train_price_1d, y_test_price_1d = train_test_split(y_price_1d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_1d, y_test_dir_1d = train_test_split(y_dir_1d, test_size=0.2, shuffle=False)\n",
    "y_train_price_3d, y_test_price_3d = train_test_split(y_price_3d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_3d, y_test_dir_3d = train_test_split(y_dir_3d, test_size=0.2, shuffle=False)\n",
    "y_train_price_5d, y_test_price_5d = train_test_split(y_price_5d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_5d, y_test_dir_5d = train_test_split(y_dir_5d, test_size=0.2, shuffle=False)\n",
    "\n",
    "# Step 6: Train models\n",
    "models = {}\n",
    "for name, target_train, target_test in [\n",
    "    ('price_1d', y_train_price_1d, y_test_price_1d),\n",
    "    ('price_3d', y_train_price_3d, y_test_price_3d),\n",
    "    ('price_5d', y_train_price_5d, y_test_price_5d),\n",
    "]:\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    reg.fit(X_train, target_train)\n",
    "    models[name] = (reg, target_test)\n",
    "\n",
    "for name, target_train, target_test in [\n",
    "    ('dir_1d', y_train_dir_1d, y_test_dir_1d),\n",
    "    ('dir_3d', y_train_dir_3d, y_test_dir_3d),\n",
    "    ('dir_5d', y_train_dir_5d, y_test_dir_5d),\n",
    "]:\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    clf.fit(X_train, target_train)\n",
    "    models[name] = (clf, target_test)\n",
    "\n",
    "# Step 7: Make predictions and evaluate\n",
    "results = X_test.copy()\n",
    "for name, (model, target) in models.items():\n",
    "    pred = model.predict(X_test)\n",
    "    results[f'pred_{name}'] = pred\n",
    "    if 'price' in name:\n",
    "        mae = mean_absolute_error(target, pred)\n",
    "        r2 = r2_score(target, pred)\n",
    "        print(f\"\\n{name.upper()} - MAE: {mae:.2f}, R²: {r2:.2f}\")\n",
    "    else:\n",
    "        print(f\"\\n{name.upper()} Classification Report:\")\n",
    "        print(classification_report(target, pred > 0.5, target_names=[\"Down\", \"Up\"]))\n",
    "\n",
    "results['actual_price_1d'] = y_test_price_1d.values\n",
    "results['actual_dir_1d'] = y_test_dir_1d.values\n",
    "\n",
    "results.to_csv(\"ibm_predictions.csv\")\n",
    "print(\"\\n✅ Saved results to ibm_predictions.csv\")\n",
    "\n",
    "# Step 8: Visualization\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(results.index, results['pred_price_3d'], label='Predicted 3-Day Price', linestyle='--')\n",
    "plt.plot(results.index, y_test_price_3d.values, label='Actual 3-Day Price')\n",
    "plt.title(\"IBM - 3-Day Ahead Price Prediction\")\n",
    "plt.xlabel(\"Index\")\n",
    "plt.ylabel(\"Price\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(results.index, results['pred_price_5d'], label='Predicted 5-Day Price', linestyle='--')\n",
    "plt.plot(results.index, y_test_price_5d.values, label='Actual 5-Day Price')\n",
    "plt.title(\"IBM - 5-Day Ahead Price Prediction\")\n",
    "plt.xlabel(\"Index\")\n",
    "plt.ylabel(\"Price\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Step 9: Real-time prediction\n",
    "today_df = yf.download(ticker, period=\"90d\")\n",
    "today_df['rsi'] = ta.momentum.RSIIndicator(close=today_df['Close'].values.flatten()).rsi()\n",
    "today_df['stoch'] = ta.momentum.StochasticOscillator(high=today_df['High'], low=today_df['Low'], close=today_df['Close']).stoch()\n",
    "today_df['macd'] = ta.trend.MACD(close=today_df['Close']).macd_diff()\n",
    "today_df['obv'] = ta.volume.OnBalanceVolumeIndicator(close=today_df['Close'], volume=today_df['Volume']).on_balance_volume()\n",
    "today_df['sma_10'] = ta.trend.SMAIndicator(close=today_df['Close'], window=10).sma_indicator()\n",
    "today_df['ema_20'] = ta.trend.EMAIndicator(close=today_df['Close'], window=20).ema_indicator()\n",
    "bb = ta.volatility.BollingerBands(close=today_df['Close'], window=20, window_dev=2)\n",
    "today_df['bb_bbm'] = bb.bollinger_mavg()\n",
    "today_df['bb_bbh'] = bb.bollinger_hband()\n",
    "today_df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "today_df.dropna(inplace=True)\n",
    "latest_features = today_df[features].iloc[-1:]\n",
    "\n",
    "predictions = {}\n",
    "for name, (model, _) in models.items():\n",
    "    pred = model.predict(latest_features)[0]\n",
    "    predictions[name] = pred\n",
    "\n",
    "print(f\"\\n🔮 IBM Real-Time Predictions (as of {today_df.index[-1].date()}):\")\n",
    "print(f\"📌 Current Close: ${today_df['Close'].iloc[-1]:.2f}\")\n",
    "print(f\"📈 1-Day Price: ${predictions['price_1d']:.2f} | Direction: {'Up' if predictions['dir_1d'] > 0.5 else 'Down'}\")\n",
    "print(f\"📈 3-Day Price: ${predictions['price_3d']:.2f} | Direction: {'Up' if predictions['dir_3d'] > 0.5 else 'Down'}\")\n",
    "print(f\"📈 5-Day Price: ${predictions['price_5d']:.2f} | Direction: {'Up' if predictions['dir_5d'] > 0.5 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f23a217c-2705-408a-a247-6a621a95d38a",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (1651754068.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[6], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    [*********************100%***********************]  1 of 1 completed\u001b[0m\n\u001b[1;37m     ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "[*********************100%***********************]  1 of 1 completed\n",
    "---------------------------------------------------------------------------\n",
    "ValueError                                Traceback (most recent call last)\n",
    "Cell In[3], line 14\n",
    "     11 df = yf.download(ticker, start=\"2018-01-01\", end=\"2024-12-31\")\n",
    "     13 # Step 2: Technical indicators\n",
    "---> 14 df['rsi'] = ta.momentum.RSIIndicator(close=df['Close']).rsi()\n",
    "     15 df['stoch'] = ta.momentum.StochasticOscillator(high=df['High'], low=df['Low'], close=df['Close']).stoch()\n",
    "     16 df['macd'] = ta.trend.MACD(close=df['Close']).macd_diff()\n",
    "\n",
    "File ~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34, in RSIIndicator.__init__(self, close, window, fillna)\n",
    "     32 self._window = window\n",
    "     33 self._fillna = fillna\n",
    "---> 34 self._run()\n",
    "\n",
    "File ~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48, in RSIIndicator._run(self)\n",
    "     44 emadn = down_direction.ewm(\n",
    "     45     alpha=1 / self._window, min_periods=min_periods, adjust=False\n",
    "     46 ).mean()\n",
    "     47 relative_strength = emaup / emadn\n",
    "---> 48 self._rsi = pd.Series(\n",
    "     49     np.where(emadn == 0, 100, 100 - (100 / (1 + relative_strength))),\n",
    "     50     index=self._close.index,\n",
    "     51 )\n",
    "\n",
    "File ~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584, in Series.__init__(self, data, index, dtype, name, copy, fastpath)\n",
    "    582         data = data.copy()\n",
    "    583 else:\n",
    "--> 584     data = sanitize_array(data, index, dtype, copy)\n",
    "    586     manager = _get_option(\"mode.data_manager\", silent=True)\n",
    "    587     if manager == \"block\":\n",
    "\n",
    "File ~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659, in sanitize_array(data, index, dtype, copy, allow_2d)\n",
    "    656             subarr = cast(np.ndarray, subarr)\n",
    "    657             subarr = maybe_infer_to_datetimelike(subarr)\n",
    "--> 659 subarr = _sanitize_ndim(subarr, data, dtype, index, allow_2d=allow_2d)\n",
    "    661 if isinstance(subarr, np.ndarray):\n",
    "    662     # at this point we should have dtype be None or subarr.dtype == dtype\n",
    "    663     dtype = cast(np.dtype, dtype)\n",
    "\n",
    "File ~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718, in _sanitize_ndim(result, data, dtype, index, allow_2d)\n",
    "    716     if allow_2d:\n",
    "    717         return result\n",
    "--> 718     raise ValueError(\n",
    "    719         f\"Data must be 1-dimensional, got ndarray of shape {data.shape} instead\"\n",
    "    720     )\n",
    "    721 if is_object_dtype(dtype) and isinstance(dtype, ExtensionDtype):\n",
    "    722     # i.e. NumpyEADtype(\"O\")\n",
    "    724     result = com.asarray_tuplesafe(data, dtype=np.dtype(\"object\"))\n",
    "\n",
    "ValueError: Data must be 1-dimensional, got ndarray of shape (1760, 1) instead"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13199573-49ad-4502-bc05-00368ffedf0b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "41dcdd90-14ce-4de6-82c9-4933ed3297f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1760, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[7], line 14\u001b[0m\n\u001b[0;32m     11\u001b[0m df \u001b[38;5;241m=\u001b[39m yf\u001b[38;5;241m.\u001b[39mdownload(ticker, start\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2018-01-01\u001b[39m\u001b[38;5;124m\"\u001b[39m, end\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2024-12-31\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     13\u001b[0m \u001b[38;5;66;03m# Step 2: Technical indicators\u001b[39;00m\n\u001b[1;32m---> 14\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mmomentum\u001b[38;5;241m.\u001b[39mRSIIndicator(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     15\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mmomentum\u001b[38;5;241m.\u001b[39mStochasticOscillator(high\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m], low\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m], close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     16\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mtrend\u001b[38;5;241m.\u001b[39mMACD(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1760, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import ta\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error, r2_score, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Step 1: Load IBM data\n",
    "ticker = \"IBM\"\n",
    "df = yf.download(ticker, start=\"2018-01-01\", end=\"2024-12-31\")\n",
    "\n",
    "# Step 2: Technical indicators\n",
    "df['rsi'] = ta.momentum.RSIIndicator(close=df['Close']).rsi()\n",
    "df['stoch'] = ta.momentum.StochasticOscillator(high=df['High'], low=df['Low'], close=df['Close']).stoch()\n",
    "df['macd'] = ta.trend.MACD(close=df['Close']).macd_diff()\n",
    "df['obv'] = ta.volume.OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume']).on_balance_volume()\n",
    "df['sma_10'] = ta.trend.SMAIndicator(close=df['Close'], window=10).sma_indicator()\n",
    "df['ema_20'] = ta.trend.EMAIndicator(close=df['Close'], window=20).ema_indicator()\n",
    "bb = ta.volatility.BollingerBands(close=df['Close'], window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 3: Targets\n",
    "df['next_1d_close'] = df['Close'].shift(-1)\n",
    "df['next_3d_close'] = df['Close'].shift(-3)\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "\n",
    "df['dir_1d'] = (df['next_1d_close'] > df['Close']).astype(int)\n",
    "df['dir_3d'] = (df['next_3d_close'] > df['Close']).astype(int)\n",
    "df['dir_5d'] = (df['next_5d_close'] > df['Close']).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 4: Feature set\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "y_price_1d = df['next_1d_close']\n",
    "y_dir_1d = df['dir_1d']\n",
    "y_price_3d = df['next_3d_close']\n",
    "y_dir_3d = df['dir_3d']\n",
    "y_price_5d = df['next_5d_close']\n",
    "y_dir_5d = df['dir_5d']\n",
    "\n",
    "# Step 5: Split sets\n",
    "X_train, X_test = train_test_split(X, test_size=0.2, shuffle=False)\n",
    "y_train_price_1d, y_test_price_1d = train_test_split(y_price_1d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_1d, y_test_dir_1d = train_test_split(y_dir_1d, test_size=0.2, shuffle=False)\n",
    "y_train_price_3d, y_test_price_3d = train_test_split(y_price_3d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_3d, y_test_dir_3d = train_test_split(y_dir_3d, test_size=0.2, shuffle=False)\n",
    "y_train_price_5d, y_test_price_5d = train_test_split(y_price_5d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_5d, y_test_dir_5d = train_test_split(y_dir_5d, test_size=0.2, shuffle=False)\n",
    "\n",
    "# Step 6: Train models\n",
    "models = {}\n",
    "for name, target_train, target_test in [\n",
    "    ('price_1d', y_train_price_1d, y_test_price_1d),\n",
    "    ('price_3d', y_train_price_3d, y_test_price_3d),\n",
    "    ('price_5d', y_train_price_5d, y_test_price_5d),\n",
    "]:\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    reg.fit(X_train, target_train)\n",
    "    models[name] = (reg, target_test)\n",
    "\n",
    "for name, target_train, target_test in [\n",
    "    ('dir_1d', y_train_dir_1d, y_test_dir_1d),\n",
    "    ('dir_3d', y_train_dir_3d, y_test_dir_3d),\n",
    "    ('dir_5d', y_train_dir_5d, y_test_dir_5d),\n",
    "]:\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    clf.fit(X_train, target_train)\n",
    "    models[name] = (clf, target_test)\n",
    "\n",
    "# Step 7: Make predictions and evaluate\n",
    "results = X_test.copy()\n",
    "for name, (model, target) in models.items():\n",
    "    pred = model.predict(X_test)\n",
    "    results[f'pred_{name}'] = pred\n",
    "    if 'price' in name:\n",
    "        mae = mean_absolute_error(target, pred)\n",
    "        r2 = r2_score(target, pred)\n",
    "        print(f\"\\n{name.upper()} - MAE: {mae:.2f}, R²: {r2:.2f}\")\n",
    "    else:\n",
    "        print(f\"\\n{name.upper()} Classification Report:\")\n",
    "        print(classification_report(target, pred > 0.5, target_names=[\"Down\", \"Up\"]))\n",
    "\n",
    "results['actual_price_1d'] = y_test_price_1d.values\n",
    "results['actual_dir_1d'] = y_test_dir_1d.values\n",
    "\n",
    "results.to_csv(\"ibm_predictions.csv\")\n",
    "print(\"\\n✅ Saved results to ibm_predictions.csv\")\n",
    "\n",
    "# Step 8: Visualization\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(results.index, results['pred_price_3d'], label='Predicted 3-Day Price', linestyle='--')\n",
    "plt.plot(results.index, y_test_price_3d.values, label='Actual 3-Day Price')\n",
    "plt.title(\"IBM - 3-Day Ahead Price Prediction\")\n",
    "plt.xlabel(\"Index\")\n",
    "plt.ylabel(\"Price\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(results.index, results['pred_price_5d'], label='Predicted 5-Day Price', linestyle='--')\n",
    "plt.plot(results.index, y_test_price_5d.values, label='Actual 5-Day Price')\n",
    "plt.title(\"IBM - 5-Day Ahead Price Prediction\")\n",
    "plt.xlabel(\"Index\")\n",
    "plt.ylabel(\"Price\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Step 9: Real-time prediction\n",
    "today_df = yf.download(ticker, period=\"90d\")\n",
    "today_df['rsi'] = ta.momentum.RSIIndicator(close=today_df['Close'].values.flatten()).rsi()\n",
    "today_df['stoch'] = ta.momentum.StochasticOscillator(high=today_df['High'], low=today_df['Low'], close=today_df['Close']).stoch()\n",
    "today_df['macd'] = ta.trend.MACD(close=today_df['Close']).macd_diff()\n",
    "today_df['obv'] = ta.volume.OnBalanceVolumeIndicator(close=today_df['Close'], volume=today_df['Volume']).on_balance_volume()\n",
    "today_df['sma_10'] = ta.trend.SMAIndicator(close=today_df['Close'], window=10).sma_indicator()\n",
    "today_df['ema_20'] = ta.trend.EMAIndicator(close=today_df['Close'], window=20).ema_indicator()\n",
    "bb = ta.volatility.BollingerBands(close=today_df['Close'], window=20, window_dev=2)\n",
    "today_df['bb_bbm'] = bb.bollinger_mavg()\n",
    "today_df['bb_bbh'] = bb.bollinger_hband()\n",
    "today_df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "today_df.dropna(inplace=True)\n",
    "latest_features = today_df[features].iloc[-1:]\n",
    "\n",
    "predictions = {}\n",
    "for name, (model, _) in models.items():\n",
    "    pred = model.predict(latest_features)[0]\n",
    "    predictions[name] = pred\n",
    "\n",
    "print(f\"\\n🔮 IBM Real-Time Predictions (as of {today_df.index[-1].date()}):\")\n",
    "print(f\"📌 Current Close: ${today_df['Close'].iloc[-1]:.2f}\")\n",
    "print(f\"📈 1-Day Price: ${predictions['price_1d']:.2f} | Direction: {'Up' if predictions['dir_1d'] > 0.5 else 'Down'}\")\n",
    "print(f\"📈 3-Day Price: ${predictions['price_3d']:.2f} | Direction: {'Up' if predictions['dir_3d'] > 0.5 else 'Down'}\")\n",
    "print(f\"📈 5-Day Price: ${predictions['price_5d']:.2f} | Direction: {'Up' if predictions['dir_5d'] > 0.5 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6dd2be88-e541-4f58-9259-5b9268c53487",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1760, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[8], line 14\u001b[0m\n\u001b[0;32m     11\u001b[0m df \u001b[38;5;241m=\u001b[39m yf\u001b[38;5;241m.\u001b[39mdownload(ticker, start\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2018-01-01\u001b[39m\u001b[38;5;124m\"\u001b[39m, end\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2024-12-31\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     13\u001b[0m \u001b[38;5;66;03m# Step 2: Technical indicators (corrected)\u001b[39;00m\n\u001b[1;32m---> 14\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mmomentum\u001b[38;5;241m.\u001b[39mRSIIndicator(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     15\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mmomentum\u001b[38;5;241m.\u001b[39mStochasticOscillator(high\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m], low\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m], close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     16\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mtrend\u001b[38;5;241m.\u001b[39mMACD(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1760, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import ta\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error, r2_score, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Step 1: Load IBM data\n",
    "ticker = \"IBM\"\n",
    "df = yf.download(ticker, start=\"2018-01-01\", end=\"2024-12-31\")\n",
    "\n",
    "# Step 2: Technical indicators (corrected)\n",
    "df['rsi'] = ta.momentum.RSIIndicator(close=df['Close']).rsi()\n",
    "df['stoch'] = ta.momentum.StochasticOscillator(high=df['High'], low=df['Low'], close=df['Close']).stoch()\n",
    "df['macd'] = ta.trend.MACD(close=df['Close']).macd_diff()\n",
    "df['obv'] = ta.volume.OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume']).on_balance_volume()\n",
    "df['sma_10'] = ta.trend.SMAIndicator(close=df['Close'], window=10).sma_indicator()\n",
    "df['ema_20'] = ta.trend.EMAIndicator(close=df['Close'], window=20).ema_indicator()\n",
    "bb = ta.volatility.BollingerBands(close=df['Close'], window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 3: Targets\n",
    "df['next_1d_close'] = df['Close'].shift(-1)\n",
    "df['next_3d_close'] = df['Close'].shift(-3)\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "\n",
    "df['dir_1d'] = (df['next_1d_close'] > df['Close']).astype(int)\n",
    "df['dir_3d'] = (df['next_3d_close'] > df['Close']).astype(int)\n",
    "df['dir_5d'] = (df['next_5d_close'] > df['Close']).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 4: Feature set\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Targets\n",
    "y_price_1d = df['next_1d_close']\n",
    "y_dir_1d = df['dir_1d']\n",
    "y_price_3d = df['next_3d_close']\n",
    "y_dir_3d = df['dir_3d']\n",
    "y_price_5d = df['next_5d_close']\n",
    "y_dir_5d = df['dir_5d']\n",
    "\n",
    "# Step 5: Split sets\n",
    "X_train, X_test = train_test_split(X, test_size=0.2, shuffle=False)\n",
    "y_train_price_1d, y_test_price_1d = train_test_split(y_price_1d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_1d, y_test_dir_1d = train_test_split(y_dir_1d, test_size=0.2, shuffle=False)\n",
    "y_train_price_3d, y_test_price_3d = train_test_split(y_price_3d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_3d, y_test_dir_3d = train_test_split(y_dir_3d, test_size=0.2, shuffle=False)\n",
    "y_train_price_5d, y_test_price_5d = train_test_split(y_price_5d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_5d, y_test_dir_5d = train_test_split(y_dir_5d, test_size=0.2, shuffle=False)\n",
    "\n",
    "# Step 6: Train models\n",
    "models = {}\n",
    "for name, target_train, target_test in [\n",
    "    ('price_1d', y_train_price_1d, y_test_price_1d),\n",
    "    ('price_3d', y_train_price_3d, y_test_price_3d),\n",
    "    ('price_5d', y_train_price_5d, y_test_price_5d),\n",
    "]:\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    reg.fit(X_train, target_train)\n",
    "    models[name] = (reg, target_test)\n",
    "\n",
    "for name, target_train, target_test in [\n",
    "    ('dir_1d', y_train_dir_1d, y_test_dir_1d),\n",
    "    ('dir_3d', y_train_dir_3d, y_test_dir_3d),\n",
    "    ('dir_5d', y_train_dir_5d, y_test_dir_5d),\n",
    "]:\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    clf.fit(X_train, target_train)\n",
    "    models[name] = (clf, target_test)\n",
    "\n",
    "# Step 7: Make predictions and evaluate\n",
    "results = X_test.copy()\n",
    "for name, (model, target) in models.items():\n",
    "    pred = model.predict(X_test)\n",
    "    results[f'pred_{name}'] = pred\n",
    "    if 'price' in name:\n",
    "        mae = mean_absolute_error(target, pred)\n",
    "        r2 = r2_score(target, pred)\n",
    "        print(f\"\\n{name.upper()} - MAE: {mae:.2f}, R²: {r2:.2f}\")\n",
    "    else:\n",
    "        print(f\"\\n{name.upper()} Classification Report:\")\n",
    "        print(classification_report(target, pred > 0.5, target_names=[\"Down\", \"Up\"]))\n",
    "\n",
    "# Step 8: Add actual values for comparison\n",
    "results['actual_price_1d'] = y_test_price_1d.values\n",
    "results['actual_dir_1d'] = y_test_dir_1d.values\n",
    "\n",
    "# Step 9: Save to CSV\n",
    "results.to_csv(\"ibm_predictions.csv\")\n",
    "print(\"\\n✅ Saved results to ibm_predictions.csv\")\n",
    "\n",
    "# Step 10: Visualization for 3-day and 5-day price prediction\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(results.index, results['pred_price_3d'], label='Predicted 3-Day Price', linestyle='--')\n",
    "plt.plot(results.index, y_test_price_3d.values, label='Actual 3-Day Price')\n",
    "plt.title(\"📉 IBM - 3-Day Ahead Price Prediction\")\n",
    "plt.xlabel(\"Index\")\n",
    "plt.ylabel(\"Price\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(results.index, results['pred_price_5d'], label='Predicted 5-Day Price', linestyle='--')\n",
    "plt.plot(results.index, y_test_price_5d.values, label='Actual 5-Day Price')\n",
    "plt.title(\"📉 IBM - 5-Day Ahead Price Prediction\")\n",
    "plt.xlabel(\"Index\")\n",
    "plt.ylabel(\"Price\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "28c462d2-e0f5-4af2-a7db-b3def9dbd8ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1760, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[9], line 19\u001b[0m\n\u001b[0;32m     16\u001b[0m         df[col] \u001b[38;5;241m=\u001b[39m df[col]\u001b[38;5;241m.\u001b[39miloc[:, \u001b[38;5;241m0\u001b[39m]\n\u001b[0;32m     18\u001b[0m \u001b[38;5;66;03m# Step 2: Technical indicators (all produce 1D Series)\u001b[39;00m\n\u001b[1;32m---> 19\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mmomentum\u001b[38;5;241m.\u001b[39mRSIIndicator(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     20\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mmomentum\u001b[38;5;241m.\u001b[39mStochasticOscillator(high\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m], low\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m], close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     21\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m ta\u001b[38;5;241m.\u001b[39mtrend\u001b[38;5;241m.\u001b[39mMACD(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1760, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import ta\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error, r2_score, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Step 1: Load IBM data\n",
    "ticker = \"IBM\"\n",
    "df = yf.download(ticker, start=\"2018-01-01\", end=\"2024-12-31\")\n",
    "\n",
    "# Fix for possible (n,1) DataFrame instead of Series issues:\n",
    "for col in ['Close', 'High', 'Low', 'Volume']:\n",
    "    if isinstance(df[col], pd.DataFrame):\n",
    "        df[col] = df[col].iloc[:, 0]\n",
    "\n",
    "# Step 2: Technical indicators (all produce 1D Series)\n",
    "df['rsi'] = ta.momentum.RSIIndicator(close=df['Close']).rsi()\n",
    "df['stoch'] = ta.momentum.StochasticOscillator(high=df['High'], low=df['Low'], close=df['Close']).stoch()\n",
    "df['macd'] = ta.trend.MACD(close=df['Close']).macd_diff()\n",
    "df['obv'] = ta.volume.OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume']).on_balance_volume()\n",
    "df['sma_10'] = ta.trend.SMAIndicator(close=df['Close'], window=10).sma_indicator()\n",
    "df['ema_20'] = ta.trend.EMAIndicator(close=df['Close'], window=20).ema_indicator()\n",
    "bb = ta.volatility.BollingerBands(close=df['Close'], window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 3: Targets (shifted close and direction for 1, 3, 5 day horizons)\n",
    "df['next_1d_close'] = df['Close'].shift(-1)\n",
    "df['next_3d_close'] = df['Close'].shift(-3)\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "\n",
    "df['dir_1d'] = (df['next_1d_close'] > df['Close']).astype(int)\n",
    "df['dir_3d'] = (df['next_3d_close'] > df['Close']).astype(int)\n",
    "df['dir_5d'] = (df['next_5d_close'] > df['Close']).astype(int)\n",
    "\n",
    "# Drop rows with NaN values created by indicator calculations and target shifts\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 4: Features and targets\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "y_price_1d = df['next_1d_close']\n",
    "y_dir_1d = df['dir_1d']\n",
    "y_price_3d = df['next_3d_close']\n",
    "y_dir_3d = df['dir_3d']\n",
    "y_price_5d = df['next_5d_close']\n",
    "y_dir_5d = df['dir_5d']\n",
    "\n",
    "# Step 5: Train/test split (no shuffle because time series)\n",
    "X_train, X_test = train_test_split(X, test_size=0.2, shuffle=False)\n",
    "y_train_price_1d, y_test_price_1d = train_test_split(y_price_1d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_1d, y_test_dir_1d = train_test_split(y_dir_1d, test_size=0.2, shuffle=False)\n",
    "y_train_price_3d, y_test_price_3d = train_test_split(y_price_3d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_3d, y_test_dir_3d = train_test_split(y_dir_3d, test_size=0.2, shuffle=False)\n",
    "y_train_price_5d, y_test_price_5d = train_test_split(y_price_5d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_5d, y_test_dir_5d = train_test_split(y_dir_5d, test_size=0.2, shuffle=False)\n",
    "\n",
    "# Step 6: Train models\n",
    "models = {}\n",
    "\n",
    "# Regression models for price prediction\n",
    "for name, target_train in [\n",
    "    ('price_1d', y_train_price_1d),\n",
    "    ('price_3d', y_train_price_3d),\n",
    "    ('price_5d', y_train_price_5d),\n",
    "]:\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    reg.fit(X_train, target_train)\n",
    "    models[name] = reg\n",
    "\n",
    "# Classification models for direction prediction\n",
    "for name, target_train in [\n",
    "    ('dir_1d', y_train_dir_1d),\n",
    "    ('dir_3d', y_train_dir_3d),\n",
    "    ('dir_5d', y_train_dir_5d),\n",
    "]:\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    clf.fit(X_train, target_train)\n",
    "    models[name] = clf\n",
    "\n",
    "# Step 7: Predictions and evaluation\n",
    "results = X_test.copy()\n",
    "\n",
    "for name, model in models.items():\n",
    "    pred = model.predict(X_test)\n",
    "    results[f'pred_{name}'] = pred\n",
    "\n",
    "# Regression metrics\n",
    "for name, y_test in [\n",
    "    ('price_1d', y_test_price_1d),\n",
    "    ('price_3d', y_test_price_3d),\n",
    "    ('price_5d', y_test_price_5d),\n",
    "]:\n",
    "    mae = mean_absolute_error(y_test, results[f'pred_{name}'])\n",
    "    r2 = r2_score(y_test, results[f'pred_{name}'])\n",
    "    print(f\"\\n{name.upper()} - MAE: {mae:.2f}, R²: {r2:.2f}\")\n",
    "\n",
    "# Classification reports\n",
    "for name, y_test in [\n",
    "    ('dir_1d', y_test_dir_1d),\n",
    "    ('dir_3d', y_test_dir_3d),\n",
    "    ('dir_5d', y_test_dir_5d),\n",
    "]:\n",
    "    pred_labels = (results[f'pred_{name}'] > 0.5).astype(int)\n",
    "    print(f\"\\n{name.upper()} Classification Report:\")\n",
    "    print(classification_report(y_test, pred_labels, target_names=[\"Down\", \"Up\"]))\n",
    "\n",
    "# Step 8: Add actual values for comparison (1-day targets shown here, extend as needed)\n",
    "results['actual_price_1d'] = y_test_price_1d.values\n",
    "results['actual_dir_1d'] = y_test_dir_1d.values\n",
    "\n",
    "# Step 9: Save results\n",
    "results.to_csv(\"ibm_predictions.csv\")\n",
    "print(\"\\n✅ Saved results to ibm_predictions.csv\")\n",
    "\n",
    "# Step 10: Visualization example for 3-day price\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(results.index, results['pred_price_3d'], label='Predicted 3-Day Price', linestyle='--')\n",
    "plt.plot(results.index, y_test_price_3d.values, label='Actual 3-Day Price')\n",
    "plt.title(\"IBM 3-Day Ahead Price Prediction\")\n",
    "plt.xlabel(\"Date Index\")\n",
    "plt.ylabel(\"Price\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Step 11: Real-time prediction using latest data row (today's indicators)\n",
    "latest_data = df[features].iloc[-1:].copy()\n",
    "\n",
    "pred_price_1d = models['price_1d'].predict(latest_data)[0]\n",
    "pred_dir_1d = models['dir_1d'].predict(latest_data)[0]\n",
    "\n",
    "print(f\"\\n🔮 Real-time Prediction for next day:\")\n",
    "print(f\"Predicted next day closing price: ${pred_price_1d:.2f}\")\n",
    "print(f\"Predicted direction: {'Up' if pred_dir_1d == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fc0c0d95-dedb-423a-bddd-94d2ba7bbf59",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Expected column 'Close' not found in data",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[10], line 21\u001b[0m\n\u001b[0;32m     19\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m col \u001b[38;5;129;01min\u001b[39;00m [\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mVolume\u001b[39m\u001b[38;5;124m'\u001b[39m]:\n\u001b[0;32m     20\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m col \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m df\u001b[38;5;241m.\u001b[39mcolumns:\n\u001b[1;32m---> 21\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mExpected column \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mcol\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m not found in data\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     22\u001b[0m     \u001b[38;5;66;03m# If the column is a DataFrame (2D), convert to Series\u001b[39;00m\n\u001b[0;32m     23\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(df[col], pd\u001b[38;5;241m.\u001b[39mDataFrame):\n",
      "\u001b[1;31mValueError\u001b[0m: Expected column 'Close' not found in data"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import ta\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error, r2_score, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Step 1: Download data\n",
    "ticker = \"IBM\"\n",
    "df = yf.download(ticker, start=\"2018-01-01\",)\n",
    "\n",
    "# If multi-level columns, flatten them (sometimes yf.download returns this)\n",
    "if isinstance(df.columns, pd.MultiIndex):\n",
    "    df.columns = ['_'.join(col).strip() for col in df.columns.values]\n",
    "\n",
    "# Now ensure columns of interest are 1D Series:\n",
    "for col in ['Close', 'High', 'Low', 'Volume']:\n",
    "    if col not in df.columns:\n",
    "        raise ValueError(f\"Expected column '{col}' not found in data\")\n",
    "    # If the column is a DataFrame (2D), convert to Series\n",
    "    if isinstance(df[col], pd.DataFrame):\n",
    "        df[col] = df[col].iloc[:, 0]\n",
    "\n",
    "# Just to be safe, explicitly convert to 1D Series:\n",
    "df['Close'] = df['Close'].astype(float).squeeze()\n",
    "df['High'] = df['High'].astype(float).squeeze()\n",
    "df['Low'] = df['Low'].astype(float).squeeze()\n",
    "df['Volume'] = df['Volume'].astype(float).squeeze()\n",
    "\n",
    "# Step 2: Compute technical indicators (all expect 1D Series)\n",
    "df['rsi'] = ta.momentum.RSIIndicator(close=df['Close']).rsi()\n",
    "df['stoch'] = ta.momentum.StochasticOscillator(\n",
    "    high=df['High'], low=df['Low'], close=df['Close']).stoch()\n",
    "df['macd'] = ta.trend.MACD(close=df['Close']).macd_diff()\n",
    "df['obv'] = ta.volume.OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume']).on_balance_volume()\n",
    "df['sma_10'] = ta.trend.SMAIndicator(close=df['Close'], window=10).sma_indicator()\n",
    "df['ema_20'] = ta.trend.EMAIndicator(close=df['Close'], window=20).ema_indicator()\n",
    "\n",
    "bb = ta.volatility.BollingerBands(close=df['Close'], window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 3: Create targets for price and direction at 1, 3, 5 days ahead\n",
    "df['next_1d_close'] = df['Close'].shift(-1)\n",
    "df['next_3d_close'] = df['Close'].shift(-3)\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "\n",
    "df['dir_1d'] = (df['next_1d_close'] > df['Close']).astype(int)\n",
    "df['dir_3d'] = (df['next_3d_close'] > df['Close']).astype(int)\n",
    "df['dir_5d'] = (df['next_5d_close'] > df['Close']).astype(int)\n",
    "\n",
    "# Drop rows with NaN from indicator calc or shifting\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 4: Define features and targets\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "y_price_1d = df['next_1d_close']\n",
    "y_dir_1d = df['dir_1d']\n",
    "y_price_3d = df['next_3d_close']\n",
    "y_dir_3d = df['dir_3d']\n",
    "y_price_5d = df['next_5d_close']\n",
    "y_dir_5d = df['dir_5d']\n",
    "\n",
    "# Step 5: Train/test split - no shuffle for time series\n",
    "X_train, X_test = train_test_split(X, test_size=0.2, shuffle=False)\n",
    "y_train_price_1d, y_test_price_1d = train_test_split(y_price_1d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_1d, y_test_dir_1d = train_test_split(y_dir_1d, test_size=0.2, shuffle=False)\n",
    "y_train_price_3d, y_test_price_3d = train_test_split(y_price_3d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_3d, y_test_dir_3d = train_test_split(y_dir_3d, test_size=0.2, shuffle=False)\n",
    "y_train_price_5d, y_test_price_5d = train_test_split(y_price_5d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_5d, y_test_dir_5d = train_test_split(y_dir_5d, test_size=0.2, shuffle=False)\n",
    "\n",
    "# Step 6: Train models\n",
    "models = {}\n",
    "\n",
    "# Regression models\n",
    "for name, target_train in [\n",
    "    ('price_1d', y_train_price_1d),\n",
    "    ('price_3d', y_train_price_3d),\n",
    "    ('price_5d', y_train_price_5d),\n",
    "]:\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    reg.fit(X_train, target_train)\n",
    "    models[name] = reg\n",
    "\n",
    "# Classification models\n",
    "for name, target_train in [\n",
    "    ('dir_1d', y_train_dir_1d),\n",
    "    ('dir_3d', y_train_dir_3d),\n",
    "    ('dir_5d', y_train_dir_5d),\n",
    "]:\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    clf.fit(X_train, target_train)\n",
    "    models[name] = clf\n",
    "\n",
    "# Step 7: Predict and evaluate\n",
    "results = X_test.copy()\n",
    "for name, model in models.items():\n",
    "    results[f'pred_{name}'] = model.predict(X_test)\n",
    "\n",
    "# Regression evaluation\n",
    "for name, y_test in [\n",
    "    ('price_1d', y_test_price_1d),\n",
    "    ('price_3d', y_test_price_3d),\n",
    "    ('price_5d', y_test_price_5d),\n",
    "]:\n",
    "    mae = mean_absolute_error(y_test, results[f'pred_{name}'])\n",
    "    r2 = r2_score(y_test, results[f'pred_{name}'])\n",
    "    print(f\"\\n{name.upper()} - MAE: {mae:.2f}, R²: {r2:.2f}\")\n",
    "\n",
    "# Classification reports\n",
    "for name, y_test in [\n",
    "    ('dir_1d', y_test_dir_1d),\n",
    "    ('dir_3d', y_test_dir_3d),\n",
    "    ('dir_5d', y_test_dir_5d),\n",
    "]:\n",
    "    pred_labels = (results[f'pred_{name}'] > 0.5).astype(int)\n",
    "    print(f\"\\n{name.upper()} Classification Report:\")\n",
    "    print(classification_report(y_test, pred_labels, target_names=[\"Down\", \"Up\"]))\n",
    "\n",
    "# Step 8: Save predictions\n",
    "results.to_csv(\"ibm_predictions.csv\")\n",
    "print(\"\\n✅ Saved predictions to ibm_predictions.csv\")\n",
    "\n",
    "# Step 9: Visualize 3-day price predictions\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(results.index, results['pred_price_3d'], label='Predicted 3-Day Price', linestyle='--')\n",
    "plt.plot(results.index, y_test_price_3d.values, label='Actual 3-Day Price')\n",
    "plt.title(\"IBM 3-Day Ahead Price Prediction\")\n",
    "plt.xlabel(\"Date Index\")\n",
    "plt.ylabel(\"Price\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Step 10: Real-time prediction (latest available row)\n",
    "latest_data = df[features].iloc[-1:].copy()\n",
    "pred_price_1d = models['price_1d'].predict(latest_data)[0]\n",
    "pred_dir_1d = models['dir_1d'].predict(latest_data)[0]\n",
    "\n",
    "print(f\"\\n🔮 Real-time Prediction for next day:\")\n",
    "print(f\"Predicted next day closing price: ${pred_price_1d:.2f}\")\n",
    "print(f\"Predicted direction: {'Up' if pred_dir_1d == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b59e8f75-dfbd-4578-b537-1a5381467272",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "PRICE_1D - MAE: 49.00, R²: -2.23\n",
      "\n",
      "PRICE_3D - MAE: 49.65, R²: -2.29\n",
      "\n",
      "PRICE_5D - MAE: 48.81, R²: -2.19\n",
      "\n",
      "DIR_1D Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "        Down       0.49      0.20      0.29       159\n",
      "          Up       0.58      0.84      0.68       206\n",
      "\n",
      "    accuracy                           0.56       365\n",
      "   macro avg       0.53      0.52      0.48       365\n",
      "weighted avg       0.54      0.56      0.51       365\n",
      "\n",
      "\n",
      "DIR_3D Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "        Down       0.41      1.00      0.58       149\n",
      "          Up       0.00      0.00      0.00       216\n",
      "\n",
      "    accuracy                           0.41       365\n",
      "   macro avg       0.20      0.50      0.29       365\n",
      "weighted avg       0.17      0.41      0.24       365\n",
      "\n",
      "\n",
      "DIR_5D Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "        Down       0.50      0.03      0.05       152\n",
      "          Up       0.59      0.98      0.73       213\n",
      "\n",
      "    accuracy                           0.58       365\n",
      "   macro avg       0.54      0.50      0.39       365\n",
      "weighted avg       0.55      0.58      0.45       365\n",
      "\n",
      "\n",
      "✅ Saved results to ibm_predictions.csv\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\pavan\\Desktop\\sample_project\\env\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "C:\\Users\\pavan\\Desktop\\sample_project\\env\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "C:\\Users\\pavan\\Desktop\\sample_project\\env\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "🔮 Real-time Prediction for next day:\n",
      "Predicted next day closing price: $152.01\n",
      "Predicted direction: Up\n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import ta\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error, r2_score, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Step 1: Download data\n",
    "ticker = \"IBM\"\n",
    "df = yf.download(ticker, start=\"2018-01-01\",)\n",
    "\n",
    "# Step 2: Handle MultiIndex columns if present\n",
    "if isinstance(df.columns, pd.MultiIndex):\n",
    "    # Flatten multi-level columns by joining with underscore\n",
    "    df.columns = ['_'.join(col).strip() for col in df.columns.values]\n",
    "\n",
    "# Step 3: Standardize column names for ease of use\n",
    "# Find columns that contain 'Close', 'High', 'Low', 'Volume' in their names (case insensitive)\n",
    "def find_column(cols, name):\n",
    "    for col in cols:\n",
    "        if name.lower() in col.lower():\n",
    "            return col\n",
    "    raise ValueError(f\"Expected column containing '{name}' not found in data\")\n",
    "\n",
    "close_col = find_column(df.columns, 'close')\n",
    "high_col = find_column(df.columns, 'high')\n",
    "low_col = find_column(df.columns, 'low')\n",
    "volume_col = find_column(df.columns, 'volume')\n",
    "\n",
    "# Step 4: Extract columns and convert to float Series\n",
    "df['Close'] = df[close_col].astype(float).squeeze()\n",
    "df['High'] = df[high_col].astype(float).squeeze()\n",
    "df['Low'] = df[low_col].astype(float).squeeze()\n",
    "df['Volume'] = df[volume_col].astype(float).squeeze()\n",
    "\n",
    "# Step 5: Compute technical indicators\n",
    "df['rsi'] = ta.momentum.RSIIndicator(close=df['Close']).rsi()\n",
    "df['stoch'] = ta.momentum.StochasticOscillator(\n",
    "    high=df['High'], low=df['Low'], close=df['Close']).stoch()\n",
    "df['macd'] = ta.trend.MACD(close=df['Close']).macd_diff()\n",
    "df['obv'] = ta.volume.OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume']).on_balance_volume()\n",
    "df['sma_10'] = ta.trend.SMAIndicator(close=df['Close'], window=10).sma_indicator()\n",
    "df['ema_20'] = ta.trend.EMAIndicator(close=df['Close'], window=20).ema_indicator()\n",
    "\n",
    "bb = ta.volatility.BollingerBands(close=df['Close'], window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 6: Create target variables for future price and direction\n",
    "df['next_1d_close'] = df['Close'].shift(-1)\n",
    "df['next_3d_close'] = df['Close'].shift(-3)\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "\n",
    "df['dir_1d'] = (df['next_1d_close'] > df['Close']).astype(int)\n",
    "df['dir_3d'] = (df['next_3d_close'] > df['Close']).astype(int)\n",
    "df['dir_5d'] = (df['next_5d_close'] > df['Close']).astype(int)\n",
    "\n",
    "# Drop rows with NaN (caused by indicator calculations and shifting)\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 7: Define features and targets\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "y_price_1d = df['next_1d_close']\n",
    "y_dir_1d = df['dir_1d']\n",
    "y_price_3d = df['next_3d_close']\n",
    "y_dir_3d = df['dir_3d']\n",
    "y_price_5d = df['next_5d_close']\n",
    "y_dir_5d = df['dir_5d']\n",
    "\n",
    "# Step 8: Split data (no shuffle for time series)\n",
    "X_train, X_test = train_test_split(X, test_size=0.2, shuffle=False)\n",
    "y_train_price_1d, y_test_price_1d = train_test_split(y_price_1d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_1d, y_test_dir_1d = train_test_split(y_dir_1d, test_size=0.2, shuffle=False)\n",
    "y_train_price_3d, y_test_price_3d = train_test_split(y_price_3d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_3d, y_test_dir_3d = train_test_split(y_dir_3d, test_size=0.2, shuffle=False)\n",
    "y_train_price_5d, y_test_price_5d = train_test_split(y_price_5d, test_size=0.2, shuffle=False)\n",
    "y_train_dir_5d, y_test_dir_5d = train_test_split(y_dir_5d, test_size=0.2, shuffle=False)\n",
    "\n",
    "# Step 9: Train models\n",
    "models = {}\n",
    "\n",
    "# Regression models for price prediction\n",
    "for name, target_train in [\n",
    "    ('price_1d', y_train_price_1d),\n",
    "    ('price_3d', y_train_price_3d),\n",
    "    ('price_5d', y_train_price_5d),\n",
    "]:\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    reg.fit(X_train, target_train)\n",
    "    models[name] = reg\n",
    "\n",
    "# Classification models for direction prediction\n",
    "for name, target_train in [\n",
    "    ('dir_1d', y_train_dir_1d),\n",
    "    ('dir_3d', y_train_dir_3d),\n",
    "    ('dir_5d', y_train_dir_5d),\n",
    "]:\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    clf.fit(X_train, target_train)\n",
    "    models[name] = clf\n",
    "\n",
    "# Step 10: Predictions and evaluation\n",
    "results = X_test.copy()\n",
    "for name, model in models.items():\n",
    "    results[f'pred_{name}'] = model.predict(X_test)\n",
    "\n",
    "# Regression metrics\n",
    "for name, y_test in [\n",
    "    ('price_1d', y_test_price_1d),\n",
    "    ('price_3d', y_test_price_3d),\n",
    "    ('price_5d', y_test_price_5d),\n",
    "]:\n",
    "    mae = mean_absolute_error(y_test, results[f'pred_{name}'])\n",
    "    r2 = r2_score(y_test, results[f'pred_{name}'])\n",
    "    print(f\"\\n{name.upper()} - MAE: {mae:.2f}, R²: {r2:.2f}\")\n",
    "\n",
    "# Classification reports\n",
    "for name, y_test in [\n",
    "    ('dir_1d', y_test_dir_1d),\n",
    "    ('dir_3d', y_test_dir_3d),\n",
    "    ('dir_5d', y_test_dir_5d),\n",
    "]:\n",
    "    pred_labels = (results[f'pred_{name}'] > 0.5).astype(int)\n",
    "    print(f\"\\n{name.upper()} Classification Report:\")\n",
    "    print(classification_report(y_test, pred_labels, target_names=[\"Down\", \"Up\"]))\n",
    "\n",
    "# Step 11: Save results\n",
    "results.to_csv(\"ibm_predictions.csv\")\n",
    "print(\"\\n✅ Saved results to ibm_predictions.csv\")\n",
    "\n",
    "# Step 12: Visualization for 3-day and 5-day price predictions\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(results.index, results['pred_price_3d'], label='Predicted 3-Day Price', linestyle='--')\n",
    "plt.plot(results.index, y_test_price_3d.values, label='Actual 3-Day Price')\n",
    "plt.title(\"IBM 3-Day Ahead Price Prediction\")\n",
    "plt.xlabel(\"Date Index\")\n",
    "plt.ylabel(\"Price\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(results.index, results['pred_price_5d'], label='Predicted 5-Day Price', linestyle='--')\n",
    "plt.plot(results.index, y_test_price_5d.values, label='Actual 5-Day Price')\n",
    "plt.title(\"IBM 5-Day Ahead Price Prediction\")\n",
    "plt.xlabel(\"Date Index\")\n",
    "plt.ylabel(\"Price\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Step 13: Real-time prediction with latest data row\n",
    "latest_features = df[features].iloc[-1:].copy()\n",
    "pred_price_1d = models['price_1d'].predict(latest_features)[0]\n",
    "pred_dir_1d = models['dir_1d'].predict(latest_features)[0]\n",
    "\n",
    "print(f\"\\n🔮 Real-time Prediction for next day:\")\n",
    "print(f\"Predicted next day closing price: ${pred_price_1d:.2f}\")\n",
    "print(f\"Predicted direction: {'Up' if pred_dir_1d == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2097eb7f-febe-4354-9a25-4932425cb081",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📈 Classification Report:\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "        Down       0.42      1.00      0.59        83\n",
      "          Up       1.00      0.01      0.02       117\n",
      "\n",
      "    accuracy                           0.42       200\n",
      "   macro avg       0.71      0.50      0.30       200\n",
      "weighted avg       0.76      0.42      0.25       200\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report\n",
    "import datetime\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Step 1: Load recent IBM data\n",
    "end_date = datetime.datetime.now().strftime('%Y-%m-%d')\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\", end=end_date)\n",
    "\n",
    "# Step 2: Create lag features\n",
    "for i in range(1, 6):\n",
    "    df[f'lag_{i}'] = df['Close'].shift(i)\n",
    "\n",
    "# Step 3: Create target variable (5-day forward return direction)\n",
    "df['return_5d'] = df['Close'].pct_change(5).shift(-5)\n",
    "df['target'] = (df['return_5d'] > 0).astype(int)\n",
    "\n",
    "# Step 4: Clean and prepare data\n",
    "features = [f'lag_{i}' for i in range(1, 6)]\n",
    "df.dropna(inplace=True)\n",
    "X = df[features]\n",
    "y = df['target']\n",
    "\n",
    "# Step 5: Train/test split (time-aware)\n",
    "X_train, X_test = X[:-200], X[-200:]\n",
    "y_train, y_test = y[:-200], y[-200:]\n",
    "\n",
    "# Step 6: Train model\n",
    "clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "clf.fit(X_train, y_train)\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "# Step 7: Evaluation\n",
    "print(\"\\n📈 Classification Report:\\n\")\n",
    "print(classification_report(y_test, y_pred, target_names=[\"Down\", \"Up\"]))\n",
    "\n",
    "# Step 8: Visualize prediction vs actual\n",
    "results = pd.DataFrame({'Predicted': y_pred, 'Actual': y_test.values}, index=y_test.index)\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(results.index, results['Actual'], label='Actual', linestyle='-', marker='o')\n",
    "plt.plot(results.index, results['Predicted'], label='Predicted', linestyle='--', marker='x')\n",
    "plt.title(\"IBM 5-Day Directional Prediction\")\n",
    "plt.xlabel(\"Date\")\n",
    "plt.ylabel(\"Direction (0=Down, 1=Up)\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3c052b98-ecc5-4fcb-98d6-62053338a4fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[15], line 13\u001b[0m\n\u001b[0;32m     10\u001b[0m df \u001b[38;5;241m=\u001b[39m yf\u001b[38;5;241m.\u001b[39mdownload(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIBM\u001b[39m\u001b[38;5;124m\"\u001b[39m, start\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2018-01-01\u001b[39m\u001b[38;5;124m\"\u001b[39m, end\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[0;32m     12\u001b[0m \u001b[38;5;66;03m# Step 2: Add technical indicators\u001b[39;00m\n\u001b[1;32m---> 13\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     14\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m StochasticOscillator(high\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m], low\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m], close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     15\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m MACD(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download IBM historical data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\", end=None)\n",
    "\n",
    "# Step 2: Add technical indicators\n",
    "df['rsi'] = RSIIndicator(close=df['Close']).rsi()\n",
    "df['stoch'] = StochasticOscillator(high=df['High'], low=df['Low'], close=df['Close']).stoch()\n",
    "df['macd'] = MACD(close=df['Close']).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume']).on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'], window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'], window=20).ema_indicator()\n",
    "bb = BollingerBands(close=df['Close'], window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 3: Create targets\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "df['dir_5d'] = (df['next_5d_close'] > df['Close']).astype(int)\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 4: Feature set\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "y_price = df['next_5d_close']\n",
    "y_dir = df['dir_5d']\n",
    "\n",
    "# Step 5: Train models\n",
    "reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "reg.fit(X, y_price)\n",
    "clf.fit(X, y_dir)\n",
    "\n",
    "# Step 6: Predict next 5-day price and direction\n",
    "latest_input = X.iloc[-1:]\n",
    "predicted_price = reg.predict(latest_input)[0]\n",
    "predicted_direction = clf.predict(latest_input)[0]\n",
    "\n",
    "# Step 7: Display results\n",
    "print(\"\\n📈 IBM 5-Day Forecast\")\n",
    "print(f\"Predicted Price in 5 Days: ${predicted_price:.2f}\")\n",
    "print(f\"Predicted Direction in 5 Days: {'Up' if predicted_direction == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "569c5b93-b882-46ca-a0a0-04f8539a15b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[16], line 19\u001b[0m\n\u001b[0;32m     16\u001b[0m         df[col] \u001b[38;5;241m=\u001b[39m df[col]\u001b[38;5;241m.\u001b[39miloc[:, \u001b[38;5;241m0\u001b[39m]\n\u001b[0;32m     18\u001b[0m \u001b[38;5;66;03m# Step 2: Add technical indicators\u001b[39;00m\n\u001b[1;32m---> 19\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     20\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m StochasticOscillator(high\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m], low\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m], close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     21\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m MACD(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download IBM data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Ensure required columns are 1D\n",
    "for col in ['Close', 'High', 'Low', 'Volume']:\n",
    "    if isinstance(df[col], pd.DataFrame):\n",
    "        df[col] = df[col].iloc[:, 0]\n",
    "\n",
    "# Step 2: Add technical indicators\n",
    "df['rsi'] = RSIIndicator(close=df['Close']).rsi()\n",
    "df['stoch'] = StochasticOscillator(high=df['High'], low=df['Low'], close=df['Close']).stoch()\n",
    "df['macd'] = MACD(close=df['Close']).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume']).on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'], window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'], window=20).ema_indicator()\n",
    "bb = BollingerBands(close=df['Close'], window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 3: Targets (5-day ahead)\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "df['dir_5d'] = (df['next_5d_close'] > df['Close']).astype(int)\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 4: Feature & target setup\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "y_price = df['next_5d_close']\n",
    "y_dir = df['dir_5d']\n",
    "\n",
    "# Step 5: Train models\n",
    "regressor = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor.fit(X, y_price)\n",
    "classifier.fit(X, y_dir)\n",
    "\n",
    "# Step 6: Make predictions on latest data\n",
    "latest_features = X.iloc[-1:]\n",
    "predicted_price = regressor.predict(latest_features)[0]\n",
    "predicted_direction = classifier.predict(latest_features)[0]\n",
    "\n",
    "# Step 7: Output results\n",
    "print(\"\\n📊 IBM 5-Day Forecast\")\n",
    "print(f\"📈 Predicted price in 5 days: ${predicted_price:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "87982413-cd83-42b0-abdc-734a85b570bf",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "\"['Adj Close'] not in index\"",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[17], line 14\u001b[0m\n\u001b[0;32m     11\u001b[0m df \u001b[38;5;241m=\u001b[39m yf\u001b[38;5;241m.\u001b[39mdownload(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIBM\u001b[39m\u001b[38;5;124m\"\u001b[39m, start\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2018-01-01\u001b[39m\u001b[38;5;124m\"\u001b[39m, end\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[0;32m     13\u001b[0m \u001b[38;5;66;03m# Ensure data has the required structure\u001b[39;00m\n\u001b[1;32m---> 14\u001b[0m df \u001b[38;5;241m=\u001b[39m df[[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mOpen\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mAdj Close\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mVolume\u001b[39m\u001b[38;5;124m'\u001b[39m]]  \u001b[38;5;66;03m# filter only necessary columns\u001b[39;00m\n\u001b[0;32m     15\u001b[0m df \u001b[38;5;241m=\u001b[39m df\u001b[38;5;241m.\u001b[39mdropna()\n\u001b[0;32m     17\u001b[0m \u001b[38;5;66;03m# Step 2: Add technical indicators\u001b[39;00m\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\frame.py:4108\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   4106\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m is_iterator(key):\n\u001b[0;32m   4107\u001b[0m         key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(key)\n\u001b[1;32m-> 4108\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39m_get_indexer_strict(key, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcolumns\u001b[39m\u001b[38;5;124m\"\u001b[39m)[\u001b[38;5;241m1\u001b[39m]\n\u001b[0;32m   4110\u001b[0m \u001b[38;5;66;03m# take() does not accept boolean indexers\u001b[39;00m\n\u001b[0;32m   4111\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(indexer, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mbool\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py:2763\u001b[0m, in \u001b[0;36mMultiIndex._get_indexer_strict\u001b[1;34m(self, key, axis_name)\u001b[0m\n\u001b[0;32m   2760\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(keyarr) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(keyarr[\u001b[38;5;241m0\u001b[39m], \u001b[38;5;28mtuple\u001b[39m):\n\u001b[0;32m   2761\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_indexer_level_0(keyarr)\n\u001b[1;32m-> 2763\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_raise_if_missing(key, indexer, axis_name)\n\u001b[0;32m   2764\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m[indexer], indexer\n\u001b[0;32m   2766\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39m_get_indexer_strict(key, axis_name)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py:2781\u001b[0m, in \u001b[0;36mMultiIndex._raise_if_missing\u001b[1;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[0;32m   2779\u001b[0m cmask \u001b[38;5;241m=\u001b[39m check \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m\n\u001b[0;32m   2780\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m cmask\u001b[38;5;241m.\u001b[39many():\n\u001b[1;32m-> 2781\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkeyarr[cmask]\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not in index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m   2782\u001b[0m \u001b[38;5;66;03m# We get here when levels still contain values which are not\u001b[39;00m\n\u001b[0;32m   2783\u001b[0m \u001b[38;5;66;03m# actually in Index anymore\u001b[39;00m\n\u001b[0;32m   2784\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkeyarr\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not in index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mKeyError\u001b[0m: \"['Adj Close'] not in index\""
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download stock data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\", end=None)\n",
    "\n",
    "# Ensure data has the required structure\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume']]  # filter only necessary columns\n",
    "df = df.dropna()\n",
    "\n",
    "# Step 2: Add technical indicators\n",
    "df['rsi'] = RSIIndicator(close=df['Close']).rsi()\n",
    "df['stoch'] = StochasticOscillator(high=df['High'], low=df['Low'], close=df['Close']).stoch()\n",
    "df['macd'] = MACD(close=df['Close']).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume']).on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'], window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'], window=20).ema_indicator()\n",
    "bb = BollingerBands(close=df['Close'], window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 3: Create prediction targets (5 days ahead)\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "df['dir_5d'] = (df['next_5d_close'] > df['Close']).astype(int)\n",
    "\n",
    "# Drop rows with NaN values (from indicators and shift)\n",
    "df = df.dropna()\n",
    "\n",
    "# Step 4: Set up features and targets\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "y_price = df['next_5d_close']\n",
    "y_dir = df['dir_5d']\n",
    "\n",
    "# Step 5: Train models\n",
    "regressor = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "\n",
    "regressor.fit(X, y_price)\n",
    "classifier.fit(X, y_dir)\n",
    "\n",
    "# Step 6: Predict next 5-day price and direction\n",
    "latest_data = X.iloc[-1:]\n",
    "predicted_price = regressor.predict(latest_data)[0]\n",
    "predicted_direction = classifier.predict(latest_data)[0]\n",
    "\n",
    "# Step 7: Output results\n",
    "print(\"\\n📊 IBM 5-Day Forecast\")\n",
    "print(f\"📈 Predicted price in 5 days: ${predicted_price:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8e8a0a84-8fe9-4986-a4a3-a32c26220e60",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1860, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[18], line 23\u001b[0m\n\u001b[0;32m     20\u001b[0m df\u001b[38;5;241m.\u001b[39mdropna(inplace\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m     22\u001b[0m \u001b[38;5;66;03m# Step 3: Add technical indicators\u001b[39;00m\n\u001b[1;32m---> 23\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     24\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m StochasticOscillator(high\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m], low\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m], close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     25\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m MACD(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1860, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download stock data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Ensure proper column structure\n",
    "required_columns = ['Open', 'High', 'Low', 'Close', 'Volume']\n",
    "missing_cols = [col for col in required_columns if col not in df.columns]\n",
    "if missing_cols:\n",
    "    raise KeyError(f\"Missing required columns: {missing_cols}\")\n",
    "\n",
    "df = df[required_columns].copy()\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add technical indicators\n",
    "df['rsi'] = RSIIndicator(close=df['Close']).rsi()\n",
    "df['stoch'] = StochasticOscillator(high=df['High'], low=df['Low'], close=df['Close']).stoch()\n",
    "df['macd'] = MACD(close=df['Close']).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume']).on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'], window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'], window=20).ema_indicator()\n",
    "bb = BollingerBands(close=df['Close'], window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Create target columns\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "df['dir_5d'] = (df['next_5d_close'] > df['Close']).astype(int)\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Feature selection\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "y_price = df['next_5d_close']\n",
    "y_dir = df['dir_5d']\n",
    "\n",
    "# Step 6: Model training\n",
    "regressor = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "\n",
    "regressor.fit(X, y_price)\n",
    "classifier.fit(X, y_dir)\n",
    "\n",
    "# Step 7: Predict for the next 5 days\n",
    "latest_data = X.iloc[-1:]\n",
    "predicted_price = regressor.predict(latest_data)[0]\n",
    "predicted_direction = classifier.predict(latest_data)[0]\n",
    "\n",
    "# Step 8: Output results\n",
    "print(\"\\n📊 IBM 5-Day Forecast\")\n",
    "print(f\"📈 Predicted price in 5 days: ${predicted_price:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a67f626e-9c33-49bc-b73c-04ab478e29af",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[19], line 27\u001b[0m\n\u001b[0;32m     24\u001b[0m df\u001b[38;5;241m.\u001b[39mdropna(inplace\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m     26\u001b[0m \u001b[38;5;66;03m# Step 3: Add technical indicators\u001b[39;00m\n\u001b[1;32m---> 27\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     28\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m StochasticOscillator(high\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m], low\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m], close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     29\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m MACD(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download stock data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Ensure proper column structure\n",
    "required_columns = ['Open', 'High', 'Low', 'Close', 'Volume']\n",
    "df = df[[col for col in required_columns if col in df.columns]].copy()\n",
    "\n",
    "# Flatten any 2D columns into 1D Series\n",
    "for col in df.columns:\n",
    "    if isinstance(df[col], pd.DataFrame):\n",
    "        df[col] = df[col].iloc[:, 0]\n",
    "    elif df[col].ndim == 2:\n",
    "        df[col] = df[col].squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add technical indicators\n",
    "df['rsi'] = RSIIndicator(close=df['Close']).rsi()\n",
    "df['stoch'] = StochasticOscillator(high=df['High'], low=df['Low'], close=df['Close']).stoch()\n",
    "df['macd'] = MACD(close=df['Close']).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume']).on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'], window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'], window=20).ema_indicator()\n",
    "bb = BollingerBands(close=df['Close'], window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Create target columns\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "df['dir_5d'] = (df['next_5d_close'] > df['Close']).astype(int)\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Feature selection\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "y_price = df['next_5d_close']\n",
    "y_dir = df['dir_5d']\n",
    "\n",
    "# Step 6: Model training\n",
    "regressor = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "\n",
    "regressor.fit(X, y_price)\n",
    "classifier.fit(X, y_dir)\n",
    "\n",
    "# Step 7: Predict for the next 5 days\n",
    "latest_data = X.iloc[-1:]\n",
    "predicted_price = regressor.predict(latest_data)[0]\n",
    "predicted_direction = classifier.predict(latest_data)[0]\n",
    "\n",
    "# Step 8: Output results\n",
    "print(\"\\n📊 IBM 5-Day Forecast\")\n",
    "print(f\"📈 Predicted price in 5 days: ${predicted_price:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "73feb819-21e3-4c0b-84b1-d8ab11ae3969",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th>Price</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticker</th>\n",
       "      <th>IBM</th>\n",
       "      <th>IBM</th>\n",
       "      <th>IBM</th>\n",
       "      <th>IBM</th>\n",
       "      <th>IBM</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-01-02</th>\n",
       "      <td>105.453556</td>\n",
       "      <td>105.665138</td>\n",
       "      <td>104.798308</td>\n",
       "      <td>105.282913</td>\n",
       "      <td>4395815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-03</th>\n",
       "      <td>107.391966</td>\n",
       "      <td>109.077855</td>\n",
       "      <td>106.702588</td>\n",
       "      <td>108.176895</td>\n",
       "      <td>9875914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-04</th>\n",
       "      <td>108.968663</td>\n",
       "      <td>110.791064</td>\n",
       "      <td>108.777550</td>\n",
       "      <td>110.367889</td>\n",
       "      <td>7903785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-05</th>\n",
       "      <td>110.872954</td>\n",
       "      <td>111.186928</td>\n",
       "      <td>109.958333</td>\n",
       "      <td>110.907074</td>\n",
       "      <td>5434807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-08</th>\n",
       "      <td>111.023133</td>\n",
       "      <td>111.876313</td>\n",
       "      <td>110.367885</td>\n",
       "      <td>111.575989</td>\n",
       "      <td>5478425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-21</th>\n",
       "      <td>264.970001</td>\n",
       "      <td>265.649994</td>\n",
       "      <td>260.410004</td>\n",
       "      <td>260.869995</td>\n",
       "      <td>3753900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-22</th>\n",
       "      <td>260.769989</td>\n",
       "      <td>261.269989</td>\n",
       "      <td>257.910004</td>\n",
       "      <td>258.369995</td>\n",
       "      <td>3091300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-23</th>\n",
       "      <td>258.579987</td>\n",
       "      <td>259.869995</td>\n",
       "      <td>255.789993</td>\n",
       "      <td>258.630005</td>\n",
       "      <td>2722600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-27</th>\n",
       "      <td>261.000000</td>\n",
       "      <td>263.790009</td>\n",
       "      <td>259.630005</td>\n",
       "      <td>263.230011</td>\n",
       "      <td>3283600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-28</th>\n",
       "      <td>263.160004</td>\n",
       "      <td>265.000000</td>\n",
       "      <td>261.394989</td>\n",
       "      <td>261.489990</td>\n",
       "      <td>442141</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1861 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Price             Open        High         Low       Close   Volume\n",
       "Ticker             IBM         IBM         IBM         IBM      IBM\n",
       "Date                                                               \n",
       "2018-01-02  105.453556  105.665138  104.798308  105.282913  4395815\n",
       "2018-01-03  107.391966  109.077855  106.702588  108.176895  9875914\n",
       "2018-01-04  108.968663  110.791064  108.777550  110.367889  7903785\n",
       "2018-01-05  110.872954  111.186928  109.958333  110.907074  5434807\n",
       "2018-01-08  111.023133  111.876313  110.367885  111.575989  5478425\n",
       "...                ...         ...         ...         ...      ...\n",
       "2025-05-21  264.970001  265.649994  260.410004  260.869995  3753900\n",
       "2025-05-22  260.769989  261.269989  257.910004  258.369995  3091300\n",
       "2025-05-23  258.579987  259.869995  255.789993  258.630005  2722600\n",
       "2025-05-27  261.000000  263.790009  259.630005  263.230011  3283600\n",
       "2025-05-28  263.160004  265.000000  261.394989  261.489990   442141\n",
       "\n",
       "[1861 rows x 5 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "da219ece-4fce-4b0c-8317-bdebeb9c3bf1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📊 IBM 5-Day Forecast\n",
      "📈 Predicted price in 5 days: $260.46\n",
      "📉 Predicted direction: Down\n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Force flatten all columns to Series\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators — use .values.ravel() or .squeeze() to ensure 1D inputs\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(), \n",
    "    low=df['Low'].squeeze(), \n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(), \n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Target for prediction\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "df['dir_5d'] = (df['next_5d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Train model\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "y_price = df['next_5d_close']\n",
    "y_dir = df['dir_5d']\n",
    "\n",
    "regressor = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "\n",
    "regressor.fit(X, y_price)\n",
    "classifier.fit(X, y_dir)\n",
    "\n",
    "# Step 6: Predict\n",
    "latest_data = X.iloc[-1:]\n",
    "predicted_price = regressor.predict(latest_data)[0]\n",
    "predicted_direction = classifier.predict(latest_data)[0]\n",
    "\n",
    "# Step 7: Results\n",
    "print(\"\\n📊 IBM 5-Day Forecast\")\n",
    "print(f\"📈 Predicted price in 5 days: ${predicted_price:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6951be43-d721-4ca1-a228-4a966a1af8b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[23], line 19\u001b[0m\n\u001b[0;32m     16\u001b[0m df\u001b[38;5;241m.\u001b[39mdropna(inplace\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m     18\u001b[0m \u001b[38;5;66;03m# Step 2: Add technical indicators\u001b[39;00m\n\u001b[1;32m---> 19\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     20\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m StochasticOscillator(high\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m], low\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m], close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     21\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m MACD(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Keep only necessary columns\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Drop rows with missing data\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 2: Add technical indicators\n",
    "df['rsi'] = RSIIndicator(close=df['Close']).rsi()\n",
    "df['stoch'] = StochasticOscillator(high=df['High'], low=df['Low'], close=df['Close']).stoch()\n",
    "df['macd'] = MACD(close=df['Close']).macd_diff()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'])\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "df.dropna(inplace=True)  # Drop any rows with NaNs from indicators\n",
    "\n",
    "# Step 3: Create targets for 1, 2, and 3 days ahead\n",
    "for n in [1, 2, 3]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)  # Drop rows with NaNs after shifting\n",
    "\n",
    "# Step 4: Features and labels\n",
    "features = ['rsi', 'stoch', 'macd', 'bb_bbh', 'bb_bbl', 'Close', 'Volume']\n",
    "X = df[features]\n",
    "\n",
    "# Split data into train and test sets (e.g., last 20% for testing)\n",
    "split_index = int(len(df) * 0.8)\n",
    "X_train, X_test = X.iloc[:split_index], X.iloc[split_index:]\n",
    "y_train = {n: df[f'dir_{n}d'].iloc[:split_index] for n in [1, 2, 3]}\n",
    "y_test = {n: df[f'dir_{n}d'].iloc[split_index:] for n in [1, 2, 3]}\n",
    "\n",
    "# Step 5: Train separate models for each prediction horizon\n",
    "models = {}\n",
    "for n in [1, 2, 3]:\n",
    "    model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    model.fit(X_train, y_train[n])\n",
    "    models[n] = model\n",
    "\n",
    "# Step 6: Predict and evaluate\n",
    "for n in [1, 2, 3]:\n",
    "    preds = models[n].predict(X_test)\n",
    "    acc = accuracy_score(y_test[n], preds)\n",
    "    print(f\"Accuracy for {n}-day direction prediction: {acc:.4f}\")\n",
    "\n",
    "# Step 7: Predict future direction and price for next 1, 2, and 3 days using latest data\n",
    "latest_features = X.iloc[-1].values.reshape(1, -1)\n",
    "print(\"\\nPredictions on latest data:\")\n",
    "for n in [1, 2, 3]:\n",
    "    pred_dir = models[n].predict(latest_features)[0]\n",
    "    # For price prediction: naive approach = current close * (1 + avg pct change)\n",
    "    # But here, we only have classification, so just show direction\n",
    "    print(f\"Direction prediction for next {n} day(s): {'Up' if pred_dir == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "524063b8-4ada-45cf-b847-2aba9fb3c873",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Operands are not aligned. Do `left, right = left.align(right, axis=1, copy=False)` before operating.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_36168\\492373376.py\u001b[0m in \u001b[0;36m?\u001b[1;34m()\u001b[0m\n\u001b[0;32m     40\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     41\u001b[0m \u001b[1;31m# Step 4: Create targets for 1, 2, 3, and 5 days ahead (price and direction)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     42\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mn\u001b[0m \u001b[1;32min\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m5\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     43\u001b[0m     \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mnext_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md_close\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Close'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshift\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 44\u001b[1;33m     \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mdir_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mnext_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md_close\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m>\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Close'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mint\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     45\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     46\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minplace\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m  \u001b[1;31m# drop rows with NaNs from shifting\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     47\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\ops\\common.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other)\u001b[0m\n\u001b[0;32m     72\u001b[0m                     \u001b[1;32mreturn\u001b[0m \u001b[0mNotImplemented\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     73\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     74\u001b[0m         \u001b[0mother\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mitem_from_zerodim\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     75\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 76\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\arraylike.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other)\u001b[0m\n\u001b[0;32m     46\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"__lt__\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     47\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__lt__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 48\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_cmp_method\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0moperator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlt\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other, op)\u001b[0m\n\u001b[0;32m   7894\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_cmp_method\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mop\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7895\u001b[0m         \u001b[0maxis\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mLiteral\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1\u001b[0m  \u001b[1;31m# only relevant for Series other case\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7896\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 7897\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_align_for_op\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mflex\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   7898\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7899\u001b[0m         \u001b[1;31m# See GH#4537 for discussion of scalar op behavior\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7900\u001b[0m         \u001b[0mnew_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_dispatch_frame_op\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mop\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other, axis, flex, level)\u001b[0m\n\u001b[0;32m   8201\u001b[0m             \u001b[1;31m# axis=1 is default for DataFrame-with-Series op\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8202\u001b[0m             \u001b[0maxis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maxis\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m \u001b[1;32melse\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8203\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mflex\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8204\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mleft\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mequals\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mright\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 8205\u001b[1;33m                     raise ValueError(\n\u001b[0m\u001b[0;32m   8206\u001b[0m                         \u001b[1;34m\"Operands are not aligned. Do \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8207\u001b[0m                         \u001b[1;34m\"`left, right = left.align(right, axis=1, copy=False)` \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8208\u001b[0m                         \u001b[1;34m\"before operating.\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: Operands are not aligned. Do `left, right = left.align(right, axis=1, copy=False)` before operating."
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators — make sure inputs are 1D\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(), \n",
    "    low=df['Low'].squeeze(), \n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(), \n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Create targets for 1, 2, 3, and 5 days ahead (price and direction)\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)  # drop rows with NaNs from shifting\n",
    "\n",
    "# Step 5: Features\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 6: Train regressors and classifiers for each prediction horizon\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "\n",
    "    reg.fit(X, y_price)\n",
    "    clf.fit(X, y_dir)\n",
    "\n",
    "    regressors[n] = reg\n",
    "    classifiers[n] = clf\n",
    "\n",
    "# Step 7: Predict on latest data point\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "print(\"\\n📊 IBM Price & Direction Forecasts\")\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    pred_price = regressors[n].predict(latest_data)[0]\n",
    "    pred_dir = classifiers[n].predict(latest_data)[0]\n",
    "    print(f\"\\n📅 {n}-Day Forecast:\")\n",
    "    print(f\"  Predicted price: ${pred_price:.2f}\")\n",
    "    print(f\"  Predicted direction: {'Up' if pred_dir == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "05aa2b71-4201-47dc-818d-9b128ac88857",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Operands are not aligned. Do `left, right = left.align(right, axis=1, copy=False)` before operating.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_36168\\492373376.py\u001b[0m in \u001b[0;36m?\u001b[1;34m()\u001b[0m\n\u001b[0;32m     40\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     41\u001b[0m \u001b[1;31m# Step 4: Create targets for 1, 2, 3, and 5 days ahead (price and direction)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     42\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mn\u001b[0m \u001b[1;32min\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m5\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     43\u001b[0m     \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mnext_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md_close\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Close'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshift\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 44\u001b[1;33m     \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mdir_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mnext_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md_close\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m>\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Close'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mint\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     45\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     46\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minplace\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m  \u001b[1;31m# drop rows with NaNs from shifting\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     47\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\ops\\common.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other)\u001b[0m\n\u001b[0;32m     72\u001b[0m                     \u001b[1;32mreturn\u001b[0m \u001b[0mNotImplemented\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     73\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     74\u001b[0m         \u001b[0mother\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mitem_from_zerodim\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     75\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 76\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\arraylike.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other)\u001b[0m\n\u001b[0;32m     46\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"__lt__\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     47\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__lt__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 48\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_cmp_method\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0moperator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlt\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other, op)\u001b[0m\n\u001b[0;32m   7894\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_cmp_method\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mop\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7895\u001b[0m         \u001b[0maxis\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mLiteral\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1\u001b[0m  \u001b[1;31m# only relevant for Series other case\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7896\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 7897\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_align_for_op\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mflex\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   7898\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7899\u001b[0m         \u001b[1;31m# See GH#4537 for discussion of scalar op behavior\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7900\u001b[0m         \u001b[0mnew_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_dispatch_frame_op\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mop\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other, axis, flex, level)\u001b[0m\n\u001b[0;32m   8201\u001b[0m             \u001b[1;31m# axis=1 is default for DataFrame-with-Series op\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8202\u001b[0m             \u001b[0maxis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maxis\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m \u001b[1;32melse\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8203\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mflex\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8204\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mleft\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mequals\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mright\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 8205\u001b[1;33m                     raise ValueError(\n\u001b[0m\u001b[0;32m   8206\u001b[0m                         \u001b[1;34m\"Operands are not aligned. Do \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8207\u001b[0m                         \u001b[1;34m\"`left, right = left.align(right, axis=1, copy=False)` \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8208\u001b[0m                         \u001b[1;34m\"before operating.\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: Operands are not aligned. Do `left, right = left.align(right, axis=1, copy=False)` before operating."
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators — make sure inputs are 1D\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(), \n",
    "    low=df['Low'].squeeze(), \n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(), \n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Create targets for 1, 2, 3, and 5 days ahead (price and direction)\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)  # drop rows with NaNs from shifting\n",
    "\n",
    "# Step 5: Features\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 6: Train regressors and classifiers for each prediction horizon\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "\n",
    "    reg.fit(X, y_price)\n",
    "    clf.fit(X, y_dir)\n",
    "\n",
    "    regressors[n] = reg\n",
    "    classifiers[n] = clf\n",
    "\n",
    "# Step 7: Predict on latest data point\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "print(\"\\n📊 IBM Price & Direction Forecasts\")\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    pred_price = regressors[n].predict(latest_data)[0]\n",
    "    pred_dir = classifiers[n].predict(latest_data)[0]\n",
    "    print(f\"\\n📅 {n}-Day Forecast:\")\n",
    "    print(f\"  Predicted price: ${pred_price:.2f}\")\n",
    "    print(f\"  Predicted direction: {'Up' if pred_dir == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "760da94d-3ae0-4537-b414-6ccb70bd89b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[26], line 20\u001b[0m\n\u001b[0;32m     17\u001b[0m df\u001b[38;5;241m.\u001b[39mdropna(inplace\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m     19\u001b[0m \u001b[38;5;66;03m# Step 3: Add technical indicators\u001b[39;00m\n\u001b[1;32m---> 20\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     21\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m StochasticOscillator(\n\u001b[0;32m     22\u001b[0m     high\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m], low\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m], close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m     23\u001b[0m )\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     24\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m MACD(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add technical indicators\n",
    "df['rsi'] = RSIIndicator(close=df['Close']).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'], low=df['Low'], close=df['Close']\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close']).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume']).on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'], window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'], window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'], window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Create targets for 1, 2, 3, and 5 days ahead (price and direction)\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'].values > df['Close'].values).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Define features\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 6: Train models\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "    \n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    \n",
    "    reg.fit(X, y_price)\n",
    "    clf.fit(X, y_dir)\n",
    "    \n",
    "    regressors[n] = reg\n",
    "    classifiers[n] = clf\n",
    "\n",
    "# Step 7: Predict for latest data\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "print(\"\\n📊 IBM Price & Direction Forecasts\")\n",
    "for n in [1, 2, 3, 5]:\n",
    "    pred_price = regressors[n].predict(latest_data)[0]\n",
    "    pred_dir = classifiers[n].predict(latest_data)[0]\n",
    "    print(f\"\\n📅 {n}-Day Forecast:\")\n",
    "    print(f\"  Predicted price: ${pred_price:.2f}\")\n",
    "    print(f\"  Predicted direction: {'Up' if pred_dir == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3986fc83-7291-4071-9797-bd52713049ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[27], line 19\u001b[0m\n\u001b[0;32m     16\u001b[0m     df[col] \u001b[38;5;241m=\u001b[39m df[col]\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mfloat\u001b[39m)\n\u001b[0;32m     18\u001b[0m \u001b[38;5;66;03m# Step 3: Add technical indicators (make sure inputs are Series, not DataFrames)\u001b[39;00m\n\u001b[1;32m---> 19\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     20\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m StochasticOscillator(high\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m], low\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m], close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     21\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m MACD(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Step 2: Ensure all columns are float type and Series (1D)\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float)\n",
    "\n",
    "# Step 3: Add technical indicators (make sure inputs are Series, not DataFrames)\n",
    "df['rsi'] = RSIIndicator(close=df['Close']).rsi()\n",
    "df['stoch'] = StochasticOscillator(high=df['High'], low=df['Low'], close=df['Close']).stoch()\n",
    "df['macd'] = MACD(close=df['Close']).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume']).on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'], window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'], window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'], window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Create targets for 1, 2, 3, and 5 day predictions\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "# Drop NaNs created by indicators or target shifting\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Define feature columns and prepare input matrix\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 6: Train separate models for each prediction horizon\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "\n",
    "    regressor = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "\n",
    "    regressor.fit(X, y_price)\n",
    "    classifier.fit(X, y_dir)\n",
    "\n",
    "    regressors[n] = regressor\n",
    "    classifiers[n] = classifier\n",
    "\n",
    "# Step 7: Predict using the latest available data\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "print(\"\\n📊 IBM Forecast Summary\")\n",
    "for n in [1, 2, 3, 5]:\n",
    "    pred_price = regressors[n].predict(latest_data)[0]\n",
    "    pred_dir = classifiers[n].predict(latest_data)[0]\n",
    "\n",
    "    print(f\"\\n📅 {n}-Day Prediction:\")\n",
    "    print(f\"  📈 Predicted Close Price: ${pred_price:.2f}\")\n",
    "    print(f\"  📉 Predicted Direction: {'Up' if pred_dir == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8bd9bfb9-963f-4351-ba23-093d7a4d0af9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1860, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[28], line 23\u001b[0m\n\u001b[0;32m     20\u001b[0m low \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m     21\u001b[0m volume \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mVolume\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[1;32m---> 23\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     24\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m StochasticOscillator(high\u001b[38;5;241m=\u001b[39mhigh, low\u001b[38;5;241m=\u001b[39mlow, close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     25\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m MACD(close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1860, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Step 2: Ensure all columns are floats\n",
    "df = df.astype(float)\n",
    "\n",
    "# Step 3: Add technical indicators using 1D Series\n",
    "close = df['Close']\n",
    "high = df['High']\n",
    "low = df['Low']\n",
    "volume = df['Volume']\n",
    "\n",
    "df['rsi'] = RSIIndicator(close=close).rsi()\n",
    "df['stoch'] = StochasticOscillator(high=high, low=low, close=close).stoch()\n",
    "df['macd'] = MACD(close=close).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=close, volume=volume).on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=close, window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=close, window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=close, window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Create prediction targets for 1, 2, 3, and 5 days\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "# Step 5: Drop NaNs created by indicators and shifting\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 6: Define features and train models\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "\n",
    "    reg.fit(X, y_price)\n",
    "    clf.fit(X, y_dir)\n",
    "\n",
    "    regressors[n] = reg\n",
    "    classifiers[n] = clf\n",
    "\n",
    "# Step 7: Make predictions on the latest data\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "print(\"\\n📊 IBM Stock Forecast:\")\n",
    "for n in [1, 2, 3, 5]:\n",
    "    pred_price = regressors[n].predict(latest_data)[0]\n",
    "    pred_dir = classifiers[n].predict(latest_data)[0]\n",
    "\n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   📈 Predicted Close Price: ${pred_price:.2f}\")\n",
    "    print(f\"   📉 Predicted Direction: {'Up' if pred_dir == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a2d452b4-19f6-4f34-b389-5864e3606535",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[29], line 22\u001b[0m\n\u001b[0;32m     19\u001b[0m volume \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mVolume\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m     21\u001b[0m \u001b[38;5;66;03m# Step 3: Compute technical indicators\u001b[39;00m\n\u001b[1;32m---> 22\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     23\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m StochasticOscillator(high\u001b[38;5;241m=\u001b[39mhigh, low\u001b[38;5;241m=\u001b[39mlow, close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     24\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m MACD(close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download historical stock data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "df = df.astype(float)\n",
    "\n",
    "# Step 2: Extract Series for indicators\n",
    "close = df['Close']    # ✅ This is a Series\n",
    "high = df['High']\n",
    "low = df['Low']\n",
    "volume = df['Volume']\n",
    "\n",
    "# Step 3: Compute technical indicators\n",
    "df['rsi'] = RSIIndicator(close=close).rsi()\n",
    "df['stoch'] = StochasticOscillator(high=high, low=low, close=close).stoch()\n",
    "df['macd'] = MACD(close=close).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=close, volume=volume).on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=close, window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=close, window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=close, window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Create future price and direction targets\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "# Step 5: Drop rows with NaNs due to indicators or shifting\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 6: Select features and targets\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "\n",
    "    # Train models\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    reg.fit(X, y_price)\n",
    "    clf.fit(X, y_dir)\n",
    "\n",
    "    regressors[n] = reg\n",
    "    classifiers[n] = clf\n",
    "\n",
    "# Step 7: Predict using the latest available data\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "print(\"\\n📈 IBM Stock Forecast:\")\n",
    "for n in [1, 2, 3, 5]:\n",
    "    pred_price = regressors[n].predict(latest_data)[0]\n",
    "    pred_dir = classifiers[n].predict(latest_data)[0]\n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   🔮 Predicted Close: ${pred_price:.2f}\")\n",
    "    print(f\"   📊 Direction: {'Up' if pred_dir == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "085b702b-0f39-4da2-8550-6009aec01b65",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[30], line 21\u001b[0m\n\u001b[0;32m     18\u001b[0m volume \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mVolume\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m     20\u001b[0m \u001b[38;5;66;03m# Step 3: Add technical indicators (all inputs are Series)\u001b[39;00m\n\u001b[1;32m---> 21\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mclose, window\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m14\u001b[39m)\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     22\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m StochasticOscillator(high\u001b[38;5;241m=\u001b[39mhigh, low\u001b[38;5;241m=\u001b[39mlow, close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     23\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m MACD(close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download historical stock data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].astype(float)\n",
    "\n",
    "# Step 2: Ensure all data columns are Series (not 2D DataFrames)\n",
    "close = df['Close']   # ✅ 1D Series\n",
    "high = df['High']\n",
    "low = df['Low']\n",
    "volume = df['Volume']\n",
    "\n",
    "# Step 3: Add technical indicators (all inputs are Series)\n",
    "df['rsi'] = RSIIndicator(close=close, window=14).rsi()\n",
    "df['stoch'] = StochasticOscillator(high=high, low=low, close=close).stoch()\n",
    "df['macd'] = MACD(close=close).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=close, volume=volume).on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=close, window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=close, window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=close, window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Create future targets\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "# Step 5: Drop any rows with NaNs\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 6: Select features and targets\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 7: Train Random Forest models for each target\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    reg.fit(X, y_price)\n",
    "    clf.fit(X, y_dir)\n",
    "\n",
    "    regressors[n] = reg\n",
    "    classifiers[n] = clf\n",
    "\n",
    "# Step 8: Predict using latest data\n",
    "latest_data = X.iloc[-1:].copy()\n",
    "\n",
    "print(\"\\n📈 IBM Stock Forecast:\")\n",
    "for n in [1, 2, 3, 5]:\n",
    "    pred_price = regressors[n].predict(latest_data)[0]\n",
    "    pred_dir = classifiers[n].predict(latest_data)[0]\n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   🔮 Predicted Close: ${pred_price:.2f}\")\n",
    "    print(f\"   📊 Direction: {'Up' if pred_dir == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "db773945-94f9-4995-86e2-d5b17f5b8f33",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[31], line 25\u001b[0m\n\u001b[0;32m     22\u001b[0m volume \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mVolume\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m     24\u001b[0m \u001b[38;5;66;03m# Step 4: Add technical indicators (using Series inputs only)\u001b[39;00m\n\u001b[1;32m---> 25\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mclose, window\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m14\u001b[39m)\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     26\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m StochasticOscillator(high\u001b[38;5;241m=\u001b[39mhigh, low\u001b[38;5;241m=\u001b[39mlow, close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     27\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m MACD(close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download historical stock data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Ensure correct column types\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].astype(float)\n",
    "\n",
    "# Step 3: Extract Series (1D) for indicators\n",
    "close = df['Close']\n",
    "high = df['High']\n",
    "low = df['Low']\n",
    "volume = df['Volume']\n",
    "\n",
    "# Step 4: Add technical indicators (using Series inputs only)\n",
    "df['rsi'] = RSIIndicator(close=close, window=14).rsi()\n",
    "df['stoch'] = StochasticOscillator(high=high, low=low, close=close).stoch()\n",
    "df['macd'] = MACD(close=close).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=close, volume=volume).on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=close, window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=close, window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=close, window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 5: Create future target columns\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "# Step 6: Drop any rows with missing values\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 7: Define features and training data\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 8: Fit models and make predictions\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    reg.fit(X, y_price)\n",
    "    clf.fit(X, y_dir)\n",
    "\n",
    "    regressors[n] = reg\n",
    "    classifiers[n] = clf\n",
    "\n",
    "# Step 9: Predict on the latest data\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "print(\"\\n📈 IBM Stock Forecast:\")\n",
    "for n in [1, 2, 3, 5]:\n",
    "    pred_price = regressors[n].predict(latest_data)[0]\n",
    "    pred_dir = classifiers[n].predict(latest_data)[0]\n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   🔮 Predicted Close: ${pred_price:.2f}\")\n",
    "    print(f\"   📊 Direction: {'Up' if pred_dir == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0917c0a5-6400-416b-9a94-eff58c36feb9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "YF.download() has changed argument auto_adjust default to True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 25\u001b[0m\n\u001b[0;32m     22\u001b[0m volume \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mVolume\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m     24\u001b[0m \u001b[38;5;66;03m# Step 4: Add technical indicators (using Series inputs only)\u001b[39;00m\n\u001b[1;32m---> 25\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mclose, window\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m14\u001b[39m)\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     26\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m StochasticOscillator(high\u001b[38;5;241m=\u001b[39mhigh, low\u001b[38;5;241m=\u001b[39mlow, close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     27\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m MACD(close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download historical stock data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Ensure correct column types\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].astype(float)\n",
    "\n",
    "# Step 3: Extract Series (1D) for indicators\n",
    "close = df['Close']\n",
    "high = df['High']\n",
    "low = df['Low']\n",
    "volume = df['Volume']\n",
    "\n",
    "# Step 4: Add technical indicators (using Series inputs only)\n",
    "df['rsi'] = RSIIndicator(close=close, window=14).rsi()\n",
    "df['stoch'] = StochasticOscillator(high=high, low=low, close=close).stoch()\n",
    "df['macd'] = MACD(close=close).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=close, volume=volume).on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=close, window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=close, window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=close, window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 5: Create future target columns\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "# Step 6: Drop any rows with missing values\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 7: Define features and training data\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 8: Fit models and make predictions\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    reg.fit(X, y_price)\n",
    "    clf.fit(X, y_dir)\n",
    "\n",
    "    regressors[n] = reg\n",
    "    classifiers[n] = clf\n",
    "\n",
    "# Step 9: Predict on the latest data\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "print(\"\\n📈 IBM Stock Forecast:\")\n",
    "for n in [1, 2, 3, 5]:\n",
    "    pred_price = regressors[n].predict(latest_data)[0]\n",
    "    pred_dir = classifiers[n].predict(latest_data)[0]\n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   🔮 Predicted Close: ${pred_price:.2f}\")\n",
    "    print(f\"   📊 Direction: {'Up' if pred_dir == 1 else 'Down'}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9e248865-e47c-4588-b06f-9b5effb88a4f",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[2], line 25\u001b[0m\n\u001b[0;32m     22\u001b[0m volume \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mVolume\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m     24\u001b[0m \u001b[38;5;66;03m# Step 4: Compute indicators (no 2D arrays!)\u001b[39;00m\n\u001b[1;32m---> 25\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     26\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m StochasticOscillator(high\u001b[38;5;241m=\u001b[39mhigh, low\u001b[38;5;241m=\u001b[39mlow, close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     27\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m MACD(close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.trend import SMAIndicator, EMAIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download historical stock data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\", progress=False)\n",
    "\n",
    "# Step 2: Keep only necessary columns and make sure they are floats\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].astype(float)\n",
    "\n",
    "# Step 3: Ensure these are Series (1D)\n",
    "close = df['Close']\n",
    "high = df['High']\n",
    "low = df['Low']\n",
    "volume = df['Volume']\n",
    "\n",
    "# Step 4: Compute indicators (no 2D arrays!)\n",
    "df['rsi'] = RSIIndicator(close=close).rsi()\n",
    "df['stoch'] = StochasticOscillator(high=high, low=low, close=close).stoch()\n",
    "df['macd'] = MACD(close=close).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=close, volume=volume).on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=close, window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=close, window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=close, window=20)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 5: Future values and direction\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "# Step 6: Drop missing data\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 7: Machine learning features\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 8: Train models\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    reg.fit(X, y_price)\n",
    "    clf.fit(X, y_dir)\n",
    "\n",
    "    regressors[n] = reg\n",
    "    classifiers[n] = clf\n",
    "\n",
    "# Step 9: Predict the next values\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "print(\"\\n📈 IBM Stock Forecast:\")\n",
    "for n in [1, 2, 3, 5]:\n",
    "    pred_price = regressors[n].predict(latest_data)[0]\n",
    "    pred_dir = classifiers[n].predict(latest_data)[0]\n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   🔮 Predicted Close: ${pred_price:.2f}\")\n",
    "    print(f\"   📊 Direction: {'Up' if pred_dir == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "57665c64-cf72-410d-942b-1f78d302151a",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[4], line 19\u001b[0m\n\u001b[0;32m     15\u001b[0m df \u001b[38;5;241m=\u001b[39m df[[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mOpen\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mVolume\u001b[39m\u001b[38;5;124m'\u001b[39m]]\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mfloat\u001b[39m)\n\u001b[0;32m     17\u001b[0m \u001b[38;5;66;03m# ✅ CORRECT way to select Series (NOT df[['Close']])\u001b[39;00m\n\u001b[1;32m---> 19\u001b[0m close \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mvalues, index\u001b[38;5;241m=\u001b[39mdf\u001b[38;5;241m.\u001b[39mindex)\n\u001b[0;32m     20\u001b[0m high \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mvalues, index\u001b[38;5;241m=\u001b[39mdf\u001b[38;5;241m.\u001b[39mindex)\n\u001b[0;32m     21\u001b[0m low \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mvalues, index\u001b[38;5;241m=\u001b[39mdf\u001b[38;5;241m.\u001b[39mindex)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\", progress=False)\n",
    "\n",
    "# Step 2: Ensure all relevant columns are float and properly selected as Series\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].astype(float)\n",
    "\n",
    "# ✅ CORRECT way to select Series (NOT df[['Close']])\n",
    "\n",
    "close = pd.Series(df['Close'].values, index=df.index)\n",
    "high = pd.Series(df['High'].values, index=df.index)\n",
    "low = pd.Series(df['Low'].values, index=df.index)\n",
    "volume = pd.Series(df['Volume'].values, index=df.index)\n",
    "\n",
    "\n",
    "# Step 3: Compute indicators\n",
    "df['rsi'] = RSIIndicator(close=close).rsi()\n",
    "df['stoch'] = StochasticOscillator(high=high, low=low, close=close).stoch()\n",
    "df['macd'] = MACD(close=close).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=close, volume=volume).on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=close, window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=close, window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=close)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Future labels\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Prepare ML input\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 6: Train models\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    reg.fit(X, y_price)\n",
    "    clf.fit(X, y_dir)\n",
    "\n",
    "    regressors[n] = reg\n",
    "    classifiers[n] = clf\n",
    "\n",
    "# Step 7: Predict\n",
    "latest = X.iloc[[-1]]\n",
    "\n",
    "print(\"\\n📈 IBM Stock Forecast:\")\n",
    "for n in [1, 2, 3, 5]:\n",
    "    pred_price = regressors[n].predict(latest)[0]\n",
    "    pred_dir = classifiers[n].predict(latest)[0]\n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   🔮 Predicted Close: ${pred_price:.2f}\")\n",
    "    print(f\"   📊 Direction: {'Up' if pred_dir == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "220e11f6-ce95-4e9c-a37e-ce6f01df8af6",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[5], line 22\u001b[0m\n\u001b[0;32m     19\u001b[0m volume \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mVolume\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m     21\u001b[0m \u001b[38;5;66;03m# Step 4: Compute technical indicators\u001b[39;00m\n\u001b[1;32m---> 22\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     23\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m StochasticOscillator(high\u001b[38;5;241m=\u001b[39mhigh, low\u001b[38;5;241m=\u001b[39mlow, close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     24\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m MACD(close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\", progress=False)\n",
    "\n",
    "# Step 2: Select relevant columns and ensure float dtype\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].astype(float)\n",
    "\n",
    "# Step 3: Extract Series properly (single bracket to get 1D Series)\n",
    "close = df['Close']\n",
    "high = df['High']\n",
    "low = df['Low']\n",
    "volume = df['Volume']\n",
    "\n",
    "# Step 4: Compute technical indicators\n",
    "df['rsi'] = RSIIndicator(close=close).rsi()\n",
    "df['stoch'] = StochasticOscillator(high=high, low=low, close=close).stoch()\n",
    "df['macd'] = MACD(close=close).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=close, volume=volume).on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=close, window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=close, window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=close)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 5: Create future target labels\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "# Drop rows with NaN values caused by shifting\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 6: Prepare feature matrix and targets for ML models\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 7: Train Random Forest models for each forecast horizon\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    reg.fit(X, y_price)\n",
    "    clf.fit(X, y_dir)\n",
    "\n",
    "    regressors[n] = reg\n",
    "    classifiers[n] = clf\n",
    "\n",
    "# Step 8: Predict using the latest available data\n",
    "latest = X.iloc[[-1]]\n",
    "\n",
    "print(\"\\n📈 IBM Stock Forecast:\")\n",
    "for n in [1, 2, 3, 5]:\n",
    "    pred_price = regressors[n].predict(latest)[0]\n",
    "    pred_dir = classifiers[n].predict(latest)[0]\n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   🔮 Predicted Close: ${pred_price:.2f}\")\n",
    "    print(f\"   📊 Direction: {'Up' if pred_dir == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "14a81b4d-0169-446b-896b-9d57d320a482",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[7], line 24\u001b[0m\n\u001b[0;32m     21\u001b[0m volume \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mVolume\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m     23\u001b[0m \u001b[38;5;66;03m# Step 4: Compute technical indicators\u001b[39;00m\n\u001b[1;32m---> 24\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     25\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m StochasticOscillator(high\u001b[38;5;241m=\u001b[39mhigh, low\u001b[38;5;241m=\u001b[39mlow, close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mstoch()\n\u001b[0;32m     26\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m MACD(close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mmacd_diff()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, mean_absolute_error\n",
    "from sklearn.model_selection import TimeSeriesSplit\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\", progress=False)\n",
    "\n",
    "# Step 2: Select relevant columns and ensure float dtype\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].astype(float)\n",
    "\n",
    "# Step 3: Extract Series properly\n",
    "close = df['Close']\n",
    "high = df['High']\n",
    "low = df['Low']\n",
    "volume = df['Volume']\n",
    "\n",
    "# Step 4: Compute technical indicators\n",
    "df['rsi'] = RSIIndicator(close=close).rsi()\n",
    "df['stoch'] = StochasticOscillator(high=high, low=low, close=close).stoch()\n",
    "df['macd'] = MACD(close=close).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=close, volume=volume).on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=close, window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=close, window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=close)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 5: Create future target labels\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "# Drop rows with NaN values caused by shifting and indicators\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 6: Prepare feature matrix and targets for ML models\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 7: Train and evaluate models using time-series cross-validation\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "results = []\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "    \n",
    "    # Time-series split\n",
    "    tscv = TimeSeriesSplit(n_splits=5)\n",
    "    \n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    \n",
    "    # Store evaluation metrics\n",
    "    reg_scores = []\n",
    "    clf_scores = []\n",
    "    \n",
    "    for train_idx, test_idx in tscv.split(X):\n",
    "        X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]\n",
    "        y_price_train, y_price_test = y_price.iloc[train_idx], y_price.iloc[test_idx]\n",
    "        y_dir_train, y_dir_test = y_dir.iloc[train_idx], y_dir.iloc[test_idx]\n",
    "        \n",
    "        # Train and predict\n",
    "        reg.fit(X_train, y_price_train)\n",
    "        clf.fit(X_train, y_dir_train)\n",
    "        \n",
    "        # Evaluate\n",
    "        price_pred = reg.predict(X_test)\n",
    "        dir_pred = clf.predict(X_test)\n",
    "        \n",
    "        reg_scores.append(mean_absolute_error(y_price_test, price_pred))\n",
    "        clf_scores.append(accuracy_score(y_dir_test, dir_pred))\n",
    "    \n",
    "    # Store models and results\n",
    "    regressors[n] = reg\n",
    "    classifiers[n] = clf\n",
    "    \n",
    "    print(f\"\\n{n}-Day Forecast Evaluation:\")\n",
    "    print(f\"  Price MAE: {sum(reg_scores)/len(reg_scores):.2f}\")\n",
    "    print(f\"  Direction Accuracy: {sum(clf_scores)/len(clf_scores):.2%}\")\n",
    "\n",
    "# Step 8: Predict using the latest available data (proper out-of-sample)\n",
    "# In a real application, you would need to:\n",
    "# 1. Get new data that wasn't used in training\n",
    "# 2. Calculate indicators based only on historical data\n",
    "# 3. Make prediction\n",
    "print(\"\\n📈 IBM Stock Forecast (based on most recent trained data):\")\n",
    "for n in [1, 2, 3, 5]:\n",
    "    pred_price = regressors[n].predict(X.iloc[[-1]])[0]  # Fixed here\n",
    "    pred_dir = classifiers[n].predict(X.iloc[[-1]])[0]    # Fixed here\n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   🔮 Predicted Close: ${pred_price:.2f}\")\n",
    "    print(f\"   📊 Direction: {'Up' if pred_dir == 1 else 'Down'}\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "eb1b208e-6091-476b-86e0-cf123004ebb9",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[8], line 20\u001b[0m\n\u001b[0;32m     16\u001b[0m df \u001b[38;5;241m=\u001b[39m df[[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mOpen\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mVolume\u001b[39m\u001b[38;5;124m'\u001b[39m]]\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mfloat\u001b[39m)\n\u001b[0;32m     18\u001b[0m \u001b[38;5;66;03m# Step 3: Compute technical indicators\u001b[39;00m\n\u001b[0;32m     19\u001b[0m \u001b[38;5;66;03m# Convert to numpy arrays and flatten if needed\u001b[39;00m\n\u001b[1;32m---> 20\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mrsi()\u001b[38;5;241m.\u001b[39mvalues\u001b[38;5;241m.\u001b[39mflatten()\n\u001b[0;32m     21\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m StochasticOscillator(high\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m], low\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m], close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mstoch()\u001b[38;5;241m.\u001b[39mvalues\u001b[38;5;241m.\u001b[39mflatten()\n\u001b[0;32m     22\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m MACD(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mmacd_diff()\u001b[38;5;241m.\u001b[39mvalues\u001b[38;5;241m.\u001b[39mflatten()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, mean_absolute_error\n",
    "from sklearn.model_selection import TimeSeriesSplit\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\", progress=False)\n",
    "\n",
    "# Step 2: Select relevant columns and ensure float dtype\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].astype(float)\n",
    "\n",
    "# Step 3: Compute technical indicators\n",
    "# Convert to numpy arrays and flatten if needed\n",
    "df['rsi'] = RSIIndicator(close=df['Close']).rsi().values.flatten()\n",
    "df['stoch'] = StochasticOscillator(high=df['High'], low=df['Low'], close=df['Close']).stoch().values.flatten()\n",
    "df['macd'] = MACD(close=df['Close']).macd_diff().values.flatten()\n",
    "df['obv'] = OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume']).on_balance_volume().values.flatten()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'], window=10).sma_indicator().values.flatten()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'], window=20).ema_indicator().values.flatten()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'])\n",
    "df['bb_bbm'] = bb.bollinger_mavg().values.flatten()\n",
    "df['bb_bbh'] = bb.bollinger_hband().values.flatten()\n",
    "df['bb_bbl'] = bb.bollinger_lband().values.flatten()\n",
    "\n",
    "# Step 4: Create future target labels\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "# Drop rows with NaN values\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Prepare features and targets\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 6: Train and evaluate models\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "    \n",
    "    # Time-series split\n",
    "    tscv = TimeSeriesSplit(n_splits=5)\n",
    "    \n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    \n",
    "    # Cross-validation\n",
    "    for train_idx, test_idx in tscv.split(X):\n",
    "        X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]\n",
    "        y_price_train, y_price_test = y_price.iloc[train_idx], y_price.iloc[test_idx]\n",
    "        y_dir_train, y_dir_test = y_dir.iloc[train_idx], y_dir.iloc[test_idx]\n",
    "        \n",
    "        reg.fit(X_train, y_price_train)\n",
    "        clf.fit(X_train, y_dir_train)\n",
    "    \n",
    "    regressors[n] = reg\n",
    "    classifiers[n] = clf\n",
    "\n",
    "# Step 7: Make predictions\n",
    "print(\"\\n📈 IBM Stock Forecast:\")\n",
    "for n in [1, 2, 3, 5]:\n",
    "    pred_price = regressors[n].predict(X.iloc[[-1]])[0]\n",
    "    pred_dir = classifiers[n].predict(X.iloc[[-1]])[0]\n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   🔮 Predicted Close: ${pred_price:.2f}\")\n",
    "    print(f\"   📊 Direction: {'Up' if pred_dir == 1 else 'Down'}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "21395ba1-4e4a-4d12-b1eb-43238a8628e1",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[9], line 24\u001b[0m\n\u001b[0;32m     21\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m pd\u001b[38;5;241m.\u001b[39mSeries(np\u001b[38;5;241m.\u001b[39marray(indicator_output)\u001b[38;5;241m.\u001b[39mflatten(), index\u001b[38;5;241m=\u001b[39mdf\u001b[38;5;241m.\u001b[39mindex)\n\u001b[0;32m     23\u001b[0m \u001b[38;5;66;03m# Calculate indicators\u001b[39;00m\n\u001b[1;32m---> 24\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m safe_series_conversion(RSIIndicator(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mrsi())\n\u001b[0;32m     25\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m safe_series_conversion(StochasticOscillator(\n\u001b[0;32m     26\u001b[0m     high\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m], low\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m], close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mstoch())\n\u001b[0;32m     27\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m safe_series_conversion(MACD(close\u001b[38;5;241m=\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mmacd_diff())\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\", progress=False)\n",
    "\n",
    "# Step 2: Select relevant columns\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].astype(float)\n",
    "\n",
    "# Step 3: Compute technical indicators with proper conversion\n",
    "def safe_series_conversion(indicator_output):\n",
    "    \"\"\"Convert indicator output to proper pandas Series\"\"\"\n",
    "    if isinstance(indicator_output, pd.Series):\n",
    "        return indicator_output\n",
    "    return pd.Series(np.array(indicator_output).flatten(), index=df.index)\n",
    "\n",
    "# Calculate indicators\n",
    "df['rsi'] = safe_series_conversion(RSIIndicator(close=df['Close']).rsi())\n",
    "df['stoch'] = safe_series_conversion(StochasticOscillator(\n",
    "    high=df['High'], low=df['Low'], close=df['Close']).stoch())\n",
    "df['macd'] = safe_series_conversion(MACD(close=df['Close']).macd_diff())\n",
    "df['obv'] = safe_series_conversion(OnBalanceVolumeIndicator(\n",
    "    close=df['Close'], volume=df['Volume']).on_balance_volume())\n",
    "df['sma_10'] = safe_series_conversion(SMAIndicator(\n",
    "    close=df['Close'], window=10).sma_indicator())\n",
    "df['ema_20'] = safe_series_conversion(EMAIndicator(\n",
    "    close=df['Close'], window=20).ema_indicator())\n",
    "\n",
    "# Bollinger Bands\n",
    "bb = BollingerBands(close=df['Close'])\n",
    "df['bb_bbm'] = safe_series_conversion(bb.bollinger_mavg())\n",
    "df['bb_bbh'] = safe_series_conversion(bb.bollinger_hband())\n",
    "df['bb_bbl'] = safe_series_conversion(bb.bollinger_lband())\n",
    "\n",
    "# Step 4: Create future targets\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "# Clean data\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Prepare features and targets\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 6: Train models\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "    \n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    \n",
    "    reg.fit(X, y_price)\n",
    "    clf.fit(X, y_dir)\n",
    "    \n",
    "    regressors[n] = reg\n",
    "    classifiers[n] = clf\n",
    "\n",
    "# Step 7: Make predictions\n",
    "print(\"\\n📈 IBM Stock Forecast:\")\n",
    "for n in [1, 2, 3, 5]:\n",
    "    pred_price = regressors[n].predict(X.iloc[[-1]])[0]\n",
    "    pred_dir = classifiers[n].predict(X.iloc[[-1]])[0]\n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   🔮 Predicted Close: ${pred_price:.2f}\")\n",
    "    print(f\"   📊 Direction: {'Up' if pred_dir == 1 else 'Down'}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4ee6e82e-9640-4641-9c31-9ae3644319e1",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional, got ndarray of shape (1861, 1) instead",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[10], line 50\u001b[0m\n\u001b[0;32m     43\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m (\n\u001b[0;32m     44\u001b[0m         pd\u001b[38;5;241m.\u001b[39mSeries(np\u001b[38;5;241m.\u001b[39marray(bb\u001b[38;5;241m.\u001b[39mbollinger_mavg())\u001b[38;5;241m.\u001b[39mflatten(), index\u001b[38;5;241m=\u001b[39mclose\u001b[38;5;241m.\u001b[39mindex),\n\u001b[0;32m     45\u001b[0m         pd\u001b[38;5;241m.\u001b[39mSeries(np\u001b[38;5;241m.\u001b[39marray(bb\u001b[38;5;241m.\u001b[39mbollinger_hband())\u001b[38;5;241m.\u001b[39mflatten(), index\u001b[38;5;241m=\u001b[39mclose\u001b[38;5;241m.\u001b[39mindex),\n\u001b[0;32m     46\u001b[0m         pd\u001b[38;5;241m.\u001b[39mSeries(np\u001b[38;5;241m.\u001b[39marray(bb\u001b[38;5;241m.\u001b[39mbollinger_lband())\u001b[38;5;241m.\u001b[39mflatten(), index\u001b[38;5;241m=\u001b[39mclose\u001b[38;5;241m.\u001b[39mindex)\n\u001b[0;32m     47\u001b[0m     )\n\u001b[0;32m     49\u001b[0m \u001b[38;5;66;03m# Calculate indicators\u001b[39;00m\n\u001b[1;32m---> 50\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrsi\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m calculate_rsi(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[0;32m     51\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstoch\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m calculate_stochastic(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHigh\u001b[39m\u001b[38;5;124m'\u001b[39m], df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLow\u001b[39m\u001b[38;5;124m'\u001b[39m], df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[0;32m     52\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmacd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m calculate_macd(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m])\n",
      "Cell \u001b[1;32mIn[10], line 18\u001b[0m, in \u001b[0;36mcalculate_rsi\u001b[1;34m(close)\u001b[0m\n\u001b[0;32m     17\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mcalculate_rsi\u001b[39m(close):\n\u001b[1;32m---> 18\u001b[0m     rsi \u001b[38;5;241m=\u001b[39m RSIIndicator(close\u001b[38;5;241m=\u001b[39mclose)\u001b[38;5;241m.\u001b[39mrsi()\n\u001b[0;32m     19\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m pd\u001b[38;5;241m.\u001b[39mSeries(np\u001b[38;5;241m.\u001b[39marray(rsi)\u001b[38;5;241m.\u001b[39mflatten(), index\u001b[38;5;241m=\u001b[39mclose\u001b[38;5;241m.\u001b[39mindex)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:34\u001b[0m, in \u001b[0;36mRSIIndicator.__init__\u001b[1;34m(self, close, window, fillna)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window \u001b[38;5;241m=\u001b[39m window\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fillna \u001b[38;5;241m=\u001b[39m fillna\n\u001b[1;32m---> 34\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\ta\\momentum.py:48\u001b[0m, in \u001b[0;36mRSIIndicator._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     44\u001b[0m emadn \u001b[38;5;241m=\u001b[39m down_direction\u001b[38;5;241m.\u001b[39mewm(\n\u001b[0;32m     45\u001b[0m     alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_window, min_periods\u001b[38;5;241m=\u001b[39mmin_periods, adjust\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m     46\u001b[0m )\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     47\u001b[0m relative_strength \u001b[38;5;241m=\u001b[39m emaup \u001b[38;5;241m/\u001b[39m emadn\n\u001b[1;32m---> 48\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_rsi \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(\n\u001b[0;32m     49\u001b[0m     np\u001b[38;5;241m.\u001b[39mwhere(emadn \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;241m100\u001b[39m \u001b[38;5;241m-\u001b[39m (\u001b[38;5;241m100\u001b[39m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m relative_strength))),\n\u001b[0;32m     50\u001b[0m     index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_close\u001b[38;5;241m.\u001b[39mindex,\n\u001b[0;32m     51\u001b[0m )\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\series.py:584\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    582\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    583\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 584\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    586\u001b[0m     manager \u001b[38;5;241m=\u001b[39m _get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m, silent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:659\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, allow_2d)\u001b[0m\n\u001b[0;32m    656\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, subarr)\n\u001b[0;32m    657\u001b[0m             subarr \u001b[38;5;241m=\u001b[39m maybe_infer_to_datetimelike(subarr)\n\u001b[1;32m--> 659\u001b[0m subarr \u001b[38;5;241m=\u001b[39m _sanitize_ndim(subarr, data, dtype, index, allow_2d\u001b[38;5;241m=\u001b[39mallow_2d)\n\u001b[0;32m    661\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(subarr, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;66;03m# at this point we should have dtype be None or subarr.dtype == dtype\u001b[39;00m\n\u001b[0;32m    663\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mdtype, dtype)\n",
      "File \u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\construction.py:718\u001b[0m, in \u001b[0;36m_sanitize_ndim\u001b[1;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[0;32m    716\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m allow_2d:\n\u001b[0;32m    717\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m--> 718\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    719\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData must be 1-dimensional, got ndarray of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    720\u001b[0m     )\n\u001b[0;32m    721\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_object_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, ExtensionDtype):\n\u001b[0;32m    722\u001b[0m     \u001b[38;5;66;03m# i.e. NumpyEADtype(\"O\")\u001b[39;00m\n\u001b[0;32m    724\u001b[0m     result \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39masarray_tuplesafe(data, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mdtype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: Data must be 1-dimensional, got ndarray of shape (1861, 1) instead"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\", progress=False)\n",
    "\n",
    "# Step 2: Select relevant columns\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].astype(float)\n",
    "\n",
    "# Step 3: Compute technical indicators with proper conversion\n",
    "def calculate_rsi(close):\n",
    "    rsi = RSIIndicator(close=close).rsi()\n",
    "    return pd.Series(np.array(rsi).flatten(), index=close.index)\n",
    "\n",
    "def calculate_stochastic(high, low, close):\n",
    "    stoch = StochasticOscillator(high=high, low=low, close=close).stoch()\n",
    "    return pd.Series(np.array(stoch).flatten(), index=close.index)\n",
    "\n",
    "def calculate_macd(close):\n",
    "    macd = MACD(close=close).macd_diff()\n",
    "    return pd.Series(np.array(macd).flatten(), index=close.index)\n",
    "\n",
    "def calculate_obv(close, volume):\n",
    "    obv = OnBalanceVolumeIndicator(close=close, volume=volume).on_balance_volume()\n",
    "    return pd.Series(np.array(obv).flatten(), index=close.index)\n",
    "\n",
    "def calculate_sma(close, window):\n",
    "    sma = SMAIndicator(close=close, window=window).sma_indicator()\n",
    "    return pd.Series(np.array(sma).flatten(), index=close.index)\n",
    "\n",
    "def calculate_ema(close, window):\n",
    "    ema = EMAIndicator(close=close, window=window).ema_indicator()\n",
    "    return pd.Series(np.array(ema).flatten(), index=close.index)\n",
    "\n",
    "def calculate_bollinger_bands(close):\n",
    "    bb = BollingerBands(close=close)\n",
    "    return (\n",
    "        pd.Series(np.array(bb.bollinger_mavg()).flatten(), index=close.index),\n",
    "        pd.Series(np.array(bb.bollinger_hband()).flatten(), index=close.index),\n",
    "        pd.Series(np.array(bb.bollinger_lband()).flatten(), index=close.index)\n",
    "    )\n",
    "\n",
    "# Calculate indicators\n",
    "df['rsi'] = calculate_rsi(df['Close'])\n",
    "df['stoch'] = calculate_stochastic(df['High'], df['Low'], df['Close'])\n",
    "df['macd'] = calculate_macd(df['Close'])\n",
    "df['obv'] = calculate_obv(df['Close'], df['Volume'])\n",
    "df['sma_10'] = calculate_sma(df['Close'], 10)\n",
    "df['ema_20'] = calculate_ema(df['Close'], 20)\n",
    "\n",
    "bb_mavg, bb_hband, bb_lband = calculate_bollinger_bands(df['Close'])\n",
    "df['bb_bbm'] = bb_mavg\n",
    "df['bb_bbh'] = bb_hband\n",
    "df['bb_bbl'] = bb_lband\n",
    "\n",
    "# Step 4: Create future targets\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "# Clean data\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Prepare features and targets\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 6: Train models\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "    \n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    \n",
    "    reg.fit(X, y_price)\n",
    "    clf.fit(X, y_dir)\n",
    "    \n",
    "    regressors[n] = reg\n",
    "    classifiers[n] = clf\n",
    "\n",
    "# Step 7: Make predictions\n",
    "print(\"\\n📈 IBM Stock Forecast:\")\n",
    "for n in [1, 2, 3, 5]:\n",
    "    pred_price = regressors[n].predict(X.iloc[[-1]])[0]\n",
    "    pred_dir = classifiers[n].predict(X.iloc[[-1]])[0]\n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   🔮 Predicted Close: ${pred_price:.2f}\")\n",
    "    print(f\"   📊 Direction: {'Up' if pred_dir == 1 else 'Down'}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6805e9b9-e09d-41e3-8216-dc0e956bddbc",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📊 IBM 5-Day Forecast\n",
      "📈 Predicted price in 5 days: $260.37\n",
      "📉 Predicted direction: Down\n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Force flatten all columns to Series\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators — use .values.ravel() or .squeeze() to ensure 1D inputs\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(), \n",
    "    low=df['Low'].squeeze(), \n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(), \n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Target for prediction\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "df['dir_5d'] = (df['next_5d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Train model\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "y_price = df['next_5d_close']\n",
    "y_dir = df['dir_5d']\n",
    "\n",
    "regressor = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "\n",
    "regressor.fit(X, y_price)\n",
    "classifier.fit(X, y_dir)\n",
    "\n",
    "# Step 6: Predict\n",
    "latest_data = X.iloc[-1:]\n",
    "predicted_price = regressor.predict(latest_data)[0]\n",
    "predicted_direction = classifier.predict(latest_data)[0]\n",
    "\n",
    "# Step 7: Results\n",
    "print(\"\\n📊 IBM 5-Day Forecast\")\n",
    "print(f\"📈 Predicted price in 5 days: ${predicted_price:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "25c6abca-cec1-4e28-b196-169b7ce457ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Operands are not aligned. Do `left, right = left.align(right, axis=1, copy=False)` before operating.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_35308\\1471021807.py\u001b[0m in \u001b[0;36m?\u001b[1;34m()\u001b[0m\n\u001b[0;32m     38\u001b[0m \u001b[1;31m# Step 4: Create targets for multiple forecast horizons\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     39\u001b[0m \u001b[0mforecast_days\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m5\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     40\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mn\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mforecast_days\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     41\u001b[0m     \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mnext_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md_close\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Close'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshift\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 42\u001b[1;33m     \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mdir_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mnext_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md_close\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m>\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Close'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mint\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     43\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     44\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minplace\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     45\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\ops\\common.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other)\u001b[0m\n\u001b[0;32m     72\u001b[0m                     \u001b[1;32mreturn\u001b[0m \u001b[0mNotImplemented\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     73\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     74\u001b[0m         \u001b[0mother\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mitem_from_zerodim\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     75\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 76\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\arraylike.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other)\u001b[0m\n\u001b[0;32m     46\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"__lt__\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     47\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__lt__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 48\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_cmp_method\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0moperator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlt\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other, op)\u001b[0m\n\u001b[0;32m   7894\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_cmp_method\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mop\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7895\u001b[0m         \u001b[0maxis\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mLiteral\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1\u001b[0m  \u001b[1;31m# only relevant for Series other case\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7896\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 7897\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_align_for_op\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mflex\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   7898\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7899\u001b[0m         \u001b[1;31m# See GH#4537 for discussion of scalar op behavior\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7900\u001b[0m         \u001b[0mnew_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_dispatch_frame_op\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mop\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other, axis, flex, level)\u001b[0m\n\u001b[0;32m   8201\u001b[0m             \u001b[1;31m# axis=1 is default for DataFrame-with-Series op\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8202\u001b[0m             \u001b[0maxis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maxis\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m \u001b[1;32melse\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8203\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mflex\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8204\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mleft\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mequals\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mright\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 8205\u001b[1;33m                     raise ValueError(\n\u001b[0m\u001b[0;32m   8206\u001b[0m                         \u001b[1;34m\"Operands are not aligned. Do \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8207\u001b[0m                         \u001b[1;34m\"`left, right = left.align(right, axis=1, copy=False)` \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8208\u001b[0m                         \u001b[1;34m\"before operating.\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: Operands are not aligned. Do `left, right = left.align(right, axis=1, copy=False)` before operating."
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(), \n",
    "    low=df['Low'].squeeze(), \n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(), \n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Create targets for multiple forecast horizons\n",
    "forecast_days = [1, 2, 3, 5]\n",
    "for n in forecast_days:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Prepare feature matrix\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 6: Train models for each forecast horizon\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in forecast_days:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "\n",
    "    reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "\n",
    "    reg.fit(X, y_price)\n",
    "    clf.fit(X, y_dir)\n",
    "\n",
    "    regressors[n] = reg\n",
    "    classifiers[n] = clf\n",
    "\n",
    "# Step 7: Predict using the latest data\n",
    "latest_data = X.iloc[[-1]]\n",
    "\n",
    "print(\"\\n📊 IBM Stock Forecasts:\")\n",
    "for n in forecast_days:\n",
    "    pred_price = regressors[n].predict(latest_data)[0]\n",
    "    pred_dir = classifiers[n].predict(latest_data)[0]\n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   📈 Predicted Close: ${pred_price:.2f}\")\n",
    "    print(f\"   📊 Direction: {'Up' if pred_dir == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6e949dc7-7016-45fc-bf00-933fb16da757",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📊 IBM Stock Forecast\n",
      "---------------------\n",
      "\n",
      "⏳ 1-Day Forecast:\n",
      "   💰 Predicted price: $266.79\n",
      "   📈 Direction: Down\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "unsupported format string passed to Series.__format__",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[13], line 83\u001b[0m\n\u001b[0;32m     81\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m   💰 Predicted price: $\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpredicted_price\u001b[38;5;132;01m:\u001b[39;00m\u001b[38;5;124m.2f\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     82\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m   📈 Direction: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mUp\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mif\u001b[39;00m\u001b[38;5;250m \u001b[39mpredicted_direction\u001b[38;5;250m \u001b[39m\u001b[38;5;241m==\u001b[39m\u001b[38;5;250m \u001b[39m\u001b[38;5;241m1\u001b[39m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01melse\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mDown\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m---> 83\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m   ℹ️ Current price: $\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39miloc[\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m]\u001b[38;5;132;01m:\u001b[39;00m\u001b[38;5;124m.2f\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     84\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m n \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m     85\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m   🔄 Potential change: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m(predicted_price\u001b[38;5;241m/\u001b[39mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39miloc[\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m]\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m)\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m100\u001b[39m\u001b[38;5;132;01m:\u001b[39;00m\u001b[38;5;124m.2f\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m%\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported format string passed to Series.__format__"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Force flatten all columns to Series\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators — use .values.ravel() or .squeeze() to ensure 1D inputs\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(), \n",
    "    low=df['Low'].squeeze(), \n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(), \n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Create targets for multiple horizons\n",
    "for n in [1, 2, 3, 5]:  # Added 1-day, 2-day, and 3-day targets\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Prepare features\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 6: Train models for each horizon\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "    \n",
    "    regressor = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    \n",
    "    regressor.fit(X, y_price)\n",
    "    classifier.fit(X, y_dir)\n",
    "    \n",
    "    regressors[n] = regressor\n",
    "    classifiers[n] = classifier\n",
    "\n",
    "# Step 7: Predict for all horizons\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "print(\"\\n📊 IBM Stock Forecast\")\n",
    "print(\"---------------------\")\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    predicted_price = regressors[n].predict(latest_data)[0]\n",
    "    predicted_direction = classifiers[n].predict(latest_data)[0]\n",
    "    \n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   💰 Predicted price: ${predicted_price:.2f}\")\n",
    "    print(f\"   📈 Direction: {'Up' if predicted_direction == 1 else 'Down'}\")\n",
    "    print(f\"   ℹ️ Current price: ${df['Close'].iloc[-1]:.2f}\")\n",
    "    if n == 1:\n",
    "        print(f\"   🔄 Potential change: {(predicted_price/df['Close'].iloc[-1]-1)*100:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c53dae31-ffc7-4fa2-9653-27867907271d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Operands are not aligned. Do `left, right = left.align(right, axis=1, copy=False)` before operating.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_35308\\3202758234.py\u001b[0m in \u001b[0;36m?\u001b[1;34m()\u001b[0m\n\u001b[0;32m     41\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     42\u001b[0m \u001b[1;31m# Step 4: Create targets for multiple horizons\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     43\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mn\u001b[0m \u001b[1;32min\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m5\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     44\u001b[0m     \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mnext_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md_close\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Close'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshift\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 45\u001b[1;33m     \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mdir_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mnext_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md_close\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m>\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Close'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mint\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     46\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     47\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minplace\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     48\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\ops\\common.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other)\u001b[0m\n\u001b[0;32m     72\u001b[0m                     \u001b[1;32mreturn\u001b[0m \u001b[0mNotImplemented\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     73\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     74\u001b[0m         \u001b[0mother\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mitem_from_zerodim\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     75\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 76\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\arraylike.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other)\u001b[0m\n\u001b[0;32m     46\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"__lt__\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     47\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__lt__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 48\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_cmp_method\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0moperator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlt\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other, op)\u001b[0m\n\u001b[0;32m   7894\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_cmp_method\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mop\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7895\u001b[0m         \u001b[0maxis\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mLiteral\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1\u001b[0m  \u001b[1;31m# only relevant for Series other case\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7896\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 7897\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_align_for_op\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mflex\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   7898\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7899\u001b[0m         \u001b[1;31m# See GH#4537 for discussion of scalar op behavior\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7900\u001b[0m         \u001b[0mnew_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_dispatch_frame_op\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mop\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other, axis, flex, level)\u001b[0m\n\u001b[0;32m   8201\u001b[0m             \u001b[1;31m# axis=1 is default for DataFrame-with-Series op\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8202\u001b[0m             \u001b[0maxis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maxis\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m \u001b[1;32melse\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8203\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mflex\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8204\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mleft\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mequals\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mright\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 8205\u001b[1;33m                     raise ValueError(\n\u001b[0m\u001b[0;32m   8206\u001b[0m                         \u001b[1;34m\"Operands are not aligned. Do \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8207\u001b[0m                         \u001b[1;34m\"`left, right = left.align(right, axis=1, copy=False)` \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8208\u001b[0m                         \u001b[1;34m\"before operating.\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: Operands are not aligned. Do `left, right = left.align(right, axis=1, copy=False)` before operating."
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Force flatten all columns to Series\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(), \n",
    "    low=df['Low'].squeeze(), \n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(), \n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Create targets for multiple horizons\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Prepare features\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 6: Train models for each horizon\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "    \n",
    "    regressor = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    \n",
    "    regressor.fit(X, y_price)\n",
    "    classifier.fit(X, y_dir)\n",
    "    \n",
    "    regressors[n] = regressor\n",
    "    classifiers[n] = classifier\n",
    "\n",
    "# Step 7: Predict for all horizons\n",
    "latest_data = X.iloc[-1:]\n",
    "current_price = float(df['Close'].iloc[-1])  # Convert to float explicitly\n",
    "\n",
    "print(\"\\n📊 IBM Stock Forecast\")\n",
    "print(\"---------------------\")\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    predicted_price = float(regressors[n].predict(latest_data)[0])  # Ensure float type\n",
    "    predicted_direction = classifiers[n].predict(latest_data)[0]\n",
    "    \n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   💰 Predicted price: ${predicted_price:.2f}\")\n",
    "    print(f\"   📈 Direction: {'Up' if predicted_direction == 1 else 'Down'}\")\n",
    "    print(f\"   ℹ️ Current price: ${current_price:.2f}\")\n",
    "    if n == 1:\n",
    "        print(f\"   🔄 Potential change: {(predicted_price/current_price-1)*100:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "269b05dd-41d3-4e79-a5d1-5d1b7da05753",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (2716665742.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[15], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    [*********************100%***********************]  1 of 1 completed\u001b[0m\n\u001b[1;37m     ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "[*********************100%***********************]  1 of 1 completed\n",
    "---------------------------------------------------------------------------\n",
    "ValueError                                Traceback (most recent call last)\n",
    "~\\AppData\\Local\\Temp\\ipykernel_35308\\3202758234.py in ?()\n",
    "     41 \n",
    "     42 # Step 4: Create targets for multiple horizons\n",
    "     43 for n in [1, 2, 3, 5]:\n",
    "     44     df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "---> 45     df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "     46 \n",
    "     47 df.dropna(inplace=True)\n",
    "     48 \n",
    "\n",
    "~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\ops\\common.py in ?(self, other)\n",
    "     72                     return NotImplemented\n",
    "     73 \n",
    "     74         other = item_from_zerodim(other)\n",
    "     75 \n",
    "---> 76         return method(self, other)\n",
    "\n",
    "~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\arraylike.py in ?(self, other)\n",
    "     46     @unpack_zerodim_and_defer(\"__lt__\")\n",
    "     47     def __lt__(self, other):\n",
    "---> 48         return self._cmp_method(other, operator.lt)\n",
    "\n",
    "~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\frame.py in ?(self, other, op)\n",
    "   7894     def _cmp_method(self, other, op):\n",
    "   7895         axis: Literal[1] = 1  # only relevant for Series other case\n",
    "   7896 \n",
    "-> 7897         self, other = self._align_for_op(other, axis, flex=False, level=None)\n",
    "   7898 \n",
    "   7899         # See GH#4537 for discussion of scalar op behavior\n",
    "   7900         new_data = self._dispatch_frame_op(other, op, axis=axis)\n",
    "\n",
    "~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\frame.py in ?(self, other, axis, flex, level)\n",
    "   8201             # axis=1 is default for DataFrame-with-Series op\n",
    "   8202             axis = axis if axis is not None else 1\n",
    "   8203             if not flex:\n",
    "   8204                 if not left.axes[axis].equals(right.index):\n",
    "-> 8205                     raise ValueError(\n",
    "   8206                         \"Operands are not aligned. Do \"\n",
    "   8207                         \"`left, right = left.align(right, axis=1, copy=False)` \"\n",
    "   8208                         \"before operating.\"\n",
    "\n",
    "ValueError: Operands are not aligned. Do `left, right = left.align(right, axis=1, copy=False)` before operating.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "46357ae2-d25b-4da7-a233-11370711a1b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Operands are not aligned. Do `left, right = left.align(right, axis=1, copy=False)` before operating.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_35308\\3202758234.py\u001b[0m in \u001b[0;36m?\u001b[1;34m()\u001b[0m\n\u001b[0;32m     41\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     42\u001b[0m \u001b[1;31m# Step 4: Create targets for multiple horizons\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     43\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mn\u001b[0m \u001b[1;32min\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m5\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     44\u001b[0m     \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mnext_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md_close\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Close'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshift\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 45\u001b[1;33m     \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mdir_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mnext_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md_close\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m>\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Close'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mint\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     46\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     47\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minplace\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     48\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\ops\\common.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other)\u001b[0m\n\u001b[0;32m     72\u001b[0m                     \u001b[1;32mreturn\u001b[0m \u001b[0mNotImplemented\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     73\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     74\u001b[0m         \u001b[0mother\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mitem_from_zerodim\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     75\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 76\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\arraylike.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other)\u001b[0m\n\u001b[0;32m     46\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"__lt__\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     47\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__lt__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 48\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_cmp_method\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0moperator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlt\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other, op)\u001b[0m\n\u001b[0;32m   7894\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_cmp_method\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mop\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7895\u001b[0m         \u001b[0maxis\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mLiteral\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1\u001b[0m  \u001b[1;31m# only relevant for Series other case\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7896\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 7897\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_align_for_op\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mflex\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   7898\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7899\u001b[0m         \u001b[1;31m# See GH#4537 for discussion of scalar op behavior\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7900\u001b[0m         \u001b[0mnew_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_dispatch_frame_op\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mop\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other, axis, flex, level)\u001b[0m\n\u001b[0;32m   8201\u001b[0m             \u001b[1;31m# axis=1 is default for DataFrame-with-Series op\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8202\u001b[0m             \u001b[0maxis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maxis\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m \u001b[1;32melse\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8203\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mflex\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8204\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mleft\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mequals\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mright\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 8205\u001b[1;33m                     raise ValueError(\n\u001b[0m\u001b[0;32m   8206\u001b[0m                         \u001b[1;34m\"Operands are not aligned. Do \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8207\u001b[0m                         \u001b[1;34m\"`left, right = left.align(right, axis=1, copy=False)` \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8208\u001b[0m                         \u001b[1;34m\"before operating.\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: Operands are not aligned. Do `left, right = left.align(right, axis=1, copy=False)` before operating."
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Force flatten all columns to Series\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(), \n",
    "    low=df['Low'].squeeze(), \n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(), \n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Create targets for multiple horizons\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    df[f'dir_{n}d'] = (df[f'next_{n}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Prepare features\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 6: Train models for each horizon\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "    \n",
    "    regressor = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    \n",
    "    regressor.fit(X, y_price)\n",
    "    classifier.fit(X, y_dir)\n",
    "    \n",
    "    regressors[n] = regressor\n",
    "    classifiers[n] = classifier\n",
    "\n",
    "# Step 7: Predict for all horizons\n",
    "latest_data = X.iloc[-1:]\n",
    "current_price = float(df['Close'].iloc[-1])  # Convert to float explicitly\n",
    "\n",
    "print(\"\\n📊 IBM Stock Forecast\")\n",
    "print(\"---------------------\")\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    predicted_price = float(regressors[n].predict(latest_data)[0])  # Ensure float type\n",
    "    predicted_direction = classifiers[n].predict(latest_data)[0]\n",
    "    \n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   💰 Predicted price: ${predicted_price:.2f}\")\n",
    "    print(f\"   📈 Direction: {'Up' if predicted_direction == 1 else 'Down'}\")\n",
    "    print(f\"   ℹ️ Current price: ${current_price:.2f}\")\n",
    "    if n == 1:\n",
    "        print(f\"   🔄 Potential change: {(predicted_price/current_price-1)*100:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6c00aca4-1d83-47c7-b61a-aa2e968fd83d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Operands are not aligned. Do `left, right = left.align(right, axis=1, copy=False)` before operating.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_35308\\1292447268.py\u001b[0m in \u001b[0;36m?\u001b[1;34m()\u001b[0m\n\u001b[0;32m     43\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mn\u001b[0m \u001b[1;32min\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m5\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     44\u001b[0m     \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mnext_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md_close\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Close'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshift\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     45\u001b[0m     \u001b[1;31m# Ensure proper alignment before comparison\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     46\u001b[0m     \u001b[0maligned_next\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maligned_close\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mnext_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md_close\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0malign\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Close'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 47\u001b[1;33m     \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33mf'\u001b[0m\u001b[1;33mdir_\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33md\u001b[0m\u001b[1;33m'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0maligned_next\u001b[0m \u001b[1;33m>\u001b[0m \u001b[0maligned_close\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mint\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     48\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     49\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minplace\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     50\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\ops\\common.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other)\u001b[0m\n\u001b[0;32m     72\u001b[0m                     \u001b[1;32mreturn\u001b[0m \u001b[0mNotImplemented\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     73\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     74\u001b[0m         \u001b[0mother\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mitem_from_zerodim\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     75\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 76\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\arraylike.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other)\u001b[0m\n\u001b[0;32m     46\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"__lt__\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     47\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__lt__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 48\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_cmp_method\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0moperator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlt\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other, op)\u001b[0m\n\u001b[0;32m   7894\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_cmp_method\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mop\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7895\u001b[0m         \u001b[0maxis\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mLiteral\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1\u001b[0m  \u001b[1;31m# only relevant for Series other case\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7896\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 7897\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mother\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_align_for_op\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mflex\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   7898\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7899\u001b[0m         \u001b[1;31m# See GH#4537 for discussion of scalar op behavior\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   7900\u001b[0m         \u001b[0mnew_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_dispatch_frame_op\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mother\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mop\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Desktop\\sample_project\\env\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, other, axis, flex, level)\u001b[0m\n\u001b[0;32m   8201\u001b[0m             \u001b[1;31m# axis=1 is default for DataFrame-with-Series op\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8202\u001b[0m             \u001b[0maxis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maxis\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m \u001b[1;32melse\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8203\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mflex\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8204\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mleft\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mequals\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mright\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 8205\u001b[1;33m                     raise ValueError(\n\u001b[0m\u001b[0;32m   8206\u001b[0m                         \u001b[1;34m\"Operands are not aligned. Do \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8207\u001b[0m                         \u001b[1;34m\"`left, right = left.align(right, axis=1, copy=False)` \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8208\u001b[0m                         \u001b[1;34m\"before operating.\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: Operands are not aligned. Do `left, right = left.align(right, axis=1, copy=False)` before operating."
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Force flatten all columns to Series\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(), \n",
    "    low=df['Low'].squeeze(), \n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(), \n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Create targets for multiple horizons\n",
    "for n in [1, 2, 3, 5]:\n",
    "    df[f'next_{n}d_close'] = df['Close'].shift(-n)\n",
    "    # Ensure proper alignment before comparison\n",
    "    aligned_next, aligned_close = df[f'next_{n}d_close'].align(df['Close'])\n",
    "    df[f'dir_{n}d'] = (aligned_next > aligned_close).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Prepare features\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# Step 6: Train models for each horizon\n",
    "regressors = {}\n",
    "classifiers = {}\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    y_price = df[f'next_{n}d_close']\n",
    "    y_dir = df[f'dir_{n}d']\n",
    "    \n",
    "    regressor = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    \n",
    "    regressor.fit(X, y_price)\n",
    "    classifier.fit(X, y_dir)\n",
    "    \n",
    "    regressors[n] = regressor\n",
    "    classifiers[n] = classifier\n",
    "\n",
    "# Step 7: Predict for all horizons\n",
    "latest_data = X.iloc[-1:]\n",
    "current_price = float(df['Close'].iloc[-1])  # Convert to float explicitly\n",
    "\n",
    "print(\"\\n📊 IBM Stock Forecast\")\n",
    "print(\"---------------------\")\n",
    "\n",
    "for n in [1, 2, 3, 5]:\n",
    "    predicted_price = float(regressors[n].predict(latest_data)[0])  # Ensure float type\n",
    "    predicted_direction = classifiers[n].predict(latest_data)[0]\n",
    "    \n",
    "    print(f\"\\n⏳ {n}-Day Forecast:\")\n",
    "    print(f\"   💰 Predicted price: ${predicted_price:.2f}\")\n",
    "    print(f\"   📈 Direction: {'Up' if predicted_direction == 1 else 'Down'}\")\n",
    "    print(f\"   ℹ️ Current price: ${current_price:.2f}\")\n",
    "    if n == 1:\n",
    "        print(f\"   🔄 Potential change: {(predicted_price/current_price-1)*100:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "199d24ca-c602-43f5-945e-df418b94e1fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📊 IBM 5-Day Forecast\n",
      "📈 Predicted price in 5 days: $260.23\n",
      "📉 Predicted direction: Down\n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Force flatten all columns to Series\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators — use .values.ravel() or .squeeze() to ensure 1D inputs\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(), \n",
    "    low=df['Low'].squeeze(), \n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(), \n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Target for prediction\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "df['dir_5d'] = (df['next_5d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Train model\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "y_price = df['next_5d_close']\n",
    "y_dir = df['dir_5d']\n",
    "\n",
    "regressor = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "\n",
    "regressor.fit(X, y_price)\n",
    "classifier.fit(X, y_dir)\n",
    "\n",
    "# Step 6: Predict\n",
    "latest_data = X.iloc[-1:]\n",
    "predicted_price = regressor.predict(latest_data)[0]\n",
    "predicted_direction = classifier.predict(latest_data)[0]\n",
    "\n",
    "# Step 7: Results\n",
    "print(\"\\n📊 IBM 5-Day Forecast\")\n",
    "print(f\"📈 Predicted price in 5 days: ${predicted_price:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction == 1 else 'Down'}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5944e9e3-2557-4f03-8630-78d9eec86da3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📊 IBM Forecast\n",
      "\n",
      "🗓️ 1-Day Forecast\n",
      "📈 Predicted price in 1 day: $262.41\n",
      "📉 Predicted direction: Down\n",
      "\n",
      "🗓️ 2-Day Forecast\n",
      "📈 Predicted price in 2 days: $259.84\n",
      "📉 Predicted direction: Down\n",
      "\n",
      "🗓️ 5-Day Forecast\n",
      "📈 Predicted price in 5 days: $260.20\n",
      "📉 Predicted direction: Down\n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Force flatten all columns to Series\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators — use .values.ravel() or .squeeze() to ensure 1D inputs\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(),\n",
    "    low=df['Low'].squeeze(),\n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(),\n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Target for prediction\n",
    "# 1-day prediction\n",
    "df['next_1d_close'] = df['Close'].shift(-1)\n",
    "df['dir_1d'] = (df['next_1d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 2-day prediction\n",
    "df['next_2d_close'] = df['Close'].shift(-2)\n",
    "df['dir_2d'] = (df['next_2d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 5-day prediction\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "df['dir_5d'] = (df['next_5d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Train model\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# 1-day prediction models\n",
    "y_price_1d = df['next_1d_close']\n",
    "y_dir_1d = df['dir_1d']\n",
    "regressor_1d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_1d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_1d.fit(X, y_price_1d)\n",
    "classifier_1d.fit(X, y_dir_1d)\n",
    "\n",
    "# 2-day prediction models\n",
    "y_price_2d = df['next_2d_close']\n",
    "y_dir_2d = df['dir_2d']\n",
    "regressor_2d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_2d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_2d.fit(X, y_price_2d)\n",
    "classifier_2d.fit(X, y_dir_2d)\n",
    "\n",
    "# 5-day prediction models\n",
    "y_price_5d = df['next_5d_close']\n",
    "y_dir_5d = df['dir_5d']\n",
    "regressor_5d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_5d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_5d.fit(X, y_price_5d)\n",
    "classifier_5d.fit(X, y_dir_5d)\n",
    "\n",
    "# Step 6: Predict\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "# 1-day prediction\n",
    "predicted_price_1d = regressor_1d.predict(latest_data)[0]\n",
    "predicted_direction_1d = classifier_1d.predict(latest_data)[0]\n",
    "\n",
    "# 2-day prediction\n",
    "predicted_price_2d = regressor_2d.predict(latest_data)[0]\n",
    "predicted_direction_2d = classifier_2d.predict(latest_data)[0]\n",
    "\n",
    "# 5-day prediction\n",
    "predicted_price_5d = regressor_5d.predict(latest_data)[0]\n",
    "predicted_direction_5d = classifier_5d.predict(latest_data)[0]\n",
    "\n",
    "# Step 7: Results\n",
    "print(\"\\n📊 IBM Forecast\")\n",
    "print(\"\\n🗓️ 1-Day Forecast\")\n",
    "print(f\"📈 Predicted price in 1 day: ${predicted_price_1d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_1d == 1 else 'Down'}\")\n",
    "\n",
    "print(\"\\n🗓️ 2-Day Forecast\")\n",
    "print(f\"📈 Predicted price in 2 days: ${predicted_price_2d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_2d == 1 else 'Down'}\")\n",
    "\n",
    "print(\"\\n🗓️ 5-Day Forecast\")\n",
    "print(f\"📈 Predicted price in 5 days: ${predicted_price_5d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_5d == 1 else 'Down'}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "aff64bb1-9729-4e72-a7a5-964424a045e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📊 PANW Forecast\n",
      "\n",
      "🗓️ 1-Day Forecast\n",
      "📈 Predicted price in 1 day: $188.75\n",
      "📉 Predicted direction: Down\n",
      "\n",
      "🗓️ 2-Day Forecast\n",
      "📈 Predicted price in 2 days: $190.29\n",
      "📉 Predicted direction: Down\n",
      "\n",
      "🗓️ 3-Day Forecast\n",
      "📈 Predicted price in 3 days: $191.60\n",
      "📉 Predicted direction: Down\n",
      "\n",
      "🗓️ 4-Day Forecast\n",
      "📈 Predicted price in 4 days: $190.69\n",
      "📉 Predicted direction: Down\n",
      "\n",
      "🗓️ 5-Day Forecast\n",
      "📈 Predicted price in 5 days: $190.80\n",
      "📉 Predicted direction: Down\n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"PANW\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Force flatten all columns to Series\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators — use .values.ravel() or .squeeze() to ensure 1D inputs\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(),\n",
    "    low=df['Low'].squeeze(),\n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(),\n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Target for prediction\n",
    "# 1-day prediction\n",
    "df['next_1d_close'] = df['Close'].shift(-1)\n",
    "df['dir_1d'] = (df['next_1d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 2-day prediction\n",
    "df['next_2d_close'] = df['Close'].shift(-2)\n",
    "df['dir_2d'] = (df['next_2d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 3-day prediction\n",
    "df['next_3d_close'] = df['Close'].shift(-3)\n",
    "df['dir_3d'] = (df['next_3d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 4-day prediction\n",
    "df['next_4d_close'] = df['Close'].shift(-4)\n",
    "df['dir_4d'] = (df['next_4d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 5-day prediction\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "df['dir_5d'] = (df['next_5d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Train model\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# 1-day prediction models\n",
    "y_price_1d = df['next_1d_close']\n",
    "y_dir_1d = df['dir_1d']\n",
    "regressor_1d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_1d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_1d.fit(X, y_price_1d)\n",
    "classifier_1d.fit(X, y_dir_1d)\n",
    "\n",
    "# 2-day prediction models\n",
    "y_price_2d = df['next_2d_close']\n",
    "y_dir_2d = df['dir_2d']\n",
    "regressor_2d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_2d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_2d.fit(X, y_price_2d)\n",
    "classifier_2d.fit(X, y_dir_2d)\n",
    "\n",
    "# 3-day prediction models\n",
    "y_price_3d = df['next_3d_close']\n",
    "y_dir_3d = df['dir_3d']\n",
    "regressor_3d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_3d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_3d.fit(X, y_price_3d)\n",
    "classifier_3d.fit(X, y_dir_3d)\n",
    "\n",
    "# 4-day prediction models\n",
    "y_price_4d = df['next_4d_close']\n",
    "y_dir_4d = df['dir_4d']\n",
    "regressor_4d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_4d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_4d.fit(X, y_price_4d)\n",
    "classifier_4d.fit(X, y_dir_4d)\n",
    "\n",
    "# 5-day prediction models\n",
    "y_price_5d = df['next_5d_close']\n",
    "y_dir_5d = df['dir_5d']\n",
    "regressor_5d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_5d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_5d.fit(X, y_price_5d)\n",
    "classifier_5d.fit(X, y_dir_5d)\n",
    "\n",
    "# Step 6: Predict\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "# 1-day prediction\n",
    "predicted_price_1d = regressor_1d.predict(latest_data)[0]\n",
    "predicted_direction_1d = classifier_1d.predict(latest_data)[0]\n",
    "\n",
    "# 2-day prediction\n",
    "predicted_price_2d = regressor_2d.predict(latest_data)[0]\n",
    "predicted_direction_2d = classifier_2d.predict(latest_data)[0]\n",
    "\n",
    "# 3-day prediction\n",
    "predicted_price_3d = regressor_3d.predict(latest_data)[0]\n",
    "predicted_direction_3d = classifier_3d.predict(latest_data)[0]\n",
    "\n",
    "# 4-day prediction\n",
    "predicted_price_4d = regressor_4d.predict(latest_data)[0]\n",
    "predicted_direction_4d = classifier_4d.predict(latest_data)[0]\n",
    "\n",
    "# 5-day prediction\n",
    "predicted_price_5d = regressor_5d.predict(latest_data)[0]\n",
    "predicted_direction_5d = classifier_5d.predict(latest_data)[0]\n",
    "\n",
    "# Step 7: Results\n",
    "print(\"\\n📊 PANW Forecast\")\n",
    "\n",
    "print(\"\\n🗓️ 1-Day Forecast\")\n",
    "print(f\"📈 Predicted price in 1 day: ${predicted_price_1d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_1d == 1 else 'Down'}\")\n",
    "\n",
    "print(\"\\n🗓️ 2-Day Forecast\")\n",
    "print(f\"📈 Predicted price in 2 days: ${predicted_price_2d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_2d == 1 else 'Down'}\")\n",
    "\n",
    "print(\"\\n🗓️ 3-Day Forecast\")\n",
    "print(f\"📈 Predicted price in 3 days: ${predicted_price_3d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_3d == 1 else 'Down'}\")\n",
    "\n",
    "print(\"\\n🗓️ 4-Day Forecast\")\n",
    "print(f\"📈 Predicted price in 4 days: ${predicted_price_4d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_4d == 1 else 'Down'}\")\n",
    "\n",
    "print(\"\\n🗓️ 5-Day Forecast\")\n",
    "print(f\"📈 Predicted price in 5 days: ${predicted_price_5d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_5d == 1 else 'Down'}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2e0a1fdc-24b9-4aff-863f-abd90b71332a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📊 IBM Forecast\n",
      "\n",
      "--- Debugging Information ---\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "unsupported format string passed to Series.__format__",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[22], line 136\u001b[0m\n\u001b[0;32m    133\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m📊 IBM Forecast\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    135\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m--- Debugging Information ---\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m--> 136\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLatest Closing Price (from X): $\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39miloc[\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m]\u001b[38;5;132;01m:\u001b[39;00m\u001b[38;5;124m.2f\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    137\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPredicted Price (1-day): $\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpredicted_price_1d\u001b[38;5;132;01m:\u001b[39;00m\u001b[38;5;124m.2f\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    138\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPredicted Direction (1-day): \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mUp\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mif\u001b[39;00m\u001b[38;5;250m \u001b[39mpredicted_direction_1d\u001b[38;5;250m \u001b[39m\u001b[38;5;241m==\u001b[39m\u001b[38;5;250m \u001b[39m\u001b[38;5;241m1\u001b[39m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01melse\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mDown\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported format string passed to Series.__format__"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Force flatten all columns to Series\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators — use .values.ravel() or .squeeze() to ensure 1D inputs\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(),\n",
    "    low=df['Low'].squeeze(),\n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(),\n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Target for prediction\n",
    "# 1-day prediction\n",
    "df['next_1d_close'] = df['Close'].shift(-1)\n",
    "df['dir_1d'] = (df['next_1d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 2-day prediction\n",
    "df['next_2d_close'] = df['Close'].shift(-2)\n",
    "df['dir_2d'] = (df['next_2d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 3-day prediction\n",
    "df['next_3d_close'] = df['Close'].shift(-3)\n",
    "df['dir_3d'] = (df['next_3d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 4-day prediction\n",
    "df['next_4d_close'] = df['Close'].shift(-4)\n",
    "df['dir_4d'] = (df['next_4d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 5-day prediction\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "df['dir_5d'] = (df['next_5d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Train model\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# 1-day prediction models\n",
    "y_price_1d = df['next_1d_close']\n",
    "y_dir_1d = df['dir_1d']\n",
    "regressor_1d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_1d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_1d.fit(X, y_price_1d)\n",
    "classifier_1d.fit(X, y_dir_1d)\n",
    "\n",
    "# 2-day prediction models\n",
    "y_price_2d = df['next_2d_close']\n",
    "y_dir_2d = df['dir_2d']\n",
    "regressor_2d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_2d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_2d.fit(X, y_price_2d)\n",
    "classifier_2d.fit(X, y_dir_2d)\n",
    "\n",
    "# 3-day prediction models\n",
    "y_price_3d = df['next_3d_close']\n",
    "y_dir_3d = df['dir_3d']\n",
    "regressor_3d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_3d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_3d.fit(X, y_price_3d)\n",
    "classifier_3d.fit(X, y_dir_3d)\n",
    "\n",
    "# 4-day prediction models\n",
    "y_price_4d = df['next_4d_close']\n",
    "y_dir_4d = df['dir_4d']\n",
    "regressor_4d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_4d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_4d.fit(X, y_price_4d)\n",
    "classifier_4d.fit(X, y_dir_4d)\n",
    "\n",
    "# 5-day prediction models\n",
    "y_price_5d = df['next_5d_close']\n",
    "y_dir_5d = df['dir_5d']\n",
    "regressor_5d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_5d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_5d.fit(X, y_price_5d)\n",
    "classifier_5d.fit(X, y_dir_5d)\n",
    "\n",
    "# Step 6: Predict\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "# 1-day prediction\n",
    "predicted_price_1d = regressor_1d.predict(latest_data)[0]\n",
    "predicted_direction_1d = classifier_1d.predict(latest_data)[0]\n",
    "\n",
    "# 2-day prediction\n",
    "predicted_price_2d = regressor_2d.predict(latest_data)[0]\n",
    "predicted_direction_2d = classifier_2d.predict(latest_data)[0]\n",
    "\n",
    "# 3-day prediction\n",
    "predicted_price_3d = regressor_3d.predict(latest_data)[0]\n",
    "predicted_direction_3d = classifier_3d.predict(latest_data)[0]\n",
    "\n",
    "# 4-day prediction\n",
    "predicted_price_4d = regressor_4d.predict(latest_data)[0]\n",
    "predicted_direction_4d = classifier_4d.predict(latest_data)[0]\n",
    "\n",
    "# 5-day prediction\n",
    "predicted_price_5d = regressor_5d.predict(latest_data)[0]\n",
    "predicted_direction_5d = classifier_5d.predict(latest_data)[0]\n",
    "\n",
    "# Step 7: Results\n",
    "print(\"\\n📊 IBM Forecast\")\n",
    "\n",
    "print(\"\\n--- Debugging Information ---\")\n",
    "print(f\"Latest Closing Price (from X): ${df['Close'].iloc[-1]:.2f}\")\n",
    "print(f\"Predicted Price (1-day): ${predicted_price_1d:.2f}\")\n",
    "print(f\"Predicted Direction (1-day): {'Up' if predicted_direction_1d == 1 else 'Down'}\")\n",
    "if len(df) > 1:\n",
    "    print(f\"Next Day's Closing Price (actual from data): ${df['Close'].iloc[-2]:.2f}\")\n",
    "\n",
    "print(f\"\\nPredicted Price (2-day): ${predicted_price_2d:.2f}\")\n",
    "print(f\"Predicted Direction (2-day): {'Up' if predicted_direction_2d == 1 else 'Down'}\")\n",
    "if len(df) > 2:\n",
    "    print(f\"Closing Price in 2 Days (actual from data): ${df['Close'].iloc[-3]:.2f}\")\n",
    "\n",
    "print(f\"\\nPredicted Price (3-day): ${predicted_price_3d:.2f}\")\n",
    "print(f\"Predicted Direction (3-day): {'Up' if predicted_direction_3d == 1 else 'Down'}\")\n",
    "if len(df) > 3:\n",
    "    print(f\"Closing Price in 3 Days (actual from data): ${df['Close'].iloc[-4]:.2f}\")\n",
    "\n",
    "print(f\"\\nPredicted Price (4-day): ${predicted_price_4d:.2f}\")\n",
    "print(f\"Predicted Direction (4-day): {'Up' if predicted_direction_4d == 1 else 'Down'}\")\n",
    "if len(df) > 4:\n",
    "    print(f\"Closing Price in 4 Days (actual from data): ${df['Close'].iloc[-5]:.2f}\")\n",
    "\n",
    "print(f\"\\nPredicted Price (5-day): ${predicted_price_5d:.2f}\")\n",
    "print(f\"Predicted Direction (5-day): {'Up' if predicted_direction_5d == 1 else 'Down'}\")\n",
    "if len(df) > 5:\n",
    "    print(f\"Closing Price in 5 Days (actual from data): ${df['Close'].iloc[-6]:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "733f8a0c-546a-4c5f-9a69-1a5d3b5c6779",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📊 IBM Forecast\n",
      "\n",
      "--- Debugging Information ---\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "unsupported format string passed to Series.__format__",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[23], line 136\u001b[0m\n\u001b[0;32m    133\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m📊 IBM Forecast\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    135\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m--- Debugging Information ---\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m--> 136\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLatest Closing Price (from X): $\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdf[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39miloc[\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m]\u001b[38;5;132;01m:\u001b[39;00m\u001b[38;5;124m.2f\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    137\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPredicted Price (1-day): $\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpredicted_price_1d\u001b[38;5;132;01m:\u001b[39;00m\u001b[38;5;124m.2f\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    138\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPredicted Direction (1-day): \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mUp\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mif\u001b[39;00m\u001b[38;5;250m \u001b[39mpredicted_direction_1d\u001b[38;5;250m \u001b[39m\u001b[38;5;241m==\u001b[39m\u001b[38;5;250m \u001b[39m\u001b[38;5;241m1\u001b[39m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01melse\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mDown\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported format string passed to Series.__format__"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Force flatten all columns to Series\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators — use .values.ravel() or .squeeze() to ensure 1D inputs\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(),\n",
    "    low=df['Low'].squeeze(),\n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(),\n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Target for prediction\n",
    "# 1-day prediction\n",
    "df['next_1d_close'] = df['Close'].shift(-1)\n",
    "df['dir_1d'] = (df['next_1d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 2-day prediction\n",
    "df['next_2d_close'] = df['Close'].shift(-2)\n",
    "df['dir_2d'] = (df['next_2d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 3-day prediction\n",
    "df['next_3d_close'] = df['Close'].shift(-3)\n",
    "df['dir_3d'] = (df['next_3d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 4-day prediction\n",
    "df['next_4d_close'] = df['Close'].shift(-4)\n",
    "df['dir_4d'] = (df['next_4d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 5-day prediction\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "df['dir_5d'] = (df['next_5d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Train model\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# 1-day prediction models\n",
    "y_price_1d = df['next_1d_close']\n",
    "y_dir_1d = df['dir_1d']\n",
    "regressor_1d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_1d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_1d.fit(X, y_price_1d)\n",
    "classifier_1d.fit(X, y_dir_1d)\n",
    "\n",
    "# 2-day prediction models\n",
    "y_price_2d = df['next_2d_close']\n",
    "y_dir_2d = df['dir_2d']\n",
    "regressor_2d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_2d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_2d.fit(X, y_price_2d)\n",
    "classifier_2d.fit(X, y_dir_2d)\n",
    "\n",
    "# 3-day prediction models\n",
    "y_price_3d = df['next_3d_close']\n",
    "y_dir_3d = df['dir_3d']\n",
    "regressor_3d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_3d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_3d.fit(X, y_price_3d)\n",
    "classifier_3d.fit(X, y_dir_3d)\n",
    "\n",
    "# 4-day prediction models\n",
    "y_price_4d = df['next_4d_close']\n",
    "y_dir_4d = df['dir_4d']\n",
    "regressor_4d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_4d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_4d.fit(X, y_price_4d)\n",
    "classifier_4d.fit(X, y_dir_4d)\n",
    "\n",
    "# 5-day prediction models\n",
    "y_price_5d = df['next_5d_close']\n",
    "y_dir_5d = df['dir_5d']\n",
    "regressor_5d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_5d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_5d.fit(X, y_price_5d)\n",
    "classifier_5d.fit(X, y_dir_5d)\n",
    "\n",
    "# Step 6: Predict\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "# 1-day prediction\n",
    "predicted_price_1d = regressor_1d.predict(latest_data)[0]\n",
    "predicted_direction_1d = classifier_1d.predict(latest_data)[0]\n",
    "\n",
    "# 2-day prediction\n",
    "predicted_price_2d = regressor_2d.predict(latest_data)[0]\n",
    "predicted_direction_2d = classifier_2d.predict(latest_data)[0]\n",
    "\n",
    "# 3-day prediction\n",
    "predicted_price_3d = regressor_3d.predict(latest_data)[0]\n",
    "predicted_direction_3d = classifier_3d.predict(latest_data)[0]\n",
    "\n",
    "# 4-day prediction\n",
    "predicted_price_4d = regressor_4d.predict(latest_data)[0]\n",
    "predicted_direction_4d = classifier_4d.predict(latest_data)[0]\n",
    "\n",
    "# 5-day prediction\n",
    "predicted_price_5d = regressor_5d.predict(latest_data)[0]\n",
    "predicted_direction_5d = classifier_5d.predict(latest_data)[0]\n",
    "\n",
    "# Step 7: Results\n",
    "print(\"\\n📊 IBM Forecast\")\n",
    "\n",
    "print(\"\\n--- Debugging Information ---\")\n",
    "print(f\"Latest Closing Price (from X): ${df['Close'].iloc[-1]:.2f}\")\n",
    "print(f\"Predicted Price (1-day): ${predicted_price_1d:.2f}\")\n",
    "print(f\"Predicted Direction (1-day): {'Up' if predicted_direction_1d == 1 else 'Down'}\")\n",
    "if len(df) > 1:\n",
    "    print(f\"Next Day's Closing Price (actual from data): ${df['Close'].iloc[-2]:.2f}\")\n",
    "\n",
    "print(f\"\\nPredicted Price (2-day): ${predicted_price_2d:.2f}\")\n",
    "print(f\"Predicted Direction (2-day): {'Up' if predicted_direction_2d == 1 else 'Down'}\")\n",
    "if len(df) > 2:\n",
    "    print(f\"Closing Price in 2 Days (actual from data): ${df['Close'].iloc[-3]:.2f}\")\n",
    "\n",
    "print(f\"\\nPredicted Price (3-day): ${predicted_price_3d:.2f}\")\n",
    "print(f\"Predicted Direction (3-day): {'Up' if predicted_direction_3d == 1 else 'Down'}\")\n",
    "if len(df) > 3:\n",
    "    print(f\"Closing Price in 3 Days (actual from data): ${df['Close'].iloc[-4]:.2f}\")\n",
    "\n",
    "print(f\"\\nPredicted Price (4-day): ${predicted_price_4d:.2f}\")\n",
    "print(f\"Predicted Direction (4-day): {'Up' if predicted_direction_4d == 1 else 'Down'}\")\n",
    "if len(df) > 4:\n",
    "    print(f\"Closing Price in 4 Days (actual from data): ${df['Close'].iloc[-5]:.2f}\")\n",
    "\n",
    "print(f\"\\nPredicted Price (5-day): ${predicted_price_5d:.2f}\")\n",
    "print(f\"Predicted Direction (5-day): {'Up' if predicted_direction_5d == 1 else 'Down'}\")\n",
    "if len(df) > 5:\n",
    "    print(f\"Closing Price in 5 Days (actual from data): ${df['Close'].iloc[-6]:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "45def9d7-4fd2-4184-b087-642033799abd",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📊 IBM Forecast\n",
      "\n",
      "--- Debugging Information ---\n",
      "Latest Closing Price (from X): $266.95\n",
      "Predicted Price (1-day): $262.41\n",
      "Predicted Direction (1-day): Down\n",
      "Next Day's Closing Price (actual from data): $268.41\n",
      "\n",
      "Predicted Price (2-day): $259.84\n",
      "Predicted Direction (2-day): Down\n",
      "Closing Price in 2 Days (actual from data): $266.76\n",
      "\n",
      "Predicted Price (3-day): $258.05\n",
      "Predicted Direction (3-day): Down\n",
      "Closing Price in 3 Days (actual from data): $266.68\n",
      "\n",
      "Predicted Price (4-day): $259.98\n",
      "Predicted Direction (4-day): Down\n",
      "Closing Price in 4 Days (actual from data): $257.82\n",
      "\n",
      "Predicted Price (5-day): $260.32\n",
      "Predicted Direction (5-day): Down\n",
      "Closing Price in 5 Days (actual from data): $258.59\n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Force flatten all columns to Series\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators — use .values.ravel() or .squeeze() to ensure 1D inputs\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(),\n",
    "    low=df['Low'].squeeze(),\n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(),\n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Target for prediction\n",
    "# 1-day prediction\n",
    "df['next_1d_close'] = df['Close'].shift(-1)\n",
    "df['dir_1d'] = (df['next_1d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 2-day prediction\n",
    "df['next_2d_close'] = df['Close'].shift(-2)\n",
    "df['dir_2d'] = (df['next_2d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 3-day prediction\n",
    "df['next_3d_close'] = df['Close'].shift(-3)\n",
    "df['dir_3d'] = (df['next_3d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 4-day prediction\n",
    "df['next_4d_close'] = df['Close'].shift(-4)\n",
    "df['dir_4d'] = (df['next_4d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 5-day prediction\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "df['dir_5d'] = (df['next_5d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Train model\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# 1-day prediction models\n",
    "y_price_1d = df['next_1d_close']\n",
    "y_dir_1d = df['dir_1d']\n",
    "regressor_1d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_1d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_1d.fit(X, y_price_1d)\n",
    "classifier_1d.fit(X, y_dir_1d)\n",
    "\n",
    "# 2-day prediction models\n",
    "y_price_2d = df['next_2d_close']\n",
    "y_dir_2d = df['dir_2d']\n",
    "regressor_2d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_2d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_2d.fit(X, y_price_2d)\n",
    "classifier_2d.fit(X, y_dir_2d)\n",
    "\n",
    "# 3-day prediction models\n",
    "y_price_3d = df['next_3d_close']\n",
    "y_dir_3d = df['dir_3d']\n",
    "regressor_3d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_3d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_3d.fit(X, y_price_3d)\n",
    "classifier_3d.fit(X, y_dir_3d)\n",
    "\n",
    "# 4-day prediction models\n",
    "y_price_4d = df['next_4d_close']\n",
    "y_dir_4d = df['dir_4d']\n",
    "regressor_4d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_4d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_4d.fit(X, y_price_4d)\n",
    "classifier_4d.fit(X, y_dir_4d)\n",
    "\n",
    "# 5-day prediction models\n",
    "y_price_5d = df['next_5d_close']\n",
    "y_dir_5d = df['dir_5d']\n",
    "regressor_5d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_5d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_5d.fit(X, y_price_5d)\n",
    "classifier_5d.fit(X, y_dir_5d)\n",
    "\n",
    "# Step 6: Predict\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "# 1-day prediction\n",
    "predicted_price_1d = regressor_1d.predict(latest_data)[0]\n",
    "predicted_direction_1d = classifier_1d.predict(latest_data)[0]\n",
    "\n",
    "# 2-day prediction\n",
    "predicted_price_2d = regressor_2d.predict(latest_data)[0]\n",
    "predicted_direction_2d = classifier_2d.predict(latest_data)[0]\n",
    "\n",
    "# 3-day prediction\n",
    "predicted_price_3d = regressor_3d.predict(latest_data)[0]\n",
    "predicted_direction_3d = classifier_3d.predict(latest_data)[0]\n",
    "\n",
    "# 4-day prediction\n",
    "predicted_price_4d = regressor_4d.predict(latest_data)[0]\n",
    "predicted_direction_4d = classifier_4d.predict(latest_data)[0]\n",
    "\n",
    "# 5-day prediction\n",
    "predicted_price_5d = regressor_5d.predict(latest_data)[0]\n",
    "predicted_direction_5d = classifier_5d.predict(latest_data)[0]\n",
    "\n",
    "# Step 7: Results\n",
    "print(\"\\n📊 IBM Forecast\")\n",
    "\n",
    "print(\"\\n--- Debugging Information ---\")\n",
    "print(f\"Latest Closing Price (from X): ${df['Close'].iloc[-1].item():.2f}\")\n",
    "print(f\"Predicted Price (1-day): ${predicted_price_1d:.2f}\")\n",
    "print(f\"Predicted Direction (1-day): {'Up' if predicted_direction_1d == 1 else 'Down'}\")\n",
    "if len(df) > 1:\n",
    "    print(f\"Next Day's Closing Price (actual from data): ${df['Close'].iloc[-2].item():.2f}\")\n",
    "\n",
    "print(f\"\\nPredicted Price (2-day): ${predicted_price_2d:.2f}\")\n",
    "print(f\"Predicted Direction (2-day): {'Up' if predicted_direction_2d == 1 else 'Down'}\")\n",
    "if len(df) > 2:\n",
    "    print(f\"Closing Price in 2 Days (actual from data): ${df['Close'].iloc[-3].item():.2f}\")\n",
    "\n",
    "print(f\"\\nPredicted Price (3-day): ${predicted_price_3d:.2f}\")\n",
    "print(f\"Predicted Direction (3-day): {'Up' if predicted_direction_3d == 1 else 'Down'}\")\n",
    "if len(df) > 3:\n",
    "    print(f\"Closing Price in 3 Days (actual from data): ${df['Close'].iloc[-4].item():.2f}\")\n",
    "\n",
    "print(f\"\\nPredicted Price (4-day): ${predicted_price_4d:.2f}\")\n",
    "print(f\"Predicted Direction (4-day): {'Up' if predicted_direction_4d == 1 else 'Down'}\")\n",
    "if len(df) > 4:\n",
    "    print(f\"Closing Price in 4 Days (actual from data): ${df['Close'].iloc[-5].item():.2f}\")\n",
    "\n",
    "print(f\"\\nPredicted Price (5-day): ${predicted_price_5d:.2f}\")\n",
    "print(f\"Predicted Direction (5-day): {'Up' if predicted_direction_5d == 1 else 'Down'}\")\n",
    "if len(df) > 5:\n",
    "    print(f\"Closing Price in 5 Days (actual from data): ${df['Close'].iloc[-6].item():.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f0b689e1-7dd6-4143-b8f4-bec109cfa74f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th>Price</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>rsi</th>\n",
       "      <th>stoch</th>\n",
       "      <th>macd</th>\n",
       "      <th>obv</th>\n",
       "      <th>sma_10</th>\n",
       "      <th>...</th>\n",
       "      <th>next_1d_close</th>\n",
       "      <th>dir_1d</th>\n",
       "      <th>next_2d_close</th>\n",
       "      <th>dir_2d</th>\n",
       "      <th>next_3d_close</th>\n",
       "      <th>dir_3d</th>\n",
       "      <th>next_4d_close</th>\n",
       "      <th>dir_4d</th>\n",
       "      <th>next_5d_close</th>\n",
       "      <th>dir_5d</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticker</th>\n",
       "      <th>IBM</th>\n",
       "      <th>IBM</th>\n",
       "      <th>IBM</th>\n",
       "      <th>IBM</th>\n",
       "      <th>IBM</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>...</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2025-05-07</th>\n",
       "      <td>247.800999</td>\n",
       "      <td>252.787818</td>\n",
       "      <td>247.185102</td>\n",
       "      <td>251.695084</td>\n",
       "      <td>3399700.0</td>\n",
       "      <td>60.438764</td>\n",
       "      <td>96.336975</td>\n",
       "      <td>2.142861</td>\n",
       "      <td>340682778.0</td>\n",
       "      <td>240.001907</td>\n",
       "      <td>...</td>\n",
       "      <td>252.460007</td>\n",
       "      <td>1</td>\n",
       "      <td>249.199997</td>\n",
       "      <td>0</td>\n",
       "      <td>253.690002</td>\n",
       "      <td>1</td>\n",
       "      <td>258.589996</td>\n",
       "      <td>1</td>\n",
       "      <td>257.820007</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-08</th>\n",
       "      <td>253.314322</td>\n",
       "      <td>254.824263</td>\n",
       "      <td>251.575891</td>\n",
       "      <td>252.460007</td>\n",
       "      <td>3637000.0</td>\n",
       "      <td>60.999786</td>\n",
       "      <td>92.581078</td>\n",
       "      <td>2.270441</td>\n",
       "      <td>344319778.0</td>\n",
       "      <td>242.466507</td>\n",
       "      <td>...</td>\n",
       "      <td>249.199997</td>\n",
       "      <td>0</td>\n",
       "      <td>253.690002</td>\n",
       "      <td>1</td>\n",
       "      <td>258.589996</td>\n",
       "      <td>1</td>\n",
       "      <td>257.820007</td>\n",
       "      <td>1</td>\n",
       "      <td>266.679993</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-09</th>\n",
       "      <td>252.509995</td>\n",
       "      <td>253.000000</td>\n",
       "      <td>247.639999</td>\n",
       "      <td>249.199997</td>\n",
       "      <td>2901300.0</td>\n",
       "      <td>57.272102</td>\n",
       "      <td>82.351326</td>\n",
       "      <td>2.022794</td>\n",
       "      <td>341418478.0</td>\n",
       "      <td>244.299141</td>\n",
       "      <td>...</td>\n",
       "      <td>253.690002</td>\n",
       "      <td>1</td>\n",
       "      <td>258.589996</td>\n",
       "      <td>1</td>\n",
       "      <td>257.820007</td>\n",
       "      <td>1</td>\n",
       "      <td>266.679993</td>\n",
       "      <td>1</td>\n",
       "      <td>266.760010</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-12</th>\n",
       "      <td>252.500000</td>\n",
       "      <td>253.809998</td>\n",
       "      <td>244.649994</td>\n",
       "      <td>253.690002</td>\n",
       "      <td>4609500.0</td>\n",
       "      <td>60.823123</td>\n",
       "      <td>96.440744</td>\n",
       "      <td>2.042920</td>\n",
       "      <td>346027978.0</td>\n",
       "      <td>246.208255</td>\n",
       "      <td>...</td>\n",
       "      <td>258.589996</td>\n",
       "      <td>1</td>\n",
       "      <td>257.820007</td>\n",
       "      <td>1</td>\n",
       "      <td>266.679993</td>\n",
       "      <td>1</td>\n",
       "      <td>266.760010</td>\n",
       "      <td>1</td>\n",
       "      <td>268.410004</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-13</th>\n",
       "      <td>254.429993</td>\n",
       "      <td>259.579987</td>\n",
       "      <td>252.880005</td>\n",
       "      <td>258.589996</td>\n",
       "      <td>3521400.0</td>\n",
       "      <td>64.309159</td>\n",
       "      <td>97.296855</td>\n",
       "      <td>2.251335</td>\n",
       "      <td>349549378.0</td>\n",
       "      <td>248.286504</td>\n",
       "      <td>...</td>\n",
       "      <td>257.820007</td>\n",
       "      <td>0</td>\n",
       "      <td>266.679993</td>\n",
       "      <td>1</td>\n",
       "      <td>266.760010</td>\n",
       "      <td>1</td>\n",
       "      <td>268.410004</td>\n",
       "      <td>1</td>\n",
       "      <td>266.950012</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-14</th>\n",
       "      <td>257.600006</td>\n",
       "      <td>260.549988</td>\n",
       "      <td>256.220001</td>\n",
       "      <td>257.820007</td>\n",
       "      <td>3634700.0</td>\n",
       "      <td>63.355139</td>\n",
       "      <td>92.358576</td>\n",
       "      <td>2.199864</td>\n",
       "      <td>345914678.0</td>\n",
       "      <td>250.046359</td>\n",
       "      <td>...</td>\n",
       "      <td>266.679993</td>\n",
       "      <td>1</td>\n",
       "      <td>266.760010</td>\n",
       "      <td>1</td>\n",
       "      <td>268.410004</td>\n",
       "      <td>1</td>\n",
       "      <td>266.950012</td>\n",
       "      <td>1</td>\n",
       "      <td>260.869995</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-15</th>\n",
       "      <td>259.010010</td>\n",
       "      <td>267.429993</td>\n",
       "      <td>258.609985</td>\n",
       "      <td>266.679993</td>\n",
       "      <td>4856300.0</td>\n",
       "      <td>69.045520</td>\n",
       "      <td>97.967154</td>\n",
       "      <td>2.597748</td>\n",
       "      <td>350770978.0</td>\n",
       "      <td>252.906786</td>\n",
       "      <td>...</td>\n",
       "      <td>266.760010</td>\n",
       "      <td>1</td>\n",
       "      <td>268.410004</td>\n",
       "      <td>1</td>\n",
       "      <td>266.950012</td>\n",
       "      <td>1</td>\n",
       "      <td>260.869995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.369995</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-16</th>\n",
       "      <td>266.350006</td>\n",
       "      <td>267.980011</td>\n",
       "      <td>264.589996</td>\n",
       "      <td>266.760010</td>\n",
       "      <td>3817900.0</td>\n",
       "      <td>69.092200</td>\n",
       "      <td>96.533016</td>\n",
       "      <td>2.690184</td>\n",
       "      <td>354588878.0</td>\n",
       "      <td>255.190108</td>\n",
       "      <td>...</td>\n",
       "      <td>268.410004</td>\n",
       "      <td>1</td>\n",
       "      <td>266.950012</td>\n",
       "      <td>1</td>\n",
       "      <td>260.869995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.369995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.630005</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-19</th>\n",
       "      <td>265.450012</td>\n",
       "      <td>269.140015</td>\n",
       "      <td>265.079987</td>\n",
       "      <td>268.410004</td>\n",
       "      <td>3198600.0</td>\n",
       "      <td>70.093708</td>\n",
       "      <td>97.991669</td>\n",
       "      <td>2.680386</td>\n",
       "      <td>357787478.0</td>\n",
       "      <td>257.277829</td>\n",
       "      <td>...</td>\n",
       "      <td>266.950012</td>\n",
       "      <td>0</td>\n",
       "      <td>260.869995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.369995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.630005</td>\n",
       "      <td>0</td>\n",
       "      <td>263.230011</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-20</th>\n",
       "      <td>267.399994</td>\n",
       "      <td>269.279999</td>\n",
       "      <td>265.619995</td>\n",
       "      <td>266.950012</td>\n",
       "      <td>2437900.0</td>\n",
       "      <td>67.994232</td>\n",
       "      <td>92.918614</td>\n",
       "      <td>2.402441</td>\n",
       "      <td>355349578.0</td>\n",
       "      <td>259.225511</td>\n",
       "      <td>...</td>\n",
       "      <td>260.869995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.369995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.630005</td>\n",
       "      <td>0</td>\n",
       "      <td>263.230011</td>\n",
       "      <td>0</td>\n",
       "      <td>261.234985</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Price             Open        High         Low       Close     Volume  \\\n",
       "Ticker             IBM         IBM         IBM         IBM        IBM   \n",
       "Date                                                                    \n",
       "2025-05-07  247.800999  252.787818  247.185102  251.695084  3399700.0   \n",
       "2025-05-08  253.314322  254.824263  251.575891  252.460007  3637000.0   \n",
       "2025-05-09  252.509995  253.000000  247.639999  249.199997  2901300.0   \n",
       "2025-05-12  252.500000  253.809998  244.649994  253.690002  4609500.0   \n",
       "2025-05-13  254.429993  259.579987  252.880005  258.589996  3521400.0   \n",
       "2025-05-14  257.600006  260.549988  256.220001  257.820007  3634700.0   \n",
       "2025-05-15  259.010010  267.429993  258.609985  266.679993  4856300.0   \n",
       "2025-05-16  266.350006  267.980011  264.589996  266.760010  3817900.0   \n",
       "2025-05-19  265.450012  269.140015  265.079987  268.410004  3198600.0   \n",
       "2025-05-20  267.399994  269.279999  265.619995  266.950012  2437900.0   \n",
       "\n",
       "Price             rsi      stoch      macd          obv      sma_10  ...  \\\n",
       "Ticker                                                               ...   \n",
       "Date                                                                 ...   \n",
       "2025-05-07  60.438764  96.336975  2.142861  340682778.0  240.001907  ...   \n",
       "2025-05-08  60.999786  92.581078  2.270441  344319778.0  242.466507  ...   \n",
       "2025-05-09  57.272102  82.351326  2.022794  341418478.0  244.299141  ...   \n",
       "2025-05-12  60.823123  96.440744  2.042920  346027978.0  246.208255  ...   \n",
       "2025-05-13  64.309159  97.296855  2.251335  349549378.0  248.286504  ...   \n",
       "2025-05-14  63.355139  92.358576  2.199864  345914678.0  250.046359  ...   \n",
       "2025-05-15  69.045520  97.967154  2.597748  350770978.0  252.906786  ...   \n",
       "2025-05-16  69.092200  96.533016  2.690184  354588878.0  255.190108  ...   \n",
       "2025-05-19  70.093708  97.991669  2.680386  357787478.0  257.277829  ...   \n",
       "2025-05-20  67.994232  92.918614  2.402441  355349578.0  259.225511  ...   \n",
       "\n",
       "Price      next_1d_close dir_1d next_2d_close dir_2d next_3d_close dir_3d  \\\n",
       "Ticker                                                                      \n",
       "Date                                                                        \n",
       "2025-05-07    252.460007      1    249.199997      0    253.690002      1   \n",
       "2025-05-08    249.199997      0    253.690002      1    258.589996      1   \n",
       "2025-05-09    253.690002      1    258.589996      1    257.820007      1   \n",
       "2025-05-12    258.589996      1    257.820007      1    266.679993      1   \n",
       "2025-05-13    257.820007      0    266.679993      1    266.760010      1   \n",
       "2025-05-14    266.679993      1    266.760010      1    268.410004      1   \n",
       "2025-05-15    266.760010      1    268.410004      1    266.950012      1   \n",
       "2025-05-16    268.410004      1    266.950012      1    260.869995      0   \n",
       "2025-05-19    266.950012      0    260.869995      0    258.369995      0   \n",
       "2025-05-20    260.869995      0    258.369995      0    258.630005      0   \n",
       "\n",
       "Price      next_4d_close dir_4d next_5d_close dir_5d  \n",
       "Ticker                                                \n",
       "Date                                                  \n",
       "2025-05-07    258.589996      1    257.820007      1  \n",
       "2025-05-08    257.820007      1    266.679993      1  \n",
       "2025-05-09    266.679993      1    266.760010      1  \n",
       "2025-05-12    266.760010      1    268.410004      1  \n",
       "2025-05-13    268.410004      1    266.950012      1  \n",
       "2025-05-14    266.950012      1    260.869995      1  \n",
       "2025-05-15    260.869995      0    258.369995      0  \n",
       "2025-05-16    258.369995      0    258.630005      0  \n",
       "2025-05-19    258.630005      0    263.230011      0  \n",
       "2025-05-20    263.230011      0    261.234985      0  \n",
       "\n",
       "[10 rows x 24 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7bf5be8c-f166-4bde-a31c-ffa25c9f8e55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th>Price</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>rsi</th>\n",
       "      <th>stoch</th>\n",
       "      <th>macd</th>\n",
       "      <th>obv</th>\n",
       "      <th>sma_10</th>\n",
       "      <th>...</th>\n",
       "      <th>next_1d_close</th>\n",
       "      <th>dir_1d</th>\n",
       "      <th>next_2d_close</th>\n",
       "      <th>dir_2d</th>\n",
       "      <th>next_3d_close</th>\n",
       "      <th>dir_3d</th>\n",
       "      <th>next_4d_close</th>\n",
       "      <th>dir_4d</th>\n",
       "      <th>next_5d_close</th>\n",
       "      <th>dir_5d</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticker</th>\n",
       "      <th>IBM</th>\n",
       "      <th>IBM</th>\n",
       "      <th>IBM</th>\n",
       "      <th>IBM</th>\n",
       "      <th>IBM</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>...</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2025-05-14</th>\n",
       "      <td>257.600006</td>\n",
       "      <td>260.549988</td>\n",
       "      <td>256.220001</td>\n",
       "      <td>257.820007</td>\n",
       "      <td>3634700.0</td>\n",
       "      <td>63.355139</td>\n",
       "      <td>92.358576</td>\n",
       "      <td>2.199864</td>\n",
       "      <td>345914678.0</td>\n",
       "      <td>250.046359</td>\n",
       "      <td>...</td>\n",
       "      <td>266.679993</td>\n",
       "      <td>1</td>\n",
       "      <td>266.760010</td>\n",
       "      <td>1</td>\n",
       "      <td>268.410004</td>\n",
       "      <td>1</td>\n",
       "      <td>266.950012</td>\n",
       "      <td>1</td>\n",
       "      <td>260.869995</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-15</th>\n",
       "      <td>259.010010</td>\n",
       "      <td>267.429993</td>\n",
       "      <td>258.609985</td>\n",
       "      <td>266.679993</td>\n",
       "      <td>4856300.0</td>\n",
       "      <td>69.045520</td>\n",
       "      <td>97.967154</td>\n",
       "      <td>2.597748</td>\n",
       "      <td>350770978.0</td>\n",
       "      <td>252.906786</td>\n",
       "      <td>...</td>\n",
       "      <td>266.760010</td>\n",
       "      <td>1</td>\n",
       "      <td>268.410004</td>\n",
       "      <td>1</td>\n",
       "      <td>266.950012</td>\n",
       "      <td>1</td>\n",
       "      <td>260.869995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.369995</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-16</th>\n",
       "      <td>266.350006</td>\n",
       "      <td>267.980011</td>\n",
       "      <td>264.589996</td>\n",
       "      <td>266.760010</td>\n",
       "      <td>3817900.0</td>\n",
       "      <td>69.092200</td>\n",
       "      <td>96.533016</td>\n",
       "      <td>2.690184</td>\n",
       "      <td>354588878.0</td>\n",
       "      <td>255.190108</td>\n",
       "      <td>...</td>\n",
       "      <td>268.410004</td>\n",
       "      <td>1</td>\n",
       "      <td>266.950012</td>\n",
       "      <td>1</td>\n",
       "      <td>260.869995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.369995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.630005</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-19</th>\n",
       "      <td>265.450012</td>\n",
       "      <td>269.140015</td>\n",
       "      <td>265.079987</td>\n",
       "      <td>268.410004</td>\n",
       "      <td>3198600.0</td>\n",
       "      <td>70.093708</td>\n",
       "      <td>97.991669</td>\n",
       "      <td>2.680386</td>\n",
       "      <td>357787478.0</td>\n",
       "      <td>257.277829</td>\n",
       "      <td>...</td>\n",
       "      <td>266.950012</td>\n",
       "      <td>0</td>\n",
       "      <td>260.869995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.369995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.630005</td>\n",
       "      <td>0</td>\n",
       "      <td>263.230011</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-20</th>\n",
       "      <td>267.399994</td>\n",
       "      <td>269.279999</td>\n",
       "      <td>265.619995</td>\n",
       "      <td>266.950012</td>\n",
       "      <td>2437900.0</td>\n",
       "      <td>67.994232</td>\n",
       "      <td>92.918614</td>\n",
       "      <td>2.402441</td>\n",
       "      <td>355349578.0</td>\n",
       "      <td>259.225511</td>\n",
       "      <td>...</td>\n",
       "      <td>260.869995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.369995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.630005</td>\n",
       "      <td>0</td>\n",
       "      <td>263.230011</td>\n",
       "      <td>0</td>\n",
       "      <td>261.234985</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Price             Open        High         Low       Close     Volume  \\\n",
       "Ticker             IBM         IBM         IBM         IBM        IBM   \n",
       "Date                                                                    \n",
       "2025-05-14  257.600006  260.549988  256.220001  257.820007  3634700.0   \n",
       "2025-05-15  259.010010  267.429993  258.609985  266.679993  4856300.0   \n",
       "2025-05-16  266.350006  267.980011  264.589996  266.760010  3817900.0   \n",
       "2025-05-19  265.450012  269.140015  265.079987  268.410004  3198600.0   \n",
       "2025-05-20  267.399994  269.279999  265.619995  266.950012  2437900.0   \n",
       "\n",
       "Price             rsi      stoch      macd          obv      sma_10  ...  \\\n",
       "Ticker                                                               ...   \n",
       "Date                                                                 ...   \n",
       "2025-05-14  63.355139  92.358576  2.199864  345914678.0  250.046359  ...   \n",
       "2025-05-15  69.045520  97.967154  2.597748  350770978.0  252.906786  ...   \n",
       "2025-05-16  69.092200  96.533016  2.690184  354588878.0  255.190108  ...   \n",
       "2025-05-19  70.093708  97.991669  2.680386  357787478.0  257.277829  ...   \n",
       "2025-05-20  67.994232  92.918614  2.402441  355349578.0  259.225511  ...   \n",
       "\n",
       "Price      next_1d_close dir_1d next_2d_close dir_2d next_3d_close dir_3d  \\\n",
       "Ticker                                                                      \n",
       "Date                                                                        \n",
       "2025-05-14    266.679993      1    266.760010      1    268.410004      1   \n",
       "2025-05-15    266.760010      1    268.410004      1    266.950012      1   \n",
       "2025-05-16    268.410004      1    266.950012      1    260.869995      0   \n",
       "2025-05-19    266.950012      0    260.869995      0    258.369995      0   \n",
       "2025-05-20    260.869995      0    258.369995      0    258.630005      0   \n",
       "\n",
       "Price      next_4d_close dir_4d next_5d_close dir_5d  \n",
       "Ticker                                                \n",
       "Date                                                  \n",
       "2025-05-14    266.950012      1    260.869995      1  \n",
       "2025-05-15    260.869995      0    258.369995      0  \n",
       "2025-05-16    258.369995      0    258.630005      0  \n",
       "2025-05-19    258.630005      0    263.230011      0  \n",
       "2025-05-20    263.230011      0    261.234985      0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "17444a2c-b210-46f7-b2f0-f649ae1b9f2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📊 IBM Forecast\n",
      "Prediction Date: 2025-05-20\n",
      "\n",
      "--- Debugging Information ---\n",
      "Latest Closing Price (from X): $266.95\n",
      "Predicted Price (1-day): $262.41\n",
      "Predicted Direction (1-day): Down\n",
      "Next Day's Closing Price (actual from data): $268.41\n",
      "\n",
      "Predicted Price (2-day): $259.84\n",
      "Predicted Direction (2-day): Down\n",
      "Closing Price in 2 Days (actual from data): $266.76\n",
      "\n",
      "Predicted Price (3-day): $258.05\n",
      "Predicted Direction (3-day): Down\n",
      "Closing Price in 3 Days (actual from data): $266.68\n",
      "\n",
      "Predicted Price (4-day): $260.06\n",
      "Predicted Direction (4-day): Down\n",
      "Closing Price in 4 Days (actual from data): $257.82\n",
      "\n",
      "Predicted Price (5-day): $260.28\n",
      "Predicted Direction (5-day): Down\n",
      "Closing Price in 5 Days (actual from data): $258.59\n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Force flatten all columns to Series\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators — use .values.ravel() or .squeeze() to ensure 1D inputs\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(),\n",
    "    low=df['Low'].squeeze(),\n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(),\n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Target for prediction\n",
    "# 1-day prediction\n",
    "df['next_1d_close'] = df['Close'].shift(-1)\n",
    "df['dir_1d'] = (df['next_1d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 2-day prediction\n",
    "df['next_2d_close'] = df['Close'].shift(-2)\n",
    "df['dir_2d'] = (df['next_2d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 3-day prediction\n",
    "df['next_3d_close'] = df['Close'].shift(-3)\n",
    "df['dir_3d'] = (df['next_3d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 4-day prediction\n",
    "df['next_4d_close'] = df['Close'].shift(-4)\n",
    "df['dir_4d'] = (df['next_4d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 5-day prediction\n",
    "df['next_5d_close'] = df['Close'].shift(-5)\n",
    "df['dir_5d'] = (df['next_5d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Train model\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# 1-day prediction models\n",
    "y_price_1d = df['next_1d_close']\n",
    "y_dir_1d = df['dir_1d']\n",
    "regressor_1d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_1d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_1d.fit(X, y_price_1d)\n",
    "classifier_1d.fit(X, y_dir_1d)\n",
    "\n",
    "# 2-day prediction models\n",
    "y_price_2d = df['next_2d_close']\n",
    "y_dir_2d = df['dir_2d']\n",
    "regressor_2d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_2d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_2d.fit(X, y_price_2d)\n",
    "classifier_2d.fit(X, y_dir_2d)\n",
    "\n",
    "# 3-day prediction models\n",
    "y_price_3d = df['next_3d_close']\n",
    "y_dir_3d = df['dir_3d']\n",
    "regressor_3d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_3d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_3d.fit(X, y_price_3d)\n",
    "classifier_3d.fit(X, y_dir_3d)\n",
    "\n",
    "# 4-day prediction models\n",
    "y_price_4d = df['next_4d_close']\n",
    "y_dir_4d = df['dir_4d']\n",
    "regressor_4d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_4d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_4d.fit(X, y_price_4d)\n",
    "classifier_4d.fit(X, y_dir_4d)\n",
    "\n",
    "# 5-day prediction models\n",
    "y_price_5d = df['next_5d_close']\n",
    "y_dir_5d = df['dir_5d']\n",
    "regressor_5d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_5d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_5d.fit(X, y_price_5d)\n",
    "classifier_5d.fit(X, y_dir_5d)\n",
    "\n",
    "# Step 6: Predict\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "# Get the last date from the downloaded data\n",
    "last_date = df.index[-1].strftime('%Y-%m-%d')\n",
    "\n",
    "# 1-day prediction\n",
    "predicted_price_1d = regressor_1d.predict(latest_data)[0]\n",
    "predicted_direction_1d = classifier_1d.predict(latest_data)[0]\n",
    "\n",
    "# 2-day prediction\n",
    "predicted_price_2d = regressor_2d.predict(latest_data)[0]\n",
    "predicted_direction_2d = classifier_2d.predict(latest_data)[0]\n",
    "\n",
    "# 3-day prediction\n",
    "predicted_price_3d = regressor_3d.predict(latest_data)[0]\n",
    "predicted_direction_3d = classifier_3d.predict(latest_data)[0]\n",
    "\n",
    "# 4-day prediction\n",
    "predicted_price_4d = regressor_4d.predict(latest_data)[0]\n",
    "predicted_direction_4d = classifier_4d.predict(latest_data)[0]\n",
    "\n",
    "# 5-day prediction\n",
    "predicted_price_5d = regressor_5d.predict(latest_data)[0]\n",
    "predicted_direction_5d = classifier_5d.predict(latest_data)[0]\n",
    "\n",
    "# Step 7: Results\n",
    "print(\"\\n📊 IBM Forecast\")\n",
    "print(f\"Prediction Date: {last_date}\")\n",
    "print(\"\\n--- Debugging Information ---\")\n",
    "print(f\"Latest Closing Price (from X): ${df['Close'].iloc[-1].item():.2f}\")\n",
    "print(f\"Predicted Price (1-day): ${predicted_price_1d:.2f}\")\n",
    "print(f\"Predicted Direction (1-day): {'Up' if predicted_direction_1d == 1 else 'Down'}\")\n",
    "if len(df) > 1:\n",
    "    print(f\"Next Day's Closing Price (actual from data): ${df['Close'].iloc[-2].item():.2f}\")\n",
    "\n",
    "print(f\"\\nPredicted Price (2-day): ${predicted_price_2d:.2f}\")\n",
    "print(f\"Predicted Direction (2-day): {'Up' if predicted_direction_2d == 1 else 'Down'}\")\n",
    "if len(df) > 2:\n",
    "    print(f\"Closing Price in 2 Days (actual from data): ${df['Close'].iloc[-3].item():.2f}\")\n",
    "\n",
    "print(f\"\\nPredicted Price (3-day): ${predicted_price_3d:.2f}\")\n",
    "print(f\"Predicted Direction (3-day): {'Up' if predicted_direction_3d == 1 else 'Down'}\")\n",
    "if len(df) > 3:\n",
    "    print(f\"Closing Price in 3 Days (actual from data): ${df['Close'].iloc[-4].item():.2f}\")\n",
    "\n",
    "print(f\"\\nPredicted Price (4-day): ${predicted_price_4d:.2f}\")\n",
    "print(f\"Predicted Direction (4-day): {'Up' if predicted_direction_4d == 1 else 'Down'}\")\n",
    "if len(df) > 4:\n",
    "    print(f\"Closing Price in 4 Days (actual from data): ${df['Close'].iloc[-5].item():.2f}\")\n",
    "\n",
    "print(f\"\\nPredicted Price (5-day): ${predicted_price_5d:.2f}\")\n",
    "print(f\"Predicted Direction (5-day): {'Up' if predicted_direction_5d == 1 else 'Down'}\")\n",
    "if len(df) > 5:\n",
    "    print(f\"Closing Price in 5 Days (actual from data): ${df['Close'].iloc[-6].item():.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2d4ff8ae-8cff-483e-b131-17716a8a2bb6",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📊 IBM Forecast\n",
      "Date of Prediction: 2025-05-28\n",
      "\n",
      "--- Predictions ---\n",
      "\n",
      "🗓️ Prediction for 2025-05-29:\n",
      "📈 Predicted price: $262.54\n",
      "📉 Predicted direction: Up\n",
      "\n",
      "🗓️ Prediction for 2025-05-30:\n",
      "📈 Predicted price: $259.24\n",
      "📉 Predicted direction: Down\n",
      "\n",
      "🗓️ Prediction for 2025-05-31:\n",
      "📈 Predicted price: $259.23\n",
      "📉 Predicted direction: Down\n",
      "\n",
      "🗓️ Prediction for 2025-06-01:\n",
      "📈 Predicted price: $262.46\n",
      "📉 Predicted direction: Up\n",
      "\n",
      "🗓️ Prediction for 2025-06-02:\n",
      "📈 Predicted price: $266.57\n",
      "📉 Predicted direction: Up\n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"IBM\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Force flatten all columns to Series\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators — use .values.ravel() or .squeeze() to ensure 1D inputs\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(),\n",
    "    low=df['Low'].squeeze(),\n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(),\n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Target for prediction\n",
    "# 1-day prediction\n",
    "df['next_1d_close'] = df['Close'].shift(1)\n",
    "df['dir_1d'] = (df['next_1d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 2-day prediction\n",
    "df['next_2d_close'] = df['Close'].shift(2)\n",
    "df['dir_2d'] = (df['next_2d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 3-day prediction\n",
    "df['next_3d_close'] = df['Close'].shift(3)\n",
    "df['dir_3d'] = (df['next_3d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 4-day prediction\n",
    "df['next_4d_close'] = df['Close'].shift(4)\n",
    "df['dir_4d'] = (df['next_4d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 5-day prediction\n",
    "df['next_5d_close'] = df['Close'].shift(5)\n",
    "df['dir_5d'] = (df['next_5d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Train model\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "# 1-day prediction models\n",
    "y_price_1d = df['next_1d_close']\n",
    "y_dir_1d = df['dir_1d']\n",
    "regressor_1d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_1d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_1d.fit(X, y_price_1d)\n",
    "classifier_1d.fit(X, y_dir_1d)\n",
    "\n",
    "# 2-day prediction models\n",
    "y_price_2d = df['next_2d_close']\n",
    "y_dir_2d = df['dir_2d']\n",
    "regressor_2d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_2d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_2d.fit(X, y_price_2d)\n",
    "classifier_2d.fit(X, y_dir_2d)\n",
    "\n",
    "# 3-day prediction models\n",
    "y_price_3d = df['next_3d_close']\n",
    "y_dir_3d = df['dir_3d']\n",
    "regressor_3d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_3d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_3d.fit(X, y_price_3d)\n",
    "classifier_3d.fit(X, y_dir_3d)\n",
    "\n",
    "# 4-day prediction models\n",
    "y_price_4d = df['next_4d_close']\n",
    "y_dir_4d = df['dir_4d']\n",
    "regressor_4d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_4d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_4d.fit(X, y_price_4d)\n",
    "classifier_4d.fit(X, y_dir_4d)\n",
    "\n",
    "# 5-day prediction models\n",
    "y_price_5d = df['next_5d_close']\n",
    "y_dir_5d = df['dir_5d']\n",
    "regressor_5d = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "classifier_5d = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "regressor_5d.fit(X, y_price_5d)\n",
    "classifier_5d.fit(X, y_dir_5d)\n",
    "\n",
    "# Step 6: Predict\n",
    "latest_data = X.iloc[-1:]\n",
    "\n",
    "# Get the last date from the downloaded data\n",
    "last_date = df.index[-1]\n",
    "\n",
    "# Calculate prediction dates\n",
    "prediction_date_1d = (last_date + pd.Timedelta(days=1)).strftime('%Y-%m-%d')\n",
    "prediction_date_2d = (last_date + pd.Timedelta(days=2)).strftime('%Y-%m-%d')\n",
    "prediction_date_3d = (last_date + pd.Timedelta(days=3)).strftime('%Y-%m-%d')\n",
    "prediction_date_4d = (last_date + pd.Timedelta(days=4)).strftime('%Y-%m-%d')\n",
    "prediction_date_5d = (last_date + pd.Timedelta(days=5)).strftime('%Y-%m-%d')\n",
    "prediction_date_prediction = last_date.strftime('%Y-%m-%d')\n",
    "\n",
    "\n",
    "# 1-day prediction\n",
    "predicted_price_1d = regressor_1d.predict(latest_data)[0]\n",
    "predicted_direction_1d = classifier_1d.predict(latest_data)[0]\n",
    "\n",
    "# 2-day prediction\n",
    "predicted_price_2d = regressor_2d.predict(latest_data)[0]\n",
    "predicted_direction_2d = classifier_2d.predict(latest_data)[0]\n",
    "\n",
    "# 3-day prediction\n",
    "predicted_price_3d = regressor_3d.predict(latest_data)[0]\n",
    "predicted_direction_3d = classifier_3d.predict(latest_data)[0]\n",
    "\n",
    "# 4-day prediction\n",
    "predicted_price_4d = regressor_4d.predict(latest_data)[0]\n",
    "predicted_direction_4d = classifier_4d.predict(latest_data)[0]\n",
    "\n",
    "# 5-day prediction\n",
    "predicted_price_5d = regressor_5d.predict(latest_data)[0]\n",
    "predicted_direction_5d = classifier_5d.predict(latest_data)[0]\n",
    "\n",
    "# Step 7: Results\n",
    "print(\"\\n📊 IBM Forecast\")\n",
    "print(f\"Date of Prediction: {prediction_date_prediction}\")\n",
    "print(\"\\n--- Predictions ---\")\n",
    "print(f\"\\n🗓️ Prediction for {prediction_date_1d}:\")\n",
    "print(f\"📈 Predicted price: ${predicted_price_1d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_1d == 1 else 'Down'}\")\n",
    "\n",
    "print(f\"\\n🗓️ Prediction for {prediction_date_2d}:\")\n",
    "print(f\"📈 Predicted price: ${predicted_price_2d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_2d == 1 else 'Down'}\")\n",
    "\n",
    "print(f\"\\n🗓️ Prediction for {prediction_date_3d}:\")\n",
    "print(f\"📈 Predicted price: ${predicted_price_3d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_3d == 1 else 'Down'}\")\n",
    "\n",
    "print(f\"\\n🗓️ Prediction for {prediction_date_4d}:\")\n",
    "print(f\"📈 Predicted price: ${predicted_price_4d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_4d == 1 else 'Down'}\")\n",
    "\n",
    "print(f\"\\n🗓️ Prediction for {prediction_date_5d}:\")\n",
    "print(f\"📈 Predicted price: ${predicted_price_5d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_5d == 1 else 'Down'}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "face9117-49b1-4ff4-9b0f-7f924b5722c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th>Price</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>rsi</th>\n",
       "      <th>stoch</th>\n",
       "      <th>macd</th>\n",
       "      <th>obv</th>\n",
       "      <th>sma_10</th>\n",
       "      <th>...</th>\n",
       "      <th>next_1d_close</th>\n",
       "      <th>dir_1d</th>\n",
       "      <th>next_2d_close</th>\n",
       "      <th>dir_2d</th>\n",
       "      <th>next_3d_close</th>\n",
       "      <th>dir_3d</th>\n",
       "      <th>next_4d_close</th>\n",
       "      <th>dir_4d</th>\n",
       "      <th>next_5d_close</th>\n",
       "      <th>dir_5d</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticker</th>\n",
       "      <th>IBM</th>\n",
       "      <th>IBM</th>\n",
       "      <th>IBM</th>\n",
       "      <th>IBM</th>\n",
       "      <th>IBM</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>...</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2025-05-14</th>\n",
       "      <td>257.600006</td>\n",
       "      <td>260.549988</td>\n",
       "      <td>256.220001</td>\n",
       "      <td>257.820007</td>\n",
       "      <td>3634700.0</td>\n",
       "      <td>63.355139</td>\n",
       "      <td>92.358576</td>\n",
       "      <td>2.199864</td>\n",
       "      <td>345914678.0</td>\n",
       "      <td>250.046359</td>\n",
       "      <td>...</td>\n",
       "      <td>266.679993</td>\n",
       "      <td>1</td>\n",
       "      <td>266.760010</td>\n",
       "      <td>1</td>\n",
       "      <td>268.410004</td>\n",
       "      <td>1</td>\n",
       "      <td>266.950012</td>\n",
       "      <td>1</td>\n",
       "      <td>260.869995</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-15</th>\n",
       "      <td>259.010010</td>\n",
       "      <td>267.429993</td>\n",
       "      <td>258.609985</td>\n",
       "      <td>266.679993</td>\n",
       "      <td>4856300.0</td>\n",
       "      <td>69.045520</td>\n",
       "      <td>97.967154</td>\n",
       "      <td>2.597748</td>\n",
       "      <td>350770978.0</td>\n",
       "      <td>252.906786</td>\n",
       "      <td>...</td>\n",
       "      <td>266.760010</td>\n",
       "      <td>1</td>\n",
       "      <td>268.410004</td>\n",
       "      <td>1</td>\n",
       "      <td>266.950012</td>\n",
       "      <td>1</td>\n",
       "      <td>260.869995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.369995</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-16</th>\n",
       "      <td>266.350006</td>\n",
       "      <td>267.980011</td>\n",
       "      <td>264.589996</td>\n",
       "      <td>266.760010</td>\n",
       "      <td>3817900.0</td>\n",
       "      <td>69.092200</td>\n",
       "      <td>96.533016</td>\n",
       "      <td>2.690184</td>\n",
       "      <td>354588878.0</td>\n",
       "      <td>255.190108</td>\n",
       "      <td>...</td>\n",
       "      <td>268.410004</td>\n",
       "      <td>1</td>\n",
       "      <td>266.950012</td>\n",
       "      <td>1</td>\n",
       "      <td>260.869995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.369995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.630005</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-19</th>\n",
       "      <td>265.450012</td>\n",
       "      <td>269.140015</td>\n",
       "      <td>265.079987</td>\n",
       "      <td>268.410004</td>\n",
       "      <td>3198600.0</td>\n",
       "      <td>70.093708</td>\n",
       "      <td>97.991669</td>\n",
       "      <td>2.680386</td>\n",
       "      <td>357787478.0</td>\n",
       "      <td>257.277829</td>\n",
       "      <td>...</td>\n",
       "      <td>266.950012</td>\n",
       "      <td>0</td>\n",
       "      <td>260.869995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.369995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.630005</td>\n",
       "      <td>0</td>\n",
       "      <td>263.230011</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05-20</th>\n",
       "      <td>267.399994</td>\n",
       "      <td>269.279999</td>\n",
       "      <td>265.619995</td>\n",
       "      <td>266.950012</td>\n",
       "      <td>2437900.0</td>\n",
       "      <td>67.994232</td>\n",
       "      <td>92.918614</td>\n",
       "      <td>2.402441</td>\n",
       "      <td>355349578.0</td>\n",
       "      <td>259.225511</td>\n",
       "      <td>...</td>\n",
       "      <td>260.869995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.369995</td>\n",
       "      <td>0</td>\n",
       "      <td>258.630005</td>\n",
       "      <td>0</td>\n",
       "      <td>263.230011</td>\n",
       "      <td>0</td>\n",
       "      <td>261.309998</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Price             Open        High         Low       Close     Volume  \\\n",
       "Ticker             IBM         IBM         IBM         IBM        IBM   \n",
       "Date                                                                    \n",
       "2025-05-14  257.600006  260.549988  256.220001  257.820007  3634700.0   \n",
       "2025-05-15  259.010010  267.429993  258.609985  266.679993  4856300.0   \n",
       "2025-05-16  266.350006  267.980011  264.589996  266.760010  3817900.0   \n",
       "2025-05-19  265.450012  269.140015  265.079987  268.410004  3198600.0   \n",
       "2025-05-20  267.399994  269.279999  265.619995  266.950012  2437900.0   \n",
       "\n",
       "Price             rsi      stoch      macd          obv      sma_10  ...  \\\n",
       "Ticker                                                               ...   \n",
       "Date                                                                 ...   \n",
       "2025-05-14  63.355139  92.358576  2.199864  345914678.0  250.046359  ...   \n",
       "2025-05-15  69.045520  97.967154  2.597748  350770978.0  252.906786  ...   \n",
       "2025-05-16  69.092200  96.533016  2.690184  354588878.0  255.190108  ...   \n",
       "2025-05-19  70.093708  97.991669  2.680386  357787478.0  257.277829  ...   \n",
       "2025-05-20  67.994232  92.918614  2.402441  355349578.0  259.225511  ...   \n",
       "\n",
       "Price      next_1d_close dir_1d next_2d_close dir_2d next_3d_close dir_3d  \\\n",
       "Ticker                                                                      \n",
       "Date                                                                        \n",
       "2025-05-14    266.679993      1    266.760010      1    268.410004      1   \n",
       "2025-05-15    266.760010      1    268.410004      1    266.950012      1   \n",
       "2025-05-16    268.410004      1    266.950012      1    260.869995      0   \n",
       "2025-05-19    266.950012      0    260.869995      0    258.369995      0   \n",
       "2025-05-20    260.869995      0    258.369995      0    258.630005      0   \n",
       "\n",
       "Price      next_4d_close dir_4d next_5d_close dir_5d  \n",
       "Ticker                                                \n",
       "Date                                                  \n",
       "2025-05-14    266.950012      1    260.869995      1  \n",
       "2025-05-15    260.869995      0    258.369995      0  \n",
       "2025-05-16    258.369995      0    258.630005      0  \n",
       "2025-05-19    258.630005      0    263.230011      0  \n",
       "2025-05-20    263.230011      0    261.309998      0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "dd7a247b-96e1-40ff-9d19-570e964dcf99",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Direction Prediction Accuracy on Test Set ---\n",
      "Accuracy for 1-day direction prediction: 67.49%\n",
      "Accuracy for 2-day direction prediction: 68.03%\n",
      "Accuracy for 3-day direction prediction: 71.31%\n",
      "Accuracy for 4-day direction prediction: 78.14%\n",
      "Accuracy for 5-day direction prediction: 56.83%\n",
      "\n",
      "📊 PANW Forecast\n",
      "Date of Prediction: 2025-05-28\n",
      "\n",
      "--- Predictions ---\n",
      "\n",
      "🗓️ Prediction for 2025-05-29:\n",
      "📈 Predicted price: $187.50\n",
      "📉 Predicted direction: Down\n",
      "\n",
      "🗓️ Prediction for 2025-05-30:\n",
      "📈 Predicted price: $186.79\n",
      "📉 Predicted direction: Down\n",
      "\n",
      "🗓️ Prediction for 2025-05-31:\n",
      "📈 Predicted price: $186.16\n",
      "📉 Predicted direction: Down\n",
      "\n",
      "🗓️ Prediction for 2025-06-01:\n",
      "📈 Predicted price: $182.65\n",
      "📉 Predicted direction: Down\n",
      "\n",
      "🗓️ Prediction for 2025-06-02:\n",
      "📈 Predicted price: $192.79\n",
      "📉 Predicted direction: Up\n",
      "\n",
      "--- Debugging Information ---\n",
      "Latest Closing Price (from X): $187.80\n",
      "Next Day's Closing Price (actual from data): $187.46\n",
      "Closing Price in 2 Days (actual from data): $186.75\n",
      "Closing Price in 3 Days (actual from data): $186.14\n",
      "Closing Price in 4 Days (actual from data): $181.26\n",
      "Closing Price in 5 Days (actual from data): $194.48\n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(\"PANW\", start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Force flatten all columns to Series\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators — use .values.ravel() or .squeeze() to ensure 1D inputs\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(),\n",
    "    low=df['Low'].squeeze(),\n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(),\n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Target for prediction\n",
    "# 1-day prediction\n",
    "df['next_1d_close'] = df['Close'].shift(1)\n",
    "df['dir_1d'] = (df['next_1d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 2-day prediction\n",
    "df['next_2d_close'] = df['Close'].shift(2)\n",
    "df['dir_2d'] = (df['next_2d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 3-day prediction\n",
    "df['next_3d_close'] = df['Close'].shift(3)\n",
    "df['dir_3d'] = (df['next_3d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 4-day prediction\n",
    "df['next_4d_close'] = df['Close'].shift(4)\n",
    "df['dir_4d'] = (df['next_4d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 5-day prediction\n",
    "df['next_5d_close'] = df['Close'].shift(5)\n",
    "df['dir_5d'] = (df['next_5d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Prepare features and target variables\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "y_dir_1d = df['dir_1d']\n",
    "y_dir_2d = df['dir_2d']\n",
    "y_dir_3d = df['dir_3d']\n",
    "y_dir_4d = df['dir_4d']\n",
    "y_dir_5d = df['dir_5d']\n",
    "\n",
    "# Step 6: Split data into training and testing sets\n",
    "test_size = 0.2  # 20% for testing\n",
    "random_state = 42 # for reproducibility\n",
    "\n",
    "X_train, X_test, y_train_1d, y_test_1d = train_test_split(X, y_dir_1d, test_size=test_size, random_state=random_state, shuffle=False)\n",
    "X_train, X_test, y_train_2d, y_test_2d = train_test_split(X, y_dir_2d, test_size=test_size, random_state=random_state, shuffle=False)\n",
    "X_train, X_test, y_train_3d, y_test_3d = train_test_split(X, y_dir_3d, test_size=test_size, random_state=random_state, shuffle=False)\n",
    "X_train, X_test, y_train_4d, y_test_4d = train_test_split(X, y_dir_4d, test_size=test_size, random_state=random_state, shuffle=False)\n",
    "X_train, X_test, y_train_5d, y_test_5d = train_test_split(X, y_dir_5d, test_size=test_size, random_state=random_state, shuffle=False)\n",
    "\n",
    "# Step 7: Train direction classification models and evaluate accuracy\n",
    "print(\"\\n--- Direction Prediction Accuracy on Test Set ---\")\n",
    "\n",
    "# 1-day prediction\n",
    "classifier_1d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "classifier_1d.fit(X_train, y_train_1d)\n",
    "y_pred_1d = classifier_1d.predict(X_test)\n",
    "accuracy_1d = accuracy_score(y_test_1d, y_pred_1d)\n",
    "print(f\"Accuracy for 1-day direction prediction: {accuracy_1d * 100:.2f}%\")\n",
    "\n",
    "# 2-day prediction\n",
    "classifier_2d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "classifier_2d.fit(X_train, y_train_2d)\n",
    "y_pred_2d = classifier_2d.predict(X_test)\n",
    "accuracy_2d = accuracy_score(y_test_2d, y_pred_2d)\n",
    "print(f\"Accuracy for 2-day direction prediction: {accuracy_2d * 100:.2f}%\")\n",
    "\n",
    "# 3-day prediction\n",
    "classifier_3d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "classifier_3d.fit(X_train, y_train_3d)\n",
    "y_pred_3d = classifier_3d.predict(X_test)\n",
    "accuracy_3d = accuracy_score(y_test_3d, y_pred_3d)\n",
    "print(f\"Accuracy for 3-day direction prediction: {accuracy_3d * 100:.2f}%\")\n",
    "\n",
    "# 4-day prediction\n",
    "classifier_4d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "classifier_4d.fit(X_train, y_train_4d)\n",
    "y_pred_4d = classifier_4d.predict(X_test)\n",
    "accuracy_4d = accuracy_score(y_test_4d, y_pred_4d)\n",
    "print(f\"Accuracy for 4-day direction prediction: {accuracy_4d * 100:.2f}%\")\n",
    "\n",
    "# 5-day prediction\n",
    "classifier_5d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "classifier_5d.fit(X_train, y_train_5d)\n",
    "y_pred_5d = classifier_5d.predict(X_test)\n",
    "accuracy_5d = accuracy_score(y_test_5d, y_pred_5d)\n",
    "print(f\"Accuracy for 5-day direction prediction: {accuracy_5d * 100:.2f}%\")\n",
    "\n",
    "# Step 8: Train final models on the entire dataset and predict\n",
    "# Get the last date from the downloaded data\n",
    "last_date = df.index[-1]\n",
    "\n",
    "# Calculate prediction dates\n",
    "prediction_date_1d = (last_date + pd.Timedelta(days=1)).strftime('%Y-%m-%d')\n",
    "prediction_date_2d = (last_date + pd.Timedelta(days=2)).strftime('%Y-%m-%d')\n",
    "prediction_date_3d = (last_date + pd.Timedelta(days=3)).strftime('%Y-%m-%d')\n",
    "prediction_date_4d = (last_date + pd.Timedelta(days=4)).strftime('%Y-%m-%d')\n",
    "prediction_date_5d = (last_date + pd.Timedelta(days=5)).strftime('%Y-%m-%d')\n",
    "prediction_date_prediction = last_date.strftime('%Y-%m-%d')\n",
    "\n",
    "X_train_full = X\n",
    "y_train_full_1d = y_dir_1d\n",
    "y_train_full_2d = y_dir_2d\n",
    "y_train_full_3d = y_dir_3d\n",
    "y_train_full_4d = y_dir_4d\n",
    "y_train_full_5d = y_dir_5d\n",
    "\n",
    "regressor_1d = RandomForestRegressor(n_estimators=100, random_state=random_state)\n",
    "classifier_1d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "regressor_1d.fit(X_train_full, df['next_1d_close'])\n",
    "classifier_1d.fit(X_train_full, y_train_full_1d)\n",
    "predicted_price_1d = regressor_1d.predict(X.iloc[[-1]])[0]\n",
    "predicted_direction_1d = classifier_1d.predict(X.iloc[[-1]])[0]\n",
    "\n",
    "regressor_2d = RandomForestRegressor(n_estimators=100, random_state=random_state)\n",
    "classifier_2d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "regressor_2d.fit(X_train_full, df['next_2d_close'])\n",
    "classifier_2d.fit(X_train_full, y_train_full_2d)\n",
    "predicted_price_2d = regressor_2d.predict(X.iloc[[-1]])[0]\n",
    "predicted_direction_2d = classifier_2d.predict(X.iloc[[-1]])[0]\n",
    "\n",
    "regressor_3d = RandomForestRegressor(n_estimators=100, random_state=random_state)\n",
    "classifier_3d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "regressor_3d.fit(X_train_full, df['next_3d_close'])\n",
    "classifier_3d.fit(X_train_full, y_train_full_3d)\n",
    "predicted_price_3d = regressor_3d.predict(X.iloc[[-1]])[0]\n",
    "predicted_direction_3d = classifier_3d.predict(X.iloc[[-1]])[0]\n",
    "\n",
    "regressor_4d = RandomForestRegressor(n_estimators=100, random_state=random_state)\n",
    "classifier_4d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "regressor_4d.fit(X_train_full, df['next_4d_close'])\n",
    "classifier_4d.fit(X_train_full, y_train_full_4d)\n",
    "predicted_price_4d = regressor_4d.predict(X.iloc[[-1]])[0]\n",
    "predicted_direction_4d = classifier_4d.predict(X.iloc[[-1]])[0]\n",
    "\n",
    "regressor_5d = RandomForestRegressor(n_estimators=100, random_state=random_state)\n",
    "classifier_5d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "regressor_5d.fit(X_train_full, df['next_5d_close'])\n",
    "classifier_5d.fit(X_train_full, y_train_full_5d)\n",
    "predicted_price_5d = regressor_5d.predict(X.iloc[[-1]])[0]\n",
    "predicted_direction_5d = classifier_5d.predict(X.iloc[[-1]])[0]\n",
    "\n",
    "# Step 9: Results\n",
    "print(\"\\n📊 PANW Forecast\")\n",
    "print(f\"Date of Prediction: {prediction_date_prediction}\")\n",
    "print(\"\\n--- Predictions ---\")\n",
    "print(f\"\\n🗓️ Prediction for {prediction_date_1d}:\")\n",
    "print(f\"📈 Predicted price: ${predicted_price_1d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_1d == 1 else 'Down'}\")\n",
    "\n",
    "print(f\"\\n🗓️ Prediction for {prediction_date_2d}:\")\n",
    "print(f\"📈 Predicted price: ${predicted_price_2d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_2d == 1 else 'Down'}\")\n",
    "\n",
    "print(f\"\\n🗓️ Prediction for {prediction_date_3d}:\")\n",
    "print(f\"📈 Predicted price: ${predicted_price_3d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_3d == 1 else 'Down'}\")\n",
    "\n",
    "print(f\"\\n🗓️ Prediction for {prediction_date_4d}:\")\n",
    "print(f\"📈 Predicted price: ${predicted_price_4d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_4d == 1 else 'Down'}\")\n",
    "\n",
    "print(f\"\\n🗓️ Prediction for {prediction_date_5d}:\")\n",
    "print(f\"📈 Predicted price: ${predicted_price_5d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_5d == 1 else 'Down'}\")\n",
    "\n",
    "print(\"\\n--- Debugging Information ---\")\n",
    "print(f\"Latest Closing Price (from X): ${df['Close'].iloc[-1].item():.2f}\")\n",
    "if len(df) > 1:\n",
    "    print(f\"Next Day's Closing Price (actual from data): ${df['Close'].iloc[-2].item():.2f}\")\n",
    "if len(df) > 2:\n",
    "    print(f\"Closing Price in 2 Days (actual from data): ${df['Close'].iloc[-3].item():.2f}\")\n",
    "if len(df) > 3:\n",
    "    print(f\"Closing Price in 3 Days (actual from data): ${df['Close'].iloc[-4].item():.2f}\")\n",
    "if len(df) > 4:\n",
    "    print(f\"Closing Price in 4 Days (actual from data): ${df['Close'].iloc[-5].item():.2f}\")\n",
    "if len(df) > 5:\n",
    "    print(f\"Closing Price in 5 Days (actual from data): ${df['Close'].iloc[-6].item():.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "1a972957-ead6-494a-9ba7-a134ec58d66f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the stock symbol (e.g., AAPL, MSFT, GOOG):  OM\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Direction Prediction Accuracy on Test Set ---\n",
      "Accuracy for 1-day direction prediction: 57.39%\n",
      "Accuracy for 2-day direction prediction: 64.78%\n",
      "Accuracy for 3-day direction prediction: 68.70%\n",
      "Accuracy for 4-day direction prediction: 76.52%\n",
      "Accuracy for 5-day direction prediction: 80.00%\n",
      "\n",
      "📊 Stock Forecast\n",
      "Stock Symbol: OM\n",
      "Date of Prediction: 2025-05-28\n",
      "\n",
      "--- Predictions ---\n",
      "\n",
      "🗓️ Prediction for 2025-05-29:\n",
      "📈 Predicted price: $18.66\n",
      "📉 Predicted direction: Down\n",
      "\n",
      "🗓️ Prediction for 2025-05-30:\n",
      "📈 Predicted price: $18.17\n",
      "📉 Predicted direction: Down\n",
      "\n",
      "🗓️ Prediction for 2025-05-31:\n",
      "📈 Predicted price: $18.54\n",
      "📉 Predicted direction: Down\n",
      "\n",
      "🗓️ Prediction for 2025-06-01:\n",
      "📈 Predicted price: $18.67\n",
      "📉 Predicted direction: Down\n",
      "\n",
      "🗓️ Prediction for 2025-06-02:\n",
      "📈 Predicted price: $19.24\n",
      "📉 Predicted direction: Up\n",
      "\n",
      "--- Debugging Information ---\n",
      "Latest Closing Price (from X): $19.50\n",
      "Next Day's Closing Price (actual from data): $18.79\n",
      "Closing Price in 2 Days (actual from data): $17.95\n",
      "Closing Price in 3 Days (actual from data): $18.47\n",
      "Closing Price in 4 Days (actual from data): $18.60\n",
      "Closing Price in 5 Days (actual from data): $19.51\n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Get stock symbol from the user\n",
    "stock_symbol = input(\"Enter the stock symbol (e.g., AAPL, MSFT, GOOG): \").upper()\n",
    "\n",
    "# Step 1: Download data\n",
    "df = yf.download(stock_symbol, start=\"2018-01-01\")\n",
    "\n",
    "# Step 2: Clean and flatten\n",
    "df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "\n",
    "# Force flatten all columns to Series\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].astype(float).squeeze()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 3: Add indicators — use .values.ravel() or .squeeze() to ensure 1D inputs\n",
    "df['rsi'] = RSIIndicator(close=df['Close'].squeeze()).rsi()\n",
    "df['stoch'] = StochasticOscillator(\n",
    "    high=df['High'].squeeze(),\n",
    "    low=df['Low'].squeeze(),\n",
    "    close=df['Close'].squeeze()\n",
    ").stoch()\n",
    "df['macd'] = MACD(close=df['Close'].squeeze()).macd_diff()\n",
    "df['obv'] = OnBalanceVolumeIndicator(\n",
    "    close=df['Close'].squeeze(),\n",
    "    volume=df['Volume'].squeeze()\n",
    ").on_balance_volume()\n",
    "df['sma_10'] = SMAIndicator(close=df['Close'].squeeze(), window=10).sma_indicator()\n",
    "df['ema_20'] = EMAIndicator(close=df['Close'].squeeze(), window=20).ema_indicator()\n",
    "\n",
    "bb = BollingerBands(close=df['Close'].squeeze(), window=20, window_dev=2)\n",
    "df['bb_bbm'] = bb.bollinger_mavg()\n",
    "df['bb_bbh'] = bb.bollinger_hband()\n",
    "df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "# Step 4: Target for prediction\n",
    "# 1-day prediction\n",
    "df['next_1d_close'] = df['Close'].shift(1)\n",
    "df['dir_1d'] = (df['next_1d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 2-day prediction\n",
    "df['next_2d_close'] = df['Close'].shift(2)\n",
    "df['dir_2d'] = (df['next_2d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 3-day prediction\n",
    "df['next_3d_close'] = df['Close'].shift(3)\n",
    "df['dir_3d'] = (df['next_3d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 4-day prediction\n",
    "df['next_4d_close'] = df['Close'].shift(4)\n",
    "df['dir_4d'] = (df['next_4d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "# 5-day prediction\n",
    "df['next_5d_close'] = df['Close'].shift(5)\n",
    "df['dir_5d'] = (df['next_5d_close'].squeeze() > df['Close'].squeeze()).astype(int)\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Step 5: Prepare features and target variables\n",
    "features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "X = df[features]\n",
    "\n",
    "y_dir_1d = df['dir_1d']\n",
    "y_dir_2d = df['dir_2d']\n",
    "y_dir_3d = df['dir_3d']\n",
    "y_dir_4d = df['dir_4d']\n",
    "y_dir_5d = df['dir_5d']\n",
    "\n",
    "# Step 6: Split data into training and testing sets\n",
    "test_size = 0.2  # 20% for testing\n",
    "random_state = 42 # for reproducibility\n",
    "\n",
    "X_train, X_test, y_train_1d, y_test_1d = train_test_split(X, y_dir_1d, test_size=test_size, random_state=random_state, shuffle=False)\n",
    "X_train, X_test, y_train_2d, y_test_2d = train_test_split(X, y_dir_2d, test_size=test_size, random_state=random_state, shuffle=False)\n",
    "X_train, X_test, y_train_3d, y_test_3d = train_test_split(X, y_dir_3d, test_size=test_size, random_state=random_state, shuffle=False)\n",
    "X_train, X_test, y_train_4d, y_test_4d = train_test_split(X, y_dir_4d, test_size=test_size, random_state=random_state, shuffle=False)\n",
    "X_train, X_test, y_train_5d, y_test_5d = train_test_split(X, y_dir_5d, test_size=test_size, random_state=random_state, shuffle=False)\n",
    "\n",
    "# Step 7: Train direction classification models and evaluate accuracy\n",
    "print(\"\\n--- Direction Prediction Accuracy on Test Set ---\")\n",
    "\n",
    "# 1-day prediction\n",
    "classifier_1d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "classifier_1d.fit(X_train, y_train_1d)\n",
    "y_pred_1d = classifier_1d.predict(X_test)\n",
    "accuracy_1d = accuracy_score(y_test_1d, y_pred_1d)\n",
    "print(f\"Accuracy for 1-day direction prediction: {accuracy_1d * 100:.2f}%\")\n",
    "\n",
    "# 2-day prediction\n",
    "classifier_2d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "classifier_2d.fit(X_train, y_train_2d)\n",
    "y_pred_2d = classifier_2d.predict(X_test)\n",
    "accuracy_2d = accuracy_score(y_test_2d, y_pred_2d)\n",
    "print(f\"Accuracy for 2-day direction prediction: {accuracy_2d * 100:.2f}%\")\n",
    "\n",
    "# 3-day prediction\n",
    "classifier_3d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "classifier_3d.fit(X_train, y_train_3d)\n",
    "y_pred_3d = classifier_3d.predict(X_test)\n",
    "accuracy_3d = accuracy_score(y_test_3d, y_pred_3d)\n",
    "print(f\"Accuracy for 3-day direction prediction: {accuracy_3d * 100:.2f}%\")\n",
    "\n",
    "# 4-day prediction\n",
    "classifier_4d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "classifier_4d.fit(X_train, y_train_4d)\n",
    "y_pred_4d = classifier_4d.predict(X_test)\n",
    "accuracy_4d = accuracy_score(y_test_4d, y_pred_4d)\n",
    "print(f\"Accuracy for 4-day direction prediction: {accuracy_4d * 100:.2f}%\")\n",
    "\n",
    "# 5-day prediction\n",
    "classifier_5d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "classifier_5d.fit(X_train, y_train_5d)\n",
    "y_pred_5d = classifier_5d.predict(X_test)\n",
    "accuracy_5d = accuracy_score(y_test_5d, y_pred_5d)\n",
    "print(f\"Accuracy for 5-day direction prediction: {accuracy_5d * 100:.2f}%\")\n",
    "\n",
    "# Step 8: Train final models on the entire dataset and predict\n",
    "# Get the last date from the downloaded data\n",
    "last_date = df.index[-1]\n",
    "\n",
    "# Calculate prediction dates\n",
    "prediction_date_1d = (last_date + pd.Timedelta(days=1)).strftime('%Y-%m-%d')\n",
    "prediction_date_2d = (last_date + pd.Timedelta(days=2)).strftime('%Y-%m-%d')\n",
    "prediction_date_3d = (last_date + pd.Timedelta(days=3)).strftime('%Y-%m-%d')\n",
    "prediction_date_4d = (last_date + pd.Timedelta(days=4)).strftime('%Y-%m-%d')\n",
    "prediction_date_5d = (last_date + pd.Timedelta(days=5)).strftime('%Y-%m-%d')\n",
    "prediction_date_prediction = last_date.strftime('%Y-%m-%d')\n",
    "\n",
    "X_train_full = X\n",
    "y_train_full_1d = y_dir_1d\n",
    "y_train_full_2d = y_dir_2d\n",
    "y_train_full_3d = y_dir_3d\n",
    "y_train_full_4d = y_dir_4d\n",
    "y_train_full_5d = y_dir_5d\n",
    "\n",
    "regressor_1d = RandomForestRegressor(n_estimators=100, random_state=random_state)\n",
    "classifier_1d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "regressor_1d.fit(X_train_full, df['next_1d_close'])\n",
    "classifier_1d.fit(X_train_full, y_train_full_1d)\n",
    "predicted_price_1d = regressor_1d.predict(X.iloc[[-1]])[0]\n",
    "predicted_direction_1d = classifier_1d.predict(X.iloc[[-1]])[0]\n",
    "\n",
    "regressor_2d = RandomForestRegressor(n_estimators=100, random_state=random_state)\n",
    "classifier_2d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "regressor_2d.fit(X_train_full, df['next_2d_close'])\n",
    "classifier_2d.fit(X_train_full, y_train_full_2d)\n",
    "predicted_price_2d = regressor_2d.predict(X.iloc[[-1]])[0]\n",
    "predicted_direction_2d = classifier_2d.predict(X.iloc[[-1]])[0]\n",
    "\n",
    "regressor_3d = RandomForestRegressor(n_estimators=100, random_state=random_state)\n",
    "classifier_3d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "regressor_3d.fit(X_train_full, df['next_3d_close'])\n",
    "classifier_3d.fit(X_train_full, y_train_full_3d)\n",
    "predicted_price_3d = regressor_3d.predict(X.iloc[[-1]])[0]\n",
    "predicted_direction_3d = classifier_3d.predict(X.iloc[[-1]])[0]\n",
    "\n",
    "regressor_4d = RandomForestRegressor(n_estimators=100, random_state=random_state)\n",
    "classifier_4d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "regressor_4d.fit(X_train_full, df['next_4d_close'])\n",
    "classifier_4d.fit(X_train_full, y_train_full_4d)\n",
    "predicted_price_4d = regressor_4d.predict(X.iloc[[-1]])[0]\n",
    "predicted_direction_4d = classifier_4d.predict(X.iloc[[-1]])[0]\n",
    "\n",
    "regressor_5d = RandomForestRegressor(n_estimators=100, random_state=random_state)\n",
    "classifier_5d = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "regressor_5d.fit(X_train_full, df['next_5d_close'])\n",
    "classifier_5d.fit(X_train_full, y_train_full_5d)\n",
    "predicted_price_5d = regressor_5d.predict(X.iloc[[-1]])[0]\n",
    "predicted_direction_5d = classifier_5d.predict(X.iloc[[-1]])[0]\n",
    "\n",
    "# Step 9: Results\n",
    "print(\"\\n📊 Stock Forecast\")\n",
    "print(f\"Stock Symbol: {stock_symbol}\")\n",
    "print(f\"Date of Prediction: {prediction_date_prediction}\")\n",
    "print(\"\\n--- Predictions ---\")\n",
    "print(f\"\\n🗓️ Prediction for {prediction_date_1d}:\")\n",
    "print(f\"📈 Predicted price: ${predicted_price_1d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_1d == 1 else 'Down'}\")\n",
    "\n",
    "print(f\"\\n🗓️ Prediction for {prediction_date_2d}:\")\n",
    "print(f\"📈 Predicted price: ${predicted_price_2d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_2d == 1 else 'Down'}\")\n",
    "\n",
    "print(f\"\\n🗓️ Prediction for {prediction_date_3d}:\")\n",
    "print(f\"📈 Predicted price: ${predicted_price_3d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_3d == 1 else 'Down'}\")\n",
    "\n",
    "print(f\"\\n🗓️ Prediction for {prediction_date_4d}:\")\n",
    "print(f\"📈 Predicted price: ${predicted_price_4d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_4d == 1 else 'Down'}\")\n",
    "\n",
    "print(f\"\\n🗓️ Prediction for {prediction_date_5d}:\")\n",
    "print(f\"📈 Predicted price: ${predicted_price_5d:.2f}\")\n",
    "print(f\"📉 Predicted direction: {'Up' if predicted_direction_5d == 1 else 'Down'}\")\n",
    "\n",
    "print(\"\\n--- Debugging Information ---\")\n",
    "print(f\"Latest Closing Price (from X): ${df['Close'].iloc[-1].item():.2f}\")\n",
    "if len(df) > 1:\n",
    "    print(f\"Next Day's Closing Price (actual from data): ${df['Close'].iloc[-2].item():.2f}\")\n",
    "if len(df) > 2:\n",
    "    print(f\"Closing Price in 2 Days (actual from data): ${df['Close'].iloc[-3].item():.2f}\")\n",
    "if len(df) > 3:\n",
    "    print(f\"Closing Price in 3 Days (actual from data): ${df['Close'].iloc[-4].item():.2f}\")\n",
    "if len(df) > 4:\n",
    "    print(f\"Closing Price in 4 Days (actual from data): ${df['Close'].iloc[-5].item():.2f}\")\n",
    "if len(df) > 5:\n",
    "    print(f\"Closing Price in 5 Days (actual from data): ${df['Close'].iloc[-6].item():.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "7dfa82bb-a7b2-4c9b-a4d7-ff6095aa023c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting streamlit\n",
      "  Downloading streamlit-1.45.1-py3-none-any.whl.metadata (8.9 kB)\n",
      "Collecting altair<6,>=4.0 (from streamlit)\n",
      "  Downloading altair-5.5.0-py3-none-any.whl.metadata (11 kB)\n",
      "Collecting blinker<2,>=1.5.0 (from streamlit)\n",
      "  Downloading blinker-1.9.0-py3-none-any.whl.metadata (1.6 kB)\n",
      "Collecting cachetools<6,>=4.0 (from streamlit)\n",
      "  Downloading cachetools-5.5.2-py3-none-any.whl.metadata (5.4 kB)\n",
      "Collecting click<9,>=7.0 (from streamlit)\n",
      "  Downloading click-8.2.1-py3-none-any.whl.metadata (2.5 kB)\n",
      "Requirement already satisfied: numpy<3,>=1.23 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from streamlit) (2.2.2)\n",
      "Requirement already satisfied: packaging<25,>=20 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from streamlit) (24.2)\n",
      "Requirement already satisfied: pandas<3,>=1.4.0 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from streamlit) (2.2.3)\n",
      "Requirement already satisfied: pillow<12,>=7.1.0 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from streamlit) (11.1.0)\n",
      "Requirement already satisfied: protobuf<7,>=3.20 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from streamlit) (6.31.0)\n",
      "Collecting pyarrow>=7.0 (from streamlit)\n",
      "  Downloading pyarrow-20.0.0-cp313-cp313-win_amd64.whl.metadata (3.4 kB)\n",
      "Requirement already satisfied: requests<3,>=2.27 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from streamlit) (2.32.3)\n",
      "Collecting tenacity<10,>=8.1.0 (from streamlit)\n",
      "  Downloading tenacity-9.1.2-py3-none-any.whl.metadata (1.2 kB)\n",
      "Collecting toml<2,>=0.10.1 (from streamlit)\n",
      "  Downloading toml-0.10.2-py2.py3-none-any.whl.metadata (7.1 kB)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.4.0 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from streamlit) (4.12.2)\n",
      "Collecting watchdog<7,>=2.1.5 (from streamlit)\n",
      "  Downloading watchdog-6.0.0-py3-none-win_amd64.whl.metadata (44 kB)\n",
      "Collecting gitpython!=3.1.19,<4,>=3.0.7 (from streamlit)\n",
      "  Downloading GitPython-3.1.44-py3-none-any.whl.metadata (13 kB)\n",
      "Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n",
      "  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n",
      "Requirement already satisfied: tornado<7,>=6.0.3 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from streamlit) (6.4.2)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n",
      "Requirement already satisfied: jsonschema>=3.0 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n",
      "Requirement already satisfied: narwhals>=1.14.2 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from altair<6,>=4.0->streamlit) (1.35.0)\n",
      "Requirement already satisfied: colorama in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from click<9,>=7.0->streamlit) (0.4.6)\n",
      "Collecting gitdb<5,>=4.0.1 (from gitpython!=3.1.19,<4,>=3.0.7->streamlit)\n",
      "  Downloading gitdb-4.0.12-py3-none-any.whl.metadata (1.2 kB)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from pandas<3,>=1.4.0->streamlit) (2024.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from pandas<3,>=1.4.0->streamlit) (2023.3)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from requests<3,>=2.27->streamlit) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from requests<3,>=2.27->streamlit) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.3.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2025.1.31)\n",
      "Collecting smmap<6,>=3.0.1 (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit)\n",
      "  Downloading smmap-5.0.2-py3-none-any.whl.metadata (4.3 kB)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n",
      "Requirement already satisfied: attrs>=22.2.0 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (24.3.0)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2023.7.1)\n",
      "Requirement already satisfied: referencing>=0.28.4 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.30.2)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.22.3)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\pavan\\desktop\\sample_project\\env\\lib\\site-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.16.0)\n",
      "Downloading streamlit-1.45.1-py3-none-any.whl (9.9 MB)\n",
      "   ---------------------------------------- 0.0/9.9 MB ? eta -:--:--\n",
      "   ----------------- ---------------------- 4.2/9.9 MB 25.1 MB/s eta 0:00:01\n",
      "   ----------------------------------- ---- 8.7/9.9 MB 22.1 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 9.9/9.9 MB 20.7 MB/s eta 0:00:00\n",
      "Downloading altair-5.5.0-py3-none-any.whl (731 kB)\n",
      "   ---------------------------------------- 0.0/731.2 kB ? eta -:--:--\n",
      "   --------------------------------------- 731.2/731.2 kB 12.9 MB/s eta 0:00:00\n",
      "Downloading blinker-1.9.0-py3-none-any.whl (8.5 kB)\n",
      "Downloading cachetools-5.5.2-py3-none-any.whl (10 kB)\n",
      "Downloading click-8.2.1-py3-none-any.whl (102 kB)\n",
      "Downloading GitPython-3.1.44-py3-none-any.whl (207 kB)\n",
      "Downloading pyarrow-20.0.0-cp313-cp313-win_amd64.whl (25.7 MB)\n",
      "   ---------------------------------------- 0.0/25.7 MB ? eta -:--:--\n",
      "   -------- ------------------------------- 5.2/25.7 MB 27.5 MB/s eta 0:00:01\n",
      "   ------------ --------------------------- 8.1/25.7 MB 25.8 MB/s eta 0:00:01\n",
      "   ---------------------- ----------------- 14.4/25.7 MB 22.9 MB/s eta 0:00:01\n",
      "   -------------------------- ------------- 17.3/25.7 MB 23.2 MB/s eta 0:00:01\n",
      "   -------------------------------------- - 24.4/25.7 MB 23.2 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 25.7/25.7 MB 21.3 MB/s eta 0:00:00\n",
      "Downloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n",
      "   ---------------------------------------- 0.0/6.9 MB ? eta -:--:--\n",
      "   ---------------------------- ----------- 5.0/6.9 MB 27.2 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 6.9/6.9 MB 21.3 MB/s eta 0:00:00\n",
      "Downloading tenacity-9.1.2-py3-none-any.whl (28 kB)\n",
      "Downloading toml-0.10.2-py2.py3-none-any.whl (16 kB)\n",
      "Downloading watchdog-6.0.0-py3-none-win_amd64.whl (79 kB)\n",
      "Downloading gitdb-4.0.12-py3-none-any.whl (62 kB)\n",
      "Downloading smmap-5.0.2-py3-none-any.whl (24 kB)\n",
      "Installing collected packages: watchdog, toml, tenacity, smmap, pyarrow, click, cachetools, blinker, pydeck, gitdb, gitpython, altair, streamlit\n",
      "Successfully installed altair-5.5.0 blinker-1.9.0 cachetools-5.5.2 click-8.2.1 gitdb-4.0.12 gitpython-3.1.44 pyarrow-20.0.0 pydeck-0.9.1 smmap-5.0.2 streamlit-1.45.1 tenacity-9.1.2 toml-0.10.2 watchdog-6.0.0\n"
     ]
    }
   ],
   "source": [
    "! pip install streamlit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2003ac80-9c7c-4e82-9eaa-a15d8a8b456b",
   "metadata": {},
   "outputs": [],
   "source": [
    "! streamlit hello"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8181d7cc-7599-4db1-a75f-ed6213fa90dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    " \n",
    "st.write(\"\"\"\n",
    "# My first app\n",
    "Hello *world!*\n",
    "\"\"\")\n",
    " \n",
    "df = pd.read_csv(\"my_data.csv\")\n",
    "st.line_chart(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03a874b8-45f1-4198-baa6-1791bacd1e3c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
