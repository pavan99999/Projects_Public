{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0bab9b2e-e8e4-4389-bac9-ed6199074267",
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    import streamlit as st\n",
    "except ModuleNotFoundError:\n",
    "    raise ImportError(\"The 'streamlit' package is required to run this web application. Please install it using 'pip install streamlit'.\")\n",
    "\n",
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from ta.momentum import RSIIndicator, StochasticOscillator\n",
    "from ta.trend import MACD, SMAIndicator, EMAIndicator\n",
    "from ta.volume import OnBalanceVolumeIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "st.title(\"ðŸ“Š Stock Price Forecast (1 to 5 Days)\")\n",
    "\n",
    "stock_symbol = st.text_input(\"Enter Stock Symbol (e.g., AAPL, MSFT, GOOG)\", \"AAPL\").upper()\n",
    "\n",
    "if st.button(\"Run Forecast\"):\n",
    "    df = yf.download(stock_symbol, start=\"2018-01-01\")\n",
    "\n",
    "    df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()\n",
    "    for col in df.columns:\n",
    "        df[col] = df[col].astype(float).squeeze()\n",
    "    df.dropna(inplace=True)\n",
    "\n",
    "    df['rsi'] = RSIIndicator(close=df['Close']).rsi()\n",
    "    df['stoch'] = StochasticOscillator(high=df['High'], low=df['Low'], close=df['Close']).stoch()\n",
    "    df['macd'] = MACD(close=df['Close']).macd_diff()\n",
    "    df['obv'] = OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume']).on_balance_volume()\n",
    "    df['sma_10'] = SMAIndicator(close=df['Close'], window=10).sma_indicator()\n",
    "    df['ema_20'] = EMAIndicator(close=df['Close'], window=20).ema_indicator()\n",
    "\n",
    "    bb = BollingerBands(close=df['Close'], window=20, window_dev=2)\n",
    "    df['bb_bbm'] = bb.bollinger_mavg()\n",
    "    df['bb_bbh'] = bb.bollinger_hband()\n",
    "    df['bb_bbl'] = bb.bollinger_lband()\n",
    "\n",
    "    # Targets\n",
    "    for i in range(1, 6):\n",
    "        df[f'next_{i}d_close'] = df['Close'].shift(-i)\n",
    "        df[f'dir_{i}d'] = (df[f'next_{i}d_close'] > df['Close']).astype(int)\n",
    "\n",
    "    df.dropna(inplace=True)\n",
    "    features = ['rsi', 'stoch', 'macd', 'obv', 'sma_10', 'ema_20', 'bb_bbm', 'bb_bbh', 'bb_bbl']\n",
    "    X = df[features]\n",
    "\n",
    "    predictions = []\n",
    "    random_state = 42\n",
    "    for i in range(1, 6):\n",
    "        y_dir = df[f'dir_{i}d']\n",
    "        y_price = df[f'next_{i}d_close']\n",
    "\n",
    "        regressor = RandomForestRegressor(n_estimators=100, random_state=random_state)\n",
    "        classifier = RandomForestClassifier(n_estimators=100, random_state=random_state)\n",
    "        regressor.fit(X, y_price)\n",
    "        classifier.fit(X, y_dir)\n",
    "\n",
    "        predicted_price = regressor.predict(X.iloc[[-1]])[0]\n",
    "        predicted_direction = classifier.predict(X.iloc[[-1]])[0]\n",
    "\n",
    "        prediction_date = (df.index[-1] + pd.Timedelta(days=i)).strftime('%Y-%m-%d')\n",
    "        predictions.append((prediction_date, predicted_price, predicted_direction))\n",
    "\n",
    "    st.subheader(f\"Predictions for {stock_symbol}\")\n",
    "    for date, price, direction in predictions:\n",
    "        st.markdown(f\"**ðŸ“… {date}**\")\n",
    "        st.write(f\"Predicted Price: ${price:.2f}\")\n",
    "        st.write(f\"Predicted Direction: {'ðŸ“ˆ Up' if direction == 1 else 'ðŸ“‰ Down'}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
